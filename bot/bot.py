# bot.py
# -*- coding: utf-8 -*-
import os
import sys
import django
import asyncio
from dotenv import load_dotenv
from typing import List, Optional
from html import escape


# ---------------------------
# Django setup
# ---------------------------
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "linguaglow.settings")
load_dotenv()
django.setup()

# ---------------------------
# Models
# ---------------------------
from users.models import CustomUser, TelegramAuthToken, TelegramMetrics
from hub.models import Lesson, LessonPublicData

# ---------------------------
# aiogram imports & config
# ---------------------------
from aiohttp import ClientTimeout
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import (
    Message,
    CallbackQuery,
    InputFile,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramNetworkError
from asgiref.sync import sync_to_async
from django.db.models import Q

# ---------------------------
# Config
# ---------------------------
API_TOKEN = os.getenv("TG_API_TOKEN", "8308279541:AAEsAfiOcgQaHLZlrZRlSc2X2uvZ1TKu6zY")
# —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è aiohttp
session = AiohttpSession(timeout=ClientTimeout(total=60))
bot = Bot(token=API_TOKEN, session=session, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ---------------------------
# ORM helpers (sync wrappers)
# ---------------------------
def _get_token_sync(token_value: str):
    try:
        return TelegramAuthToken.objects.select_related("user").get(token=token_value)
    except TelegramAuthToken.DoesNotExist:
        return None

def _mark_token_used_sync(token_pk):
    token = TelegramAuthToken.objects.get(pk=token_pk)
    token.used = True
    token.save(update_fields=["used"])
    return True

get_token = sync_to_async(_get_token_sync, thread_sensitive=True)
mark_token_used = sync_to_async(_mark_token_used_sync, thread_sensitive=True)
create_metrics = sync_to_async(TelegramMetrics.objects.create, thread_sensitive=True)

@sync_to_async
def save_metrics_update(metrics_obj, **kwargs):
    for k, v in kwargs.items():
        setattr(metrics_obj, k, v)
    metrics_obj.save()
    return metrics_obj

@sync_to_async
def fetch_or_create_metrics(tg_id: int, tg_username: Optional[str]):
    obj = TelegramMetrics.objects.filter(telegram_id=tg_id).first()
    if not obj:
        obj = TelegramMetrics.objects.create(
            telegram_id=tg_id,
            telegram_username=tg_username,
            pdf_downloaded=0,
            generation_requests=0,
        )
    return obj

# ---------------------------
# Search utility
# ---------------------------
@sync_to_async
def find_lessons_by_filters(levels: List[str],
                            audience_keyword: Optional[str],
                            textbook_keyword: Optional[str]):
    """
    –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Ä–æ–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ —É—á–µ–±–Ω–∏–∫—É (–≤ –∏–º–µ–Ω–∏ —É—Ä–æ–∫–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ LessonPublicData.
    –í –ª–æ–≥–∞—Ö ‚Äî –ø–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    all_qs = LessonPublicData.objects.select_related("lesson").all()
    print(f"[DEBUG] –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ: {all_qs.count()}")
    print(f"[DEBUG] –í—Å–µ —É—Ä–æ–∫–∏ (names): {[l.lesson.name for l in all_qs]}")

    qs = all_qs.filter(level__in=levels)
    print(f"[DEBUG] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ levels={levels}: {qs.count()}")
    print(f"[DEBUG] –£—Ä–æ–∫–∏ –ø–æ—Å–ª–µ levels: {[l.lesson.name for l in qs]}")

    if textbook_keyword and textbook_keyword.lower() not in ("–Ω–µ—Ç", "no"):
        qs = qs.filter(lesson__name__icontains=textbook_keyword)
        print(f"[DEBUG] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ textbook='{textbook_keyword}': {qs.count()}")
        print(f"[DEBUG] –£—Ä–æ–∫–∏ –ø–æ—Å–ª–µ textbook: {[l.lesson.name for l in qs]}")

    qs = qs.filter(pdf_file__isnull=False).order_by("-lesson__created_at")
    print(f"[DEBUG] –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ pdf_file: {qs.count()}")
    print(f"[DEBUG] –ò—Ç–æ–≥–æ–≤—ã–µ —É—Ä–æ–∫–∏ (with pdf): {[l.lesson.name for l in qs]}")

    return list(qs)

@sync_to_async
def list_all_public_lessons(limit: int = 50):
    qs = LessonPublicData.objects.select_related("lesson").filter(pdf_file__isnull=False).order_by("-lesson__created_at")[:limit]
    return list(qs)

# ---------------------------
# Constants & states
# ---------------------------
PUBLIC_LEVEL_CHOICES_KEYS = ["A1", "A2", "B1", "B2", "C1"]

class OnboardingStates(StatesGroup):
    levels = State()
    audience = State()
    textbook = State()
    done = State()

# ---------------------------
# Keyboards (aiogram v3) -- builder pattern
# ---------------------------
def levels_keyboard(selected: Optional[List[str]] = None) -> object:
    selected = set(selected or [])
    builder = InlineKeyboardBuilder()
    for lvl in PUBLIC_LEVEL_CHOICES_KEYS:
        label = f"[‚úì] {lvl}" if lvl in selected else lvl
        builder.button(text=label, callback_data=f"level_toggle:{lvl}")
    builder.adjust(3)
    # navigation row
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back:levels", row=1)
    builder.button(text="–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="levels_done", row=1)
    builder.button(text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data="levels_reset", row=1)
    return builder.as_markup()

def audience_keyboard() -> object:
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º 1-4, 5-7, 8-11
    builder = InlineKeyboardBuilder()
    builder.button(text="–ö–ª–∞—Å—Å—ã 1‚Äì4", callback_data="aud:school_1_4")
    builder.button(text="–ö–ª–∞—Å—Å—ã 5‚Äì7", callback_data="aud:school_5_7")
    builder.button(text="–ö–ª–∞—Å—Å—ã 8‚Äì11", callback_data="aud:school_8_11")
    builder.button(text="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", callback_data="aud:university")
    builder.button(text="–†–∞–±–æ—Ç–∞ / Business", callback_data="aud:work")
    builder.adjust(1)
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back:audience")
    return builder.as_markup()

def textbook_keyboard() -> object:
    builder = InlineKeyboardBuilder()
    builder.button(text="Spotlight", callback_data="tb:Spotlight")
    builder.button(text="Starlight", callback_data="tb:Starlight")
    builder.button(text="–ù–µ—Ç", callback_data="tb:–ù–µ—Ç")
    builder.adjust(2)
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back:textbook")
    return builder.as_markup()

def result_keyboard(lesson_public_id: Optional[str] = None, pdf_url: Optional[str] = None) -> object:
    builder = InlineKeyboardBuilder()
    if pdf_url:
        builder.button(text="üì• –°–∫–∞—á–∞—Ç—å PDF", url=pdf_url)
    if lesson_public_id:
        builder.button(text="–ï—â–µ –ø–æ—Ö–æ–∂–∏–µ", callback_data=f"action:more_like_this:{lesson_public_id}")
    builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="action:view_all")
    builder.button(text="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–∫ (2 –∫–ª–∏–∫–∞)", url="https://linguaglow.ru/")
    builder.adjust(1)
    builder.button(text="‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back:to_menu")
    return builder.as_markup()

def simple_menu_keyboard() -> object:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="menu:start_onboarding")
    builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="action:view_all")
    builder.adjust(1)
    return builder.as_markup()

# ---------------------------
# Helper: format lesson info
# ---------------------------
def format_lesson_short(lp: LessonPublicData) -> str:
    has_pdf = bool(lp.pdf_file and lp.pdf_file.name)
    url = f"https://linguaglow.ru/lesson/{lp.link_name or lp.lesson.id}"
    return f"‚Ä¢ {lp.lesson.name} ‚Äî —É—Ä–æ–≤–µ–Ω—å {lp.level} ‚Äî {'PDF' if has_pdf else '–Ω–µ—Ç PDF'} ‚Äî {url}"

# ---------------------------
# Clear start / binding
# ---------------------------
@dp.message(lambda m: m.text and m.text.startswith("/start"))
async def start(message: Message):
    """
    /start <TOKEN>  ‚Äî –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'.
    """
    tg_id = message.from_user.id
    tg_username = getattr(message.from_user, "username", None)

    # ensure metrics
    metrics = await fetch_or_create_metrics(tg_id, tg_username)

    args = message.text.split(maxsplit=1)
    token_arg = args[1].strip() if len(args) > 1 else None
    if not token_arg:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç üëã\n–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∑–∞–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:\n\n"
            "/start YOUR_TOKEN\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ).",
            reply_markup=simple_menu_keyboard()
        )
        return

    token = escape(token_arg)
    if not token or not getattr(token, "is_valid", lambda: True)():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ.")
        return

    user = token.user
    try:
        # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ—Ç—Ä–∏–∫–∞–º
        metrics.user = user
        metrics.telegram_username = tg_username
        await sync_to_async(metrics.save, thread_sensitive=True)()
        await mark_token_used(token.pk)
        await message.answer("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!\n–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤¬ª ‚Üì", reply_markup=simple_menu_keyboard())
    except Exception as e:
        print(f"[ERROR] bind error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ---------------------------
# Fallback / help message
# ---------------------------
@dp.message(lambda m: m.text and m.text.lower() in ("help", "–ø–æ–º–æ—â—å"))
async def help_msg(message: Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ /start <TOKEN> —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤¬ª —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å PDF-—ã.",
        reply_markup=simple_menu_keyboard()
    )

@dp.message()
async def fallback(message: Message):
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start <TOKEN>.", reply_markup=simple_menu_keyboard())

# ---------------------------
# Onboarding flow
# ---------------------------
@dp.callback_query(lambda c: c.data and c.data == "menu:start_onboarding")
async def cb_menu_start(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    tg_username = getattr(callback.from_user, "username", None)
    metrics = await fetch_or_create_metrics(tg_id, tg_username)
    await state.update_data(metrics_id=metrics.id)
    await state.update_data(selected_levels=[])
    await state.set_state(OnboardingStates.levels)
    await callback.message.answer("–®–∞–≥ 1/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=levels_keyboard([]))
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("level_toggle:"))
async def cb_toggle_level(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: List[str] = data.get("selected_levels", [])
    _, lvl = callback.data.split(":", 1)
    if lvl in selected:
        selected.remove(lvl)
    else:
        selected.append(lvl)
    await state.update_data(selected_levels=selected)
    try:
        await callback.message.edit_text("–®–∞–≥ 1/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=levels_keyboard(selected))
    except Exception:
        await callback.message.answer("–£—Ä–æ–≤–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω: " + ", ".join(selected))
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data == "levels_done")
async def cb_levels_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected: List[str] = data.get("selected_levels", [])
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å.", show_alert=True)
        return
    await state.update_data(selected_levels=selected)
    await state.set_state(OnboardingStates.audience)
    await callback.message.edit_text("–®–∞–≥ 2/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:", reply_markup=audience_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data == "levels_reset")
async def cb_levels_reset(callback: CallbackQuery, state: FSMContext):
    await state.update_data(selected_levels=[])
    await callback.message.edit_text("–®–∞–≥ 1/3 ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–Ω–∏ (—Å–±—Ä–æ—à–µ–Ω–æ):", reply_markup=levels_keyboard([]))
    await callback.answer()

# Back handlers
@dp.callback_query(lambda c: c.data and c.data.startswith("back:"))
async def cb_back(callback: CallbackQuery, state: FSMContext):
    _, where = callback.data.split(":", 1)
    if where == "levels":
        # from levels keyboard "back" -> main menu
        await state.clear()
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=simple_menu_keyboard())
    elif where == "audience":
        await state.set_state(OnboardingStates.levels)
        data = await state.get_data()
        await callback.message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π:", reply_markup=levels_keyboard(data.get("selected_levels", [])))
    elif where == "textbook":
        await state.set_state(OnboardingStates.audience)
        await callback.message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏:", reply_markup=audience_keyboard())
    elif where == "to_menu":
        await state.clear()
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=simple_menu_keyboard())
    await callback.answer()

# Audience selection
@dp.callback_query(lambda c: c.data and c.data.startswith("aud:"))
async def cb_audience(callback: CallbackQuery, state: FSMContext):
    aud_map = {
        "aud:school_1_4": "1‚Äì4 –∫–ª–∞—Å—Å",
        "aud:school_5_7": "5‚Äì7 –∫–ª–∞—Å—Å",
        "aud:school_8_11": "8‚Äì11 –∫–ª–∞—Å—Å",
        "aud:university": "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        "aud:work": "—Ä–∞–±–æ—Ç–∞",
    }
    audience_value = aud_map.get(callback.data, "–ø—Ä–æ—á–µ–µ")
    await state.update_data(audience=audience_value)
    await state.set_state(OnboardingStates.textbook)
    await callback.message.edit_text(f"–®–∞–≥ 3/3 ‚Äî –≤—ã –≤—ã–±—Ä–∞–ª–∏: {audience_value}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å):", reply_markup=textbook_keyboard())
    await callback.answer()

# Textbook selection -> search and present results
@dp.callback_query(lambda c: c.data and c.data.startswith("tb:"))
async def cb_textbook(callback: CallbackQuery, state: FSMContext):
    _, textbook_choice = callback.data.split(":", 1)
    await state.update_data(textbook=textbook_choice)

    data = await state.get_data()
    levels = data.get("selected_levels", [])
    audience = data.get("audience")
    textbook = textbook_choice

    await callback.message.edit_text("–ò—â—É –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º...")
    lessons = await find_lessons_by_filters(levels=levels, audience_keyword=audience, textbook_keyword=textbook)

    if lessons:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö
        lp = lessons[0]
        caption = f"–ù–∞–π–¥–µ–Ω–æ: {lp.lesson.name}\n–£—Ä–æ–≤–µ–Ω—å: {lp.level}\n–û–ø–∏—Å–∞–Ω–∏–µ: {lp.meta_description or '‚Äî'}"
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        try:
            if lp.pdf_file and getattr(lp.pdf_file, "name", None):
                # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –Ω–∞ –¥–∏—Å–∫–µ
                path = getattr(lp.pdf_file, "path", None)
                if path and os.path.exists(path):
                    await bot.send_document(chat_id=callback.message.chat.id, document=InputFile(path), caption=caption, reply_markup=result_keyboard(str(lp.id), pdf_url=None))
                else:
                    # fallback –Ω–∞ URL (MEDIA_URL) –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    url = getattr(lp.pdf_file, "url", None)
                    if url:
                        await bot.send_document(chat_id=callback.message.chat.id, document=url, caption=caption, reply_markup=result_keyboard(str(lp.id), pdf_url=url))
                    else:
                        # –Ω–µ—Ç —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ –∏ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ url -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
                        await callback.message.answer(f"{caption}\n\nPDF –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: https://linguaglow.ru/lesson/{lp.link_name}", reply_markup=result_keyboard(str(lp.id)))
            else:
                # –Ω–µ—Ç pdf –≤ –∑–∞–ø–∏—Å–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
                await callback.message.answer(f"{caption}\n\nPDF –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: https://linguaglow.ru/lesson/{lp.link_name}", reply_markup=result_keyboard(str(lp.id)))
            await callback.answer()
            # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, pdf_downloaded) ‚Äî –≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ try, —Ç.–∫. –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–æ
        except Exception as e:
            print(f"[WARN] send PDF error: {e}")
            await callback.message.answer(f"{caption}\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –ø—Ä—è–º–æ –≤ —á–∞—Ç.)\n–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://linguaglow.ru/lesson/{lp.link_name}", reply_markup=result_keyboard(str(lp.id)))
            await callback.answer()
    else:
        # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª—é–±—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        await callback.message.answer(
            "–ú—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º. "
            "–ú–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–∫.",
            reply_markup=result_keyboard(None)
        )
        await callback.answer()

# ---------------------------
# Result actions: more_like_this, view_all, notify
# ---------------------------
@dp.callback_query(lambda c: c.data and c.data.startswith("action:more_like_this"))
async def cb_more_like(callback: CallbackQuery, state: FSMContext):
    # format: action:more_like_this:<lesson_public_id>
    parts = callback.data.split(":")
    lesson_public_id = parts[-1] if len(parts) >= 3 else None
    data = await state.get_data()
    lessons = await find_lessons_by_filters(levels=data.get("selected_levels", []), audience_keyword=data.get("audience"), textbook_keyword=data.get("textbook"))
    if not lessons:
        await callback.message.answer("–ü–æ—Ö–æ–∂–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=result_keyboard(None))
        await callback.answer()
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ (6 —à—Ç)
    text_lines = [format_lesson_short(lp) for lp in lessons[:6]]
    await callback.message.answer("–ü–æ—Ö–æ–∂–∏–µ —É—Ä–æ–∫–∏:\n\n" + "\n".join(text_lines), reply_markup=result_keyboard(None))
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data == "action:view_all")
async def cb_view_all(callback: CallbackQuery, state: FSMContext):
    lessons = await list_all_public_lessons(limit=50)
    if not lessons:
        await callback.message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å PDF –ø–æ–∫–∞ –Ω–µ—Ç.")
        await callback.answer()
        return
    text_lines = [format_lesson_short(lp) for lp in lessons[:20]]
    text = "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–ø–µ—Ä–≤—ã–µ 20):\n\n" + "\n".join(text_lines)
    await callback.message.answer(text, reply_markup=simple_menu_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data == "action:notify_when_ready")
async def cb_notify(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    metrics_id = data.get("metrics_id")
    if metrics_id:
        try:
            metrics = await sync_to_async(lambda: TelegramMetrics.objects.get(id=metrics_id))()
            if hasattr(metrics, "notify_on_new_material"):
                await save_metrics_update(metrics, notify_on_new_material=True)
        except Exception:
            pass
    await callback.message.answer("–û–∫–µ–π! –ú—ã –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
    await callback.answer()

# ---------------------------
# Polling loop with reconnect
# ---------------------------
async def safe_polling():
    while True:
        try:
            me = await bot.get_me()
            print(f"[INFO] Bot: {me.username} (id={me.id})")
            await dp.start_polling(bot)
        except TelegramNetworkError as e:
            print(f"[WARNING] TelegramNetworkError: {e}. Reconnect in 5s...")
            await asyncio.sleep(5)
        except Exception as e:
            print(f"[ERROR] Unexpected polling error: {e}")
            await asyncio.sleep(5)

# ---------------------------
# Entrypoint
# ---------------------------
if __name__ == "__main__":
    try:
        import nest_asyncio
        nest_asyncio.apply()
    except Exception:
        pass

    try:
        asyncio.run(safe_polling())
    finally:
        try:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(session.close())
        except Exception:
            pass
