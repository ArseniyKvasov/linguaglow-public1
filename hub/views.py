from __future__ import annotations

import mimetypes
import traceback
from decimal import Decimal
from typing import Optional
from urllib.parse import urlparse

import markdown

import bleach
import json
import logging
import time

import requests
from celery import states
from celery.result import AsyncResult
from dateutil.relativedelta import relativedelta
from django.contrib import messages
from django.contrib.admin.views.decorators import staff_member_required
from django.core.exceptions import ObjectDoesNotExist, PermissionDenied, ValidationError
from django.core.mail import send_mail
from django.core.serializers.json import DjangoJSONEncoder
from django.core.validators import validate_email
from django.db.models import Case, When, Value, IntegerField
import hashlib
import os
import random
import re
import secrets
import uuid
import base64

from django.views.decorators.csrf import csrf_exempt
from django_ratelimit.decorators import ratelimit

from .tasks import process_pdf_section_task, generate_audio_task, generate_task_celery, generate_lesson_task
import jwt
from PIL import Image
from datetime import timezone, date, datetime, timedelta
from html import unescape
from bs4 import BeautifulSoup
from django.conf import settings
from django.forms.models import model_to_dict
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.contrib.contenttypes.models import ContentType
from django.core.files.base import ContentFile
from django.core.files.storage import default_storage
from django.db import transaction
from django.db.models import Sum
from django.db.models import Max
from django.db.models import Q
from django.http import Http404, HttpResponseBadRequest, HttpResponseServerError, HttpResponseNotFound, FileResponse
from django.http import HttpResponseForbidden
from django.http import HttpResponseRedirect, JsonResponse, HttpResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse
from django.views.decorators.http import require_POST, require_GET
from django.views.decorators.http import require_http_methods
from lzstring import LZString
from .ai_calls import generate_handler, search_images_api, has_min_tokens, add_successful_generation
from django.db.models import Case, When, IntegerField
from .forms import ClassroomForm
from django.utils import timezone
from users.models import UserTariff, TariffType, CustomUser, Notification, UserNotification, Role, UserOnboarding
from .models import Course, Section, Lesson, BaseTask, WordList, Image, MatchUpTheWords, Essay, Note, SortIntoColumns, \
    MakeASentence, Unscramble, FillInTheBlanks, Dialogue, Article, Audio, Test, TrueOrFalse, LabelImages, EmbeddedTask, \
    Classroom, UserAnswer, UserAutogenerationPreferences, Homework, LessonPublicData, MediaFile, \
    UserContextLength, Pdf, CoursePdf, SiteErrorLog, Generation, LessonGenerationStatus, PublicLessonsEmails
from users.models import TariffStatus, UserTokenBalance, UserMetrics, TelegramAuthToken

from .templatetags.custom_tags import get_user_tariff_discounts, recount_tariff_prices, recount_token_prices
from .utils import markdown_to_html, update_auto_context, enhance_query_with_params, build_base_query

User = get_user_model()
logger = logging.getLogger(__name__)

def robots_txt(request):
    content = """
    User-agent: *
    Disallow: /users/
    Disallow: /hub/dashboard/
    Disallow: /hub/profile/
    Disallow: /hub/api/
    Disallow: /static/
    Disallow: /media/
    Allow: /
    Sitemap: https://linguaglow.ru/sitemap.xml
    """
    return HttpResponse(content, content_type="text/plain")

def sitemap_view(request):
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    lastmod = timezone.now().date()

    # –ù–∞—á–∞–ª–æ XML
    sitemap_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="https://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>https://linguaglow.ru/</loc>
        <lastmod>{lastmod}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>1.0</priority>
    </url>
    <url>
        <loc>https://linguaglow.ru/users/registration</loc>
        <lastmod>{lastmod}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>https://linguaglow.ru/users/login</loc>
        <lastmod>{lastmod}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.5</priority>
    </url>
"""

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —É—Ä–æ–∫–∏
    public_lessons = Lesson.objects.filter(is_public=True).select_related('public_data')
    for l in public_lessons:
        lesson_lastmod = l.updated_at.date()
        sitemap_xml += f"""
    <url>
        <loc>https://linguaglow.ru/public/{l.id}/</loc>
        <lastmod>{lesson_lastmod}</lastmod>
        <changefreq>daily</changefreq>
        <priority>0.7</priority>
    </url>"""

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º XML
    sitemap_xml += "\n</urlset>"

    return HttpResponse(sitemap_xml, content_type="application/xml")

def landing(request):
    if request.user.is_authenticated:
        return redirect('home')

    return render(request, 'home/landing.html')

@login_required
def home_view(request):
    # üö¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    try:
        ob, _ = UserOnboarding.objects.get_or_create(user=request.user)
        if ob.current_step != "done" and getattr(request.user, 'role', '') == "teacher":
            return redirect("onboarding")
    except Exception as e:
        logger.error(f"Onboarding check error: {str(e)}")

    context = {
        'courses': [],
        'classrooms': [],
        'student_homeworks': [],
        'teacher_homeworks': [],
        'tokens': 0,
        'usage': 0,
        'usage_percent': 0,
        'max_usage': 0,
        'tariff_tooltip': "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞",
        'next_reset_date': None,
        'notifications': [],
        'context_length': 2000,
        'role': getattr(request.user, 'role', ''),
        'username': getattr(request.user, 'username', ''),
        'is_tariff_active': False,
        'allow_emails': getattr(request.user, 'allow_emails', False),
        'email': getattr(request.user, 'email', ''),
        'user': request.user if request.user.is_authenticated else None,
        'is_new': False,
        'mode': 'home',
    }

    try:
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            context['tokens'] = request.user.token_balance.tokens
        except Exception as e:
            logger.error(f"Token error: {str(e)}")

        # –ö—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            context['courses'] = Course.objects.filter(user=request.user)
        except Exception as e:
            logger.error(f"Courses error: {str(e)}")

        # –ö–ª–∞—Å—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            context['classrooms'] = Classroom.objects.filter(
                Q(teachers=request.user) | Q(students=request.user)
            ).distinct()
        except Exception as e:
            logger.error(f"Classrooms error: {str(e)}")

        # –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        try:
            student_status_order = Case(
                When(status='resent', then=Value(0)),
                When(status='sent', then=Value(1)),
                When(status='completed', then=Value(2)),
                When(status='checked', then=Value(3)),
                default=Value(4),
                output_field=IntegerField()
            )
            context['student_homeworks'] = Homework.objects.filter(
                student=request.user
            ).select_related('classroom', 'lesson').prefetch_related('tasks').annotate(
                status_order=student_status_order
            ).order_by('status_order', 'classroom__name')
        except Exception as e:
            logger.error(f"Student homeworks error: {str(e)}")

        # –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        try:
            if context['role'] == 'teacher':
                status_order = Case(
                    When(status='completed', then=Value(0)),
                    When(status='resent', then=Value(1)),
                    When(status='sent', then=Value(2)),
                    When(status='checked', then=Value(3)),
                    default=Value(4),
                    output_field=IntegerField()
                )
                context['teacher_homeworks'] = Homework.objects.filter(
                    classroom__teachers=request.user
                ).select_related('classroom', 'student', 'lesson').prefetch_related('tasks').annotate(
                    status_order=status_order
                ).order_by('status_order', 'classroom__name', 'student__username')
        except Exception as e:
            logger.error(f"Teacher homeworks error: {str(e)}")

        # –î–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞
        try:
            if context['role'] == 'teacher':
                check_user_pending_payments(request.user)
                tariff = getattr(request.user, 'tariff', None)
                if tariff:
                    context['is_tariff_active'] = tariff.is_active
                    context['tariff'] = tariff

                    if tariff.end_date is None:
                        context['tariff_tooltip'] = "–ù–∞–≤—Å–µ–≥–¥–∞"
                    else:
                        end_date_text = tariff.end_date.strftime('%d.%m.%Y')
                        context[
                            'tariff_tooltip'] = f"–ê–∫—Ç–∏–≤–µ–Ω –¥–æ {end_date_text}" if tariff.end_date.date() >= date.today() else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

                    context['next_reset_date'] = tariff.get_next_reset_date_display()

                    cfg = settings.TARIFFS.get(tariff.tariff_type, {})
                    gb = cfg.get('memory_gb', 0)
                    context['max_usage'] = gb
                    try:
                        context['usage'] = round(request.user.used_storage / 1024 ** 3, 2)
                        context['usage_percent'] = int((context['usage'] / gb) * 100) if gb else 0
                    except ZeroDivisionError:
                        context['usage_percent'] = 0
        except Exception as e:
            logger.error(f"Tariff error: {str(e)}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            notifications = Notification.objects.filter(
                is_active=True,
                target_roles__contains=[context['role']]
            )
            hidden_ids = UserNotification.objects.filter(
                user=request.user,
                is_hidden=True
            ).values_list('notification_id', flat=True)
            context['notifications'] = notifications.exclude(id__in=hidden_ids)
        except Exception as e:
            logger.error(f"Notifications error: {str(e)}")

        # –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        try:
            context['context_length'] = request.user.context_length.context_length
        except Exception as e:
            logger.error(f"Context length error: {str(e)}")

        try:
            metrics, _ = UserMetrics.objects.get_or_create(user=request.user)
            metrics.update_activity()
            context['retention'] = metrics.retention_status()
        except Exception as e:
            logger.error(f"User metrics error: {str(e)}")
            context['retention'] = {"D1": False, "D3": False, "D7": False}

        try:
            context['is_new'] = request.user.is_new
        except AttributeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ is_new: {str(e)}")
            context['is_new'] = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ is_new: {str(e)}")
            context['is_new'] = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–µ

    except Exception as e:
        logger.critical(f"Critical error: {str(e)}")
        if request.user.is_authenticated:
            add_successful_generation("functions", False,
                                      f"{str(e)} USER: {request.user.username} ID: {request.user.id}")

    return render(request, 'home/home.html', context)

@login_required
@require_POST
def save_context_length(request):
    try:
        data = json.loads(request.body)
        value = int(data.get('context_length'))
    except (json.JSONDecodeError, TypeError, ValueError):
        return HttpResponseBadRequest("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    obj, _ = UserContextLength.objects.update_or_create(
        user=request.user,
        defaults={'context_length': value}
    )
    return JsonResponse({'status': 'ok', 'context_length': obj.context_length})

@login_required
@require_POST
def update_subscription(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        subscribe = request.POST.get('subscribe', False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = request.user
        user.allow_emails = subscribe in ['true', 'True', '1', True]
        user.save()

        return JsonResponse({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        }, status=200)

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=400)

def shop_view(request):
    return render(request, 'home/shop.html')

@ratelimit(key='ip', rate='10/h', block=True)
def create_course(request):
    print("‚û°Ô∏è create_course called, method:", request.method)

    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description')
        student_level = request.POST.get('student_level')
        print(f"üì• POST data: name={name}, description={description}, student_level={student_level}")

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
        user_role = getattr(request.user, "role", None)
        print(f"üë§ user={request.user} role={user_role} is_staff={request.user.is_staff}")

        if user_role != "teacher":
            print("‚ùå Access denied: not a teacher")
            return JsonResponse({'error': 'You are not a teacher'}, status=403)

        try:
            with transaction.atomic():
                print("üî® Creating course...")
                new_course = Course.objects.create(
                    name=name,
                    description=description,
                    student_level=student_level,
                    user=request.user
                )
                print(f"‚úÖ Course created: {new_course} (id={new_course.id})")

                print("‚öôÔ∏è Creating default autogeneration prefs...")
                create_default_autogeneration_prefs(new_course)
                print("‚úÖ Prefs created")

                print("üìö Creating Lesson 1...")
                first_lesson = Lesson.objects.create(
                    course=new_course,
                    name="Lesson 1",
                    is_public=False,
                    context={}
                )
                print(f"‚úÖ Lesson created: {first_lesson} (id={first_lesson.id})")

                print("üìÇ Creating Section...")
                section = Section.objects.create(
                    lesson=first_lesson,
                    name="Let's begin! üòâ",
                    type='learning'
                )
                print(f"‚úÖ Section created: {section} (id={section.id})")

            print("üîÄ Redirecting to lesson_list...")
            return redirect('lesson_list', course_id=new_course.id)

        except Exception as e:
            import traceback
            print("üí• Exception occurred in create_course!")
            print(traceback.format_exc())
            return JsonResponse({'error': str(e)}, status=500)

    print("‚Ü©Ô∏è Not POST, redirecting to home")
    return redirect('home')

def create_default_autogeneration_prefs(course):
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ UserAutogenerationPreferences –¥–ª—è –∫—É—Ä—Å–∞.
    –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞, –∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏.
    """
    return UserAutogenerationPreferences.objects.create(
        course=course,
        task_types_lexical=[
            {"WordList": {"user_query": "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 15 —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."}},
            {"MatchUpTheWords": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 10 –ø–∞—Ä —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ."}},
            {"Unscramble": {"user_query": "–í—ã–±–µ—Ä–∏—Ç–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –¥–∞–π—Ç–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏—è."}},
            {"MakeASentence": {"user_query": "–ù–∞–ø–∏—à–∏—Ç–µ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ 5-7 —Å–ª–æ–≤ –∫–∞–∂–¥–æ–µ)."}},
            {"LabelImages": {"user_query": "–ü–æ–¥–±–µ—Ä–∏—Ç–µ 6 —Å–ª–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."}},
            {"FillInTheBlanks": {
                "user_query": "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å 7 –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."}},
        ],
        task_types_listening=[
            {"Audio": {
                "user_query": "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–Ω–æ–ª–æ–≥-—Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥–∫–∞—Å—Ç–∞ (150 —Å–ª–æ–≤) –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"TrueOrFalse": {
                "user_query": "–°–æ–∑–¥–∞–π—Ç–µ 5 —Å–ª–æ–∂–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç–∏–ø–∞ '–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ' –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è."}},
        ],
        task_types_reading=[
            {"Article": {"user_query": "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è (200+ —Å–ª–æ–≤) –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"Test": {"user_query": "–°–æ—Å—Ç–∞–≤—å—Ç–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ."}},
        ],
        task_types_grammar=[
            {"Note": {
                "user_query": "–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–ª—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏)."}},
            {"TrueOrFalse": {
                "user_query": "–°–æ–∑–¥–∞–π—Ç–µ 4 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ' –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞."}},
            {"Test": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 10 —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"FillInTheBlanks": {
                "user_query": "–ù–∞–ø–∏—à–∏—Ç–µ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –æ–¥–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º –≤ –∫–∞–∂–¥–æ–º; —É–∫–∞–∂–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."}},
        ],
        task_types_speaking=[
            {"Note": {
                "user_query": "–°–æ–∑–¥–∞–π—Ç–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤-–ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"Note": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 3 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–Ω–æ–ª–æ–≥–∞ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
        ],
        task_types_other=[
            {"WordList": {"user_query": "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ –∏–∑ —É—Ä–æ–∫–∞."}},
            {"MatchUpTheWords": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 7 –ø–∞—Ä —Å–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."}},
            {"FillInTheBlanks": {"user_query": "–ù–∞–ø–∏—à–∏—Ç–µ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ª–µ–∫—Å–∏–∫–∏."}},
            {"Note": {"user_query": "–ö—Ä–∞—Ç–∫–æ —Å—É–º–º–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–º—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."}},
            {"Test": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 6 —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"Note": {"user_query": "–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ —É—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏."}},
        ],
    )

def delete_course(request, course_id):
    course_to_delete = get_object_or_404(Course, id=course_id)

    if request.method == "POST" and course_to_delete.user == request.user:
        with transaction.atomic():
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ delete_task_handler
            for lesson in course_to_delete.lessons.all():
                for section in lesson.sections.all():
                    tasks = BaseTask.objects.filter(section=section)
                    for task in tasks:
                        delete_task_handler(request.user, task)
                    section.delete()  # —É–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–∏–π
                lesson.delete()  # —É–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–π

            # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫—É—Ä—Å
            course_to_delete.delete()

    return redirect('home')

def lesson_list_view(request, course_id):
    try:
        selected_course = get_object_or_404(Course, id=course_id)
        if not (request.user == selected_course.user):
            return HttpResponseForbidden("You do not have access to this lesson.")

        lessons = Lesson.objects.filter(course=selected_course)
        pdfs = CoursePdf.objects.filter(course=selected_course).order_by('-uploaded_at')

        # –ü–µ—Ä–µ–¥–∞—ë–º —É—Ä–æ–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
        return render(request, 'home/lesson_list.html', {
        'lessons': lessons,
        'user': request.user,
        'pdfs': pdfs,
        'course': selected_course,
        'is_staff': request.user.is_staff,
    })
    except Exception as e:
        print(e)

@ratelimit(key='ip', rate='10/m', block=True)
def update_lesson_name(request, lesson_id):
    if request.method == "POST":
        data = json.loads(request.body)
        name = data.get("name", "").strip()
        if name:
            lesson_obj = Lesson.objects.get(id=lesson_id)

            if lesson_obj.course.user != request.user:
                return HttpResponseForbidden("You do not have access to this lesson.")

            lesson_obj.name = name
            lesson_obj.save()
            return JsonResponse({"name": lesson_obj.name})
    return JsonResponse({"error": "Invalid request"}, status=400)

def clone_content_object(obj):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–æ–Ω –æ–±—ä–µ–∫—Ç–∞ content_object —Å –Ω–æ–≤—ã–º ID.
    """
    obj.pk = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID
    obj.save()
    return obj

def clone_section(old_section, new_section, user):
    """
    –ö–ª–æ–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –º–µ–¥–∏–∞ –∏–∑ old_section –≤ new_section.
    user ‚Äî —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä–æ–π —Å–µ–∫—Ü–∏–∏
    old_tasks = BaseTask.objects.filter(section=old_section).prefetch_related('media', 'content_type')

    for t in old_tasks:
        original_content = t.content_object
        if not original_content:
            continue

        # –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        cloned_content = clone_content_object(original_content)
        content_type = ContentType.objects.get_for_model(cloned_content)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        new_task = BaseTask.objects.create(
            section=new_section,
            order=t.order,
            content_type=content_type,
            object_id=cloned_content.id,
            size=t.size
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.update_used_storage(t.size)

def add_lesson(request, course_id):
    try:
        selected_course = get_object_or_404(Course, id=course_id)

        if request.method == 'POST':
            name = request.POST.get('name')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
            is_admin = request.user.is_staff

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
            public_data = {}
            try:
                if is_admin:
                    public_data = {
                        'lexical_topics': request.POST.get('lexical_topics'),
                        'grammar_topics': request.POST.get('grammar_topics'),
                        'extra_topics': request.POST.get('extra_topics'),
                        'meta_description': request.POST.get('meta_description'),
                        'keywords': request.POST.get('keywords'),
                        'icon': request.POST.get('icon'),
                        'level': request.POST.get('level', 'A1'),
                        'is_public': 'is_public' in request.POST
                    }
                else:
                    public_data = {
                        'is_public': False
                    }

                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞
                previous_lesson = selected_course.lessons.order_by('-created_at').first()
                context = previous_lesson.context if previous_lesson else {}

                with transaction.atomic():
                    # –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
                    lesson_obj = Lesson.objects.create(
                        course=selected_course,
                        name=name,
                        is_public=public_data['is_public'],
                        context=context
                    )

                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∞–¥–º–∏–Ω
                    if is_admin:
                        LessonPublicData.objects.create(
                            lesson=lesson_obj,
                            lexical_topics=public_data.get('lexical_topics'),
                            grammar_topics=public_data.get('grammar_topics'),
                            extra_topics=public_data.get('extra_topics'),
                            meta_description=public_data.get('meta_description'),
                            keywords=public_data.get('keywords'),
                            icon=public_data.get('icon'),
                            level=public_data.get('level', 'A1'),
                        )

                    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
                    Section.objects.create(
                        lesson=lesson_obj,
                        name="Let's begin! üòâ",
                        type='learning'
                    )

                    # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ revision-—Å–µ–∫—Ü–∏–π
                    if previous_lesson:
                        rev_sections = previous_lesson.sections.filter(type='revision')

                        for rev in rev_sections:
                            new_sec = Section.objects.create(
                                lesson=lesson_obj,
                                name=rev.name,
                                type='completion'
                            )
                            clone_section(rev, new_sec, request.user)

                return redirect('lesson_list', course_id=course_id)

            except ValidationError as ve:
                logger.error(f"Validation error: {ve}")
                raise
            except Exception as e:
                logger.error(f"Error during lesson creation: {e}")
                raise

    except Exception as e:
        logger.critical(f"Critical error in add_lesson: {e}")
        return redirect('lesson_list', course_id=course_id)

    return redirect('lesson_list', course_id=course_id)

def update_lesson(request, lesson_id):
    try:
        lesson = get_object_or_404(Lesson, id=lesson_id)

        if request.method == 'POST':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã
            if request.FILES:
                pdf_file = request.FILES.get('pdf_file')
            else:
                pdf_file = None

            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ POST
            name = request.POST.get('name')
            is_admin = request.user.is_staff

            public_data = {}
            if is_admin:
                public_data = {
                    'lexical_topics': request.POST.get('lexical_topics'),
                    'grammar_topics': request.POST.get('grammar_topics'),
                    'extra_topics': request.POST.get('extra_topics'),
                    'meta_description': request.POST.get('meta_description'),
                    'keywords': request.POST.get('keywords'),
                    'icon': request.POST.get('icon'),
                    'level': request.POST.get('level', 'A1'),
                    'is_public': 'is_public' in request.POST
                }
            else:
                public_data = {
                    'is_public': False
                }

            with transaction.atomic():
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —É—Ä–æ–∫
                lesson.name = name
                lesson.is_public = public_data['is_public']
                lesson.save()

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                public_data_obj = lesson.public_data
                public_data_obj.lexical_topics = public_data.get('lexical_topics')
                public_data_obj.grammar_topics = public_data.get('grammar_topics')
                public_data_obj.extra_topics = public_data.get('extra_topics')
                public_data_obj.meta_description = public_data.get('meta_description')
                public_data_obj.keywords = public_data.get('keywords')
                public_data_obj.icon = public_data.get('icon')
                public_data_obj.level = public_data.get('level', 'A1')

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
                if pdf_file:
                    public_data_obj.pdf_file = pdf_file
                else:
                    public_data_obj.pdf_file = None

                public_data_obj.save()

            return JsonResponse({'success': True})

    except ValidationError as ve:
        print("Validation error:", ve)
        logger.error(f"Validation error: {ve}")
        return JsonResponse({'success': False, 'error': str(ve)}, status=400)
    except Exception as e:
        print("[EXCEPTION]: ", e)
        logger.error(f"Error during lesson update: {e}")
        return JsonResponse({'success': False, 'error': 'Internal server error'}, status=500)

    return JsonResponse({'success': False, 'error': 'Invalid request'}, status=400)

@require_POST
def get_course_pdfs(request):
    course_id = request.POST.get('course_id')
    if not course_id:
        return JsonResponse({'error': '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω course_id'}, status=400)

    try:
        course_obj = Course.objects.get(id=course_id, user=request.user)
    except Course.DoesNotExist:
        return JsonResponse({'error': '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤'}, status=403)

    if not request.user == course_obj.user:
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)

    pdfs = CoursePdf.objects.filter(course=course_obj).order_by('-uploaded_at')

    pdf_list = [{
        'id': pdf.id,
        'title': pdf.title,
        'url': pdf.url,
        'uploaded_at': pdf.uploaded_at.strftime('%Y-%m-%d %H:%M:%S')
    } for pdf in pdfs]

    return JsonResponse({'pdfs': pdf_list})

def lesson_page_view(request, lesson_id):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –∫—É—Ä—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        lesson_obj = get_object_or_404(Lesson, id=lesson_id)
        course_obj = get_object_or_404(Course, id=lesson_obj.course.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if request.user != course_obj.user:
            return HttpResponseForbidden("You do not have access to this lesson.")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–π
        sections = get_sorted_sections(lesson_obj)
        section_ids = [section.id for section in sections]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
        section_ordering = Case(
            *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
            output_field=IntegerField()
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        tasks = (
            BaseTask.objects.filter(section__in=section_ids)
            .select_related('content_type')
            .annotate(section_order=section_ordering)
            .order_by('section_order', 'order')
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        classrooms = Classroom.objects.filter(
            Q(teachers=request.user) | Q(students=request.user)
        ).distinct()

        # –†–∞–±–æ—Ç–∞ —Å —Ñ–ª–∞–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª–∞–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
            is_new = request.user.is_new
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–ª–∞–≥–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            is_new = False

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
        return render(request, 'builder/updated_templates/generation.html', {
            'course_id': course_obj.id,
            'lesson': lesson_obj,
            'section_list': sections,
            'tasks': tasks,
            'classrooms': classrooms,
            'user_role': 'teacher',
            'user_id': request.user.id,
            'mode': 'generation',
            'tokens': getattr(request.user.token_balance, 'tokens', 0),
            'is_new': is_new,
        })

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ lesson_page_view (lesson_id=%s)", lesson_id)
        return HttpResponseServerError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@require_POST
def reorder_sections(request, lesson_id):
    try:
        data = json.loads(request.body)
        section_ids = data.get("order", [])  # —Å–ø–∏—Å–æ–∫ id –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ

        first_section = Section.objects.get(id=section_ids[0])
        if request.user != first_section.lesson.course.user:
            return JsonResponse(
                {"status": "error", "message": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–µ–∫—Ü–∏–π"},
                status=403
            )

        for index, section_id in enumerate(section_ids):
            Section.objects.filter(id=section_id, lesson_id=lesson_id).update(order=index)

        return JsonResponse({"status": "ok"})
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=400)

def delete_lesson(request, lesson_id):
    lesson_to_delete = get_object_or_404(Lesson, id=lesson_id)

    if request.user != lesson_to_delete.course.user:
        return HttpResponseForbidden("You do not have access to this lesson.")

    for section in lesson_to_delete.sections.all():
        tasks = BaseTask.objects.filter(section=section)
        for task in tasks:
            delete_task_handler(request.user, task)
        section.delete()

    course_id = lesson_to_delete.course.id

    if request.method == "POST":
        lesson_to_delete.delete()

    return HttpResponseRedirect(reverse('lesson_list', args=[course_id]))

def add_section(request, lesson_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            section_name = data.get('name')
            section_type = data.get('type', 'learning')  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'learning'

            if not section_name:
                return JsonResponse({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)

            lesson_obj = get_object_or_404(Lesson, id=lesson_id)

            if lesson_obj.course.user != request.user:
                return JsonResponse({'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–¥–µ–ª—ã –≤ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.'}, status=403)

            # –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–¥–µ–ª, —É—á–∏—Ç—ã–≤–∞—è —Ç–∏–ø
            section_obj = Section.objects.create(
                lesson=lesson_obj,
                name=section_name,
                type=section_type  # –µ—Å–ª–∏ –ø–æ–ª–µ type –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏
            )
            return JsonResponse({
                'success': True,
                'section_id': section_obj.id,
                'name': section_obj.name,
                'type': section_obj.type
            })
        except Exception as e:
            print(e)
            return JsonResponse({'error': str(e)}, status=500)
    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}, status=405)

def update_section(request, section_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            new_name = data.get('name')
            new_type = data.get('type')

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not new_name:
                return JsonResponse(
                    {'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'},
                    status=400
                )

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞
            valid_types = ['learning', 'hometask', 'revision']
            if new_type and new_type not in valid_types:
                return JsonResponse(
                    {'error': f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞: {new_type}."},
                    status=400
                )

            section_obj = get_object_or_404(Section, id=section_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if section_obj.lesson.course.user != request.user:
                return JsonResponse(
                    {'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.'},
                    status=403
                )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            section_obj.name = new_name
            if new_type:
                section_obj.type = new_type
            section_obj.save()

            return JsonResponse({
                'success': True,
                'new_name': new_name,
                'new_type': section_obj.type
            })

        except json.JSONDecodeError:
            return JsonResponse(
                {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON.'},
                status=400
            )
        except Exception as e:
            return JsonResponse(
                {'error': str(e)},
                status=500
            )

    return JsonResponse(
        {'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.'},
        status=405
    )

def delete_section_view(request, section_id):
    section_obj = get_object_or_404(Section, id=section_id)

    if request.user != section_obj.lesson.course.user:
        return JsonResponse({'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ä–∞–∑–¥–µ–ª—ã —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.'}, status=403)

    if len(section_obj.lesson.sections.all()) == 1:
        return JsonResponse({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª.'}, status=400)

    if request.method == "POST":
        with transaction.atomic():
            tasks = BaseTask.objects.filter(section=section_obj)
            for task in tasks:
                delete_task_handler(request.user, task)

            section_obj.delete()

        return JsonResponse({'success': True, 'section_id': section_id})

    return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞'}, status=405)

TYPE_ORDER = [
    ("completion", "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ"),
    ("learning",   "–û–±—É—á–∞—é—â–∏–π"),
    ("hometask",   "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"),
    ("revision",   "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"),
]

def get_sorted_sections(lesson_obj):
    grouped = {type_name: [] for type_name, _ in TYPE_ORDER}

    # —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–ª–∏ —Å–µ–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
    for s in lesson_obj.sections.all():
        grouped[s.type].append(s)

    ordered_sections = []
    for type_name, _ in TYPE_ORDER:
        if grouped[type_name]:
            # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã –ø–æ order
            grouped[type_name].sort(key=lambda s: s.order)

            # –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏
            for idx, section in enumerate(grouped[type_name], start=1):
                if section.order != idx:  # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                    section.order = idx
                    section.save(update_fields=["order"])

            ordered_sections.extend(grouped[type_name])

    return ordered_sections

def download_pdf_page_view(request, lesson_id):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –∫—É—Ä—Å–∞
        lesson_obj = get_object_or_404(Lesson, id=lesson_id)
        course_obj = lesson_obj.course

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if request.user != course_obj.user and not lesson_obj.is_public:
            return HttpResponseForbidden("You do not have access to this lesson.")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–π
        sections = get_sorted_sections(lesson_obj)
        section_ids = [section.id for section in sections]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
        section_ordering = Case(
            *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
            output_field=IntegerField()
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        tasks = (
            BaseTask.objects.filter(section__in=section_ids)
            .select_related("content_type")
            .annotate(section_order=section_ordering)
            .order_by("section_order", "order")
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
        show_modal = False
        try:
            onboarding = UserOnboarding.objects.select_related('user').get(user=request.user)
            if onboarding.current_step == "generation_feedback":
                show_modal = True
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                onboarding.current_step = "done"
                give_present(request)
                onboarding.save(update_fields=["current_step"])
        except UserOnboarding.DoesNotExist:
            pass

        return render(
            request,
            "builder/updated_templates/pdf_select.html",
            {
                "lesson": lesson_obj,
                "tasks": tasks,
                "showModalOnLoad": show_modal,
                "is_new": request.user.is_new,
            }
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %s", str(e))
        return HttpResponseServerError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def audio_qr_page(request, audio_url):
    # –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    file_path = os.path.join(settings.MEDIA_ROOT, 'uploads', audio_url)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.isfile(file_path):
        raise Http404("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–ª–Ω—ã–π URL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ <audio>
    audio_full_url = f"{request.scheme}://{request.get_host()}/media/uploads/{audio_url}"

    # –†–µ–Ω–¥–µ—Ä–∏–º HTML —Å –ø–ª–µ–µ—Ä–æ–º
    return render(request, 'builder/updated_templates/audio_player.html', {
        'audio_url': audio_full_url,
    })

ALLOWED_IFRAME_SOURCES = [
    # Wordwall (–æ—Å–Ω–æ–≤–Ω–æ–π –∏ staging, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–¥–æ–≤)
    re.compile(r'^https://(?:www\.)?(?:wordwall\.net|wordwall-live-staging\.azurewebsites\.net)(?:/[a-z]{2})?/embed(?:/|$|\?)'),

    # Miro
    re.compile(r'^https://(?:www\.)?miro\.com/app/(?:live-)?embed(?:/|$|\?)'),

    # Quizlet (–ª—é–±–æ–π —Ç–∏–ø –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –º–æ–¥—É–ª—è)
    re.compile(r'^https://(?:www\.)?quizlet\.com/\d+/[^/]+/embed(?:/|$|\?)'),

    # LearningApps
    re.compile(r'^https://learningapps\.org/(?:embed|watch)(?:/|$|\?).*'),

    # Rutube
    re.compile(r'^https://rutube\.ru/.*/embed(?:/|$|\?)'),

    # YouTube (–æ–±—ã—á–Ω—ã–π –∏ nocookie)
    re.compile(r'^https://(?:www\.)?youtube(?:-nocookie)?\.com/embed(?:/|$|\?)'),

    # sBoard
    re.compile(r'^https://sboard\.online/boards/[a-f0-9\-]+$'),
]

def is_iframe_code_safe(iframe_code: str) -> bool:
    match = re.search(r'<iframe[^>]+src=["\']([^"\']+)["\']', iframe_code)
    if not match:
        return False
    src = match.group(1)
    return any(pattern.search(src) for pattern in ALLOWED_IFRAME_SOURCES)

def iframe_qr_page(request, compressed_code):
    if not compressed_code:
        raise Http404("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 1. –î–µ–∫–æ–¥–∏—Ä—É–µ–º LZ-String
    try:
        lz = LZString()
        src = lz.decompressFromEncodedURIComponent(compressed_code)
        if not src:
            raise ValueError("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞—Ç—å")
    except Exception as e:
        raise Http404(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏—Ä–æ–≤–∞—Ç—å iframe: {e}")

    # 2. –°–æ–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–≥ <iframe>
    decoded_iframe = f'<iframe src="{src}"></iframe>'

    # 3. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    if not is_iframe_code_safe(decoded_iframe):
        raise Http404("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    # 4. –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return render(request, 'builder/updated_templates/iframe.html', {
        'iframe_code': decoded_iframe,
    })





def getContext(request, lesson_id):
    lesson_obj = get_object_or_404(Lesson, id=lesson_id)

    if request.method == "GET":
        return JsonResponse({'context': lesson_obj.context or ""})

def addContextElement(request, lesson_id):
    if request.method != "POST":
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=405)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson_instance = get_object_or_404(Lesson, id=lesson_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫—É—Ä—Å–∞
    if request.user != lesson_instance.course.user:
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=403)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    try:
        data = json.loads(request.body)
        task_id = data.get("task_id")
        header = data.get("header", "–ó–∞–º–µ—Ç–∫–∞")
        content = data.get("content", "–ö–æ–Ω—Ç–µ–Ω—Ç")
    except json.JSONDecodeError:
        return JsonResponse({"error": "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ."}, status=400)

    if not content:
        return JsonResponse({"error": "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=400)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = lesson_instance.context or {}

    # –ï—Å–ª–∏ task_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    if not task_id:
        task_id = f"text_{uuid.uuid4().hex[:8]}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π task_id
    if task_id in context:
        return JsonResponse({"error": "–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç."}, status=400)


    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    context[task_id] = {"header": header, "content": content}
    lesson_instance.context = context
    lesson_instance.save()

    return JsonResponse({"message": "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "task_id": task_id, "header": header, "content": content}, status=201)

def removeTaskFromContext(request, lesson_id, task_id):
    if request.method != "DELETE":
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=405)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson_instance = get_object_or_404(Lesson, id=lesson_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø
    if request.user != lesson_instance.course.user:
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=403)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
    context = lesson_instance.context or {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π task_id
    if task_id not in context:
        return JsonResponse({"error": "–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç."}, status=404)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    del context[task_id]
    lesson_instance.context = context
    lesson_instance.save()

    return JsonResponse({"message": "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", "task_id": task_id}, status=200)





        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π





def get_section_tasks(request, section_id):
    try:
        section_instance = get_object_or_404(Section, id=section_id)
        tasks = BaseTask.objects.filter(section=section_instance)
        data = {}
        for task in tasks:
            data[task.content_type.model] = task.id
        return JsonResponse(data)
    except Exception as e:
        print(e)
        return JsonResponse({"error": str(e)}, status=500)

@ratelimit(key='ip', rate='800/m', block=True)
def get_task_data(request, task_id):
    try:
        task_instance = get_object_or_404(BaseTask, id=task_id)
        content_type = task_instance.content_type
        content_object = task_instance.content_object
        model_cls = content_type.model_class()

        data = {"id": task_id, "taskType": content_type.model}

        # --- –ü—Ä—è–º—ã–µ —Ç–∏–ø—ã ---
        if model_cls == WordList:
            data.update({
                "title": clear_text(content_object.title),
                "words": content_object.words,
            })

        elif model_cls == MatchUpTheWords:
            data.update({
                "title": clear_text(content_object.title),
                "pairs": content_object.pairs,
            })

        elif model_cls == Essay:
            data.update({
                "title": clear_text(content_object.title),
                "conditions": content_object.conditions,
            })

        elif model_cls == Note:
            data.update({
                "title": clear_text(content_object.title),
                "content": clear_text(content_object.content),
            })

        elif model_cls == Image:
            data.update({
                "title": clear_text(content_object.title),
                "image_url": content_object.image_url,
            })

        elif model_cls == Dialogue:
            data.update({
                "title": clear_text(content_object.title),
                "lines": content_object.lines,
            })

        elif model_cls == Article:
            data.update({
                "title": clear_text(content_object.title),
                "content": clear_text(content_object.content),
            })

        elif model_cls == EmbeddedTask:
            embed_code = content_object.embed_code if is_iframe_code_safe(content_object.embed_code) else ""
            data.update({
                "title": clear_text(content_object.title),
                "embed_code": embed_code,
            })

        elif model_cls == Pdf:
            data.update({
                "title": clear_text(content_object.title),
                "pdf_url": content_object.pdf_url,
            })

        # --- –¢–∏–ø—ã —Å —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ user ---
        elif model_cls in [SortIntoColumns, MakeASentence, Unscramble, FillInTheBlanks,
                           Test, TrueOrFalse, LabelImages, Audio]:

            is_owner = (request.user == task_instance.section.lesson.course.user)

            if model_cls == SortIntoColumns:
                columns = content_object.columns
                labels = []

                if not is_owner:
                    # —Å–∫—Ä—ã—Ç—å —Å–ª–æ–≤–∞
                    for column in columns:
                        for i, word in enumerate(column['words']):
                            column['words'][i] = '/'
                            labels.append(word)
                else:
                    for column in columns:
                        labels.extend(column['words'])

                random.shuffle(labels)
                data.update({
                    "title": clear_text(content_object.title),
                    "columns": columns,
                    "labels": labels,
                })

            elif model_cls == MakeASentence:
                sentences = content_object.sentences

                if not is_owner:
                    for s in sentences:
                        s['correct'] = '/ ' * (len(s['correct'].split()) - 1)

                data.update({
                    "title": clear_text(content_object.title),
                    "sentences": sentences,
                })

            elif model_cls == Unscramble:
                words = content_object.words

                if not is_owner:
                    for w in words:
                        w['word'] = '/' * len(w['word'])

                data.update({
                    "title": clear_text(content_object.title),
                    "words": words,
                })

            elif model_cls == FillInTheBlanks:
                text = content_object.text
                labels = re.findall(r'\[(.*?)\]', text)

                if not is_owner:
                    text = re.sub(r'\[(.*?)\]', lambda m: '[/]', text)
                    if content_object.display_format != "withList":
                        labels = []
                    else:
                        random.shuffle(labels)
                else:
                    random.shuffle(labels)

                data.update({
                    "title": clear_text(content_object.title),
                    "text": clear_text(text),
                    "display_format": content_object.display_format,
                    "labels": labels,
                })

            elif model_cls == Test:
                questions = content_object.questions
                if not is_owner:
                    for q in questions:
                        for ans in q["answers"]:
                            ans["is_correct"] = False

                data.update({
                    "title": clear_text(content_object.title),
                    "questions": questions,
                })

            elif model_cls == TrueOrFalse:
                statements = content_object.statements
                if not is_owner:
                    for s in statements:
                        s["is_true"] = False

                data.update({
                    "title": clear_text(content_object.title),
                    "statements": statements,
                })

            elif model_cls == LabelImages:
                images = content_object.images
                labels = [img['label'] for img in images]

                if not is_owner:
                    for img in images:
                        img['label'] = '/'

                random.shuffle(labels)
                data.update({
                    "title": clear_text(content_object.title),
                    "images": images,
                    "labels": labels,
                })

            elif model_cls == Audio:
                transcript = content_object.transcript if is_owner else ""
                data.update({
                    "title": clear_text(content_object.title),
                    "audio_url": content_object.audio_url,
                    "transcript": clear_text(transcript),
                })

        else:
            return JsonResponse({"error": "Unknown task type"}, status=400)

        return JsonResponse(data)

    except Exception as e:
        print(e)
        return JsonResponse({"error": str(e)}, status=500)

def clear_text(text: str) -> str:
    """
    –ß–∏—Å—Ç–∏—Ç HTML –æ—Ç XSS —Å –ø–æ–º–æ—â—å—é bleach –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Markdown.
    –†–∞–∑—Ä–µ—à–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏, –∫–ª–∞—Å—Å—ã –∏ —Å—Ç–∏–ª–∏.
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–µ—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ <a>.
    """
    allowed_tags = [
        "b", "i", "u", "em", "strong", "p", "br",
        "ul", "ol", "li", "span", "div",
        "h1", "h2", "h3", "h4", "h5", "h6"
    ]

    allowed_attributes = {
        "*": ["class", "style"],  # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –∏ inline-—Å—Ç–∏–ª–∏
    }

    # –æ—á–∏—â–∞–µ–º HTML
    cleaned_html = bleach.clean(
        text,
        tags=allowed_tags,
        attributes=allowed_attributes,
        protocols=[],   # –∑–∞–ø—Ä–µ—Ç –ª—é–±—ã—Ö —Å—Å—ã–ª–æ—á–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        strip=True
    )

    return cleaned_html

def normalize_payloads(payloads):
    if isinstance(payloads, dict):
        return payloads
    return model_to_dict(payloads)

def extract_media_ids(task_type, payloads):
    media_ids = []

    def find_media_by_url(url):
        if url and "/media/" in url:
            relative_path = url.split("/media/")[-1]
            try:
                media = MediaFile.objects.get(file=relative_path)
                return str(media.id)
            except MediaFile.DoesNotExist:
                print(f"[WARN] MediaFile –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {relative_path}")
        return None

    payloads = normalize_payloads(payloads)

    if task_type == 'Image':
        url = payloads.get('image_url')
        media_id = find_media_by_url(url)
        if media_id:
            media_ids.append(media_id)

    elif task_type == 'Audio':
        url = payloads.get('audio_url')
        media_id = find_media_by_url(url)
        if media_id:
            media_ids.append(media_id)

    elif task_type == 'LabelImages':
        for item in payloads.get('images', []):
            url = item.get('media_url') or item.get('url')
            media_id = find_media_by_url(url)
            if media_id:
                media_ids.append(media_id)

    elif task_type == 'Pdf':
        url = payloads.get('pdf_url')
        media_id = find_media_by_url(url)
        if media_id:
            media_ids.append(media_id)

    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–µ media_ids: {media_ids}")
    return media_ids

def get_storage_limit(user: CustomUser) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–π—Ç–∞—Ö.
    –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.
    """
    if not hasattr(user, 'tariff') or not user.tariff.is_active():
        return 0

    tariff_code = user.tariff.tariff_type
    tariff_data = settings.TARIFFS.get(tariff_code)
    if not tariff_data:
        return 0

    gb = tariff_data.get('memory_gb', 0)
    return int(gb * 1024**3)  # –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–π—Ç—ã

@transaction.atomic
@require_POST
@ratelimit(key='ip', rate='15/m', block=True)
def taskSave(request, section_id):
    section_instance = get_object_or_404(Section, id=section_id)

    if request.user != section_instance.lesson.course.user:
        return JsonResponse({'success': False, 'error': '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.'}, status=403)

    try:
        data = json.loads(request.body)
        obj_id    = data.get('obj_id')
        task_type = data.get('task_type')
        payloads  = data.get('payloads', {}) or {}

        title = payloads.get("title")
        if title:
            payloads["title"] = title[:200].strip()

        def looks_like_base64(s: str) -> bool:
            if not isinstance(s, str):
                return False
            if 'base64,' in s or s.startswith('data:'):
                return True
            s_clean = ''.join(s.split())
            return bool(re.fullmatch(r'[A-Za-z0-9+/=\s]+', s)) and len(s_clean) > 32

        embed_map = {'Image': 'image_url', 'Audio': 'audio_url', 'Pdf': 'pdf_url'}
        model_class = globals().get(task_type)
        if not model_class:
            return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è'}, status=400)

        media_to_attach = []

        if task_type in embed_map:
            target_field = embed_map[task_type]

            found_b64, found_key = None, None
            for key, val in payloads.items():
                if isinstance(val, str) and looks_like_base64(val):
                    found_b64, found_key = val, key
                    break

            old_url, task_obj = None, None
            if obj_id:
                task_obj = get_object_or_404(BaseTask, id=obj_id)
                content = task_obj.content_object
                old_url = getattr(content, target_field, None)

            if found_b64:
                if old_url:
                    removeFile(old_url, request.user)
                res = hashMediaFile(found_b64, request.user)
                if not res or not res.get('url'):
                    return JsonResponse({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å base64'}, status=400)
                payloads[target_field] = res['url']
                if res.get('media_id'):
                    media_to_attach.append(str(res['media_id']))
                if found_key != target_field:
                    payloads.pop(found_key, None)
            else:
                provided_url = payloads.get(target_field)
                if provided_url:
                    found_media = MediaFile.objects.filter(user=request.user, file=provided_url).first()
                    if not found_media:
                        filename = urlparse(provided_url).path.split('/')[-1] if urlparse(provided_url).path else ''
                        candidates = MediaFile.objects.filter(user=request.user, file__endswith=filename)
                        for m in candidates:
                            if getattr(m.file, 'url', None) == provided_url or \
                               (m.file and m.file.name.endswith(filename)):
                                found_media = m
                                break
                    if not found_media:
                        return JsonResponse({'success': False,
                                             'error': f'URL –¥–ª—è {target_field} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'}, status=400)
                    media_to_attach.append(str(found_media.id))
                    payloads[target_field] = provided_url
                else:
                    if not obj_id:
                        return JsonResponse({'success': False, 'error': f'{target_field} –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}, status=400)
                    if obj_id and not old_url:
                        return JsonResponse({'success': False, 'error': f'–ù–µ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è {target_field}'}, status=400)
                    payloads[target_field] = old_url
                    if task_obj:
                        old_media_qs = task_obj.media.all()
                        media_to_attach.extend([str(m.id) for m in old_media_qs])

        # --- storage calc ---
        json_size = len(json.dumps(payloads, ensure_ascii=False).encode('utf-8'))
        storage_limit = get_storage_limit(request.user)

        # --- UPDATE ---
        if obj_id:
            task_obj = get_object_or_404(BaseTask, id=obj_id)
            content = task_obj.content_object

            if request.user.used_storage - task_obj.size + json_size > storage_limit:
                return JsonResponse({'success': False, 'error': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç'}, status=403)

            for k, v in payloads.items():
                setattr(content, k, v)
            content.save()

            task_obj.size = json_size
            task_obj.save()

            if media_to_attach:
                task_obj.media.set(MediaFile.objects.filter(id__in=media_to_attach))
            else:
                task_obj.media.clear()

            request.user.update_used_storage(-task_obj.size + json_size)

        # --- CREATE ---
        else:
            last_order = BaseTask.objects.filter(section=section_instance).aggregate(
                max_order=Max('order')
            )['max_order'] or 0

            if task_type in embed_map and not payloads.get(embed_map[task_type]):
                return JsonResponse({'success': False, 'error': f'{embed_map[task_type]} –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}, status=400)

            content = model_class.objects.create(**payloads)

            task_obj = BaseTask.objects.create(
                section=section_instance,
                content_object=content,
                content_type=ContentType.objects.get_for_model(model_class),
                order=last_order + 1,
                size=json_size,
            )

            if media_to_attach:
                task_obj.media.set(MediaFile.objects.filter(id__in=media_to_attach))

            request.user.update_used_storage(json_size)

            # --- Create CoursePdf if PDF task ---
            if task_type == "Pdf":
                try:
                    pdf_url = payloads.get("pdf_url")
                    media_obj = None
                    if pdf_url:
                        filename = os.path.basename(pdf_url)
                        candidates = MediaFile.objects.filter(user=request.user, file__endswith=filename)
                        for m in candidates:
                            if m.file and m.file.name.endswith(filename):
                                media_obj = m
                                break

                    print(f"[taskSave] –ù–∞–π–¥–µ–Ω–Ω—ã–π media_obj –¥–ª—è PDF: {media_obj}")

                    if media_obj:
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –∏ media
                        exists = CoursePdf.objects.filter(course=section_instance.lesson.course,
                                                          media=media_obj).exists()
                        if exists:
                            print("[taskSave] CoursePdf –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                        else:
                            course_pdf = CoursePdf.objects.create(
                                course=section_instance.lesson.course,
                                media=media_obj,
                                title=payloads.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                                url=pdf_url
                            )
                            print(
                                f"[taskSave] CoursePdf —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: id={course_pdf.id}, title={course_pdf.title}, url={course_pdf.url}")
                    else:
                        print("[taskSave] MediaFile –¥–ª—è PDF –Ω–µ –Ω–∞–π–¥–µ–Ω, CoursePdf –Ω–µ —Å–æ–∑–¥–∞–Ω")

                except Exception as e:
                    import traceback
                    print(f"[taskSave] Exception while creating CoursePdf: {e}")
                    traceback.print_exc()

        return JsonResponse({'success': True, 'task_id': str(task_obj.id), 'section_id': str(section_id)})

    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON'}, status=400)
    except Exception:
        import traceback
        traceback.print_exc()
        return JsonResponse({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'}, status=500)





"""
ALLOWED_IMAGE_TYPES = ["image/jpeg", "image/png", "image/gif"]
MAX_UPLOAD_SIZE_IMAGES = 5*1024**2
ALLOWED_AUDIO_TYPES = ['audio/mpeg', 'audio/mp3', 'audio/wav']
MAX_UPLOAD_SIZE_AUDIO = 50*1024**2
ALLOWED_PDF_TYPES = ['application/pdf']
MAX_UPLOAD_SIZE_PDF = 80 * 1024 ** 2  # 100 MB

def add_or_increment_media(user: CustomUser, uploaded_file) -> MediaFile:
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if isinstance(uploaded_file, str) and (uploaded_file.startswith('http://') or uploaded_file.startswith('https://')):
        return MediaFile.objects.create(
            file='',  # –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            size=0,
            hash='',
            usage=1
        )

    # 1. –•—ç—à–∏—Ä—É–µ–º –ø–æ —á–∞–Ω–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä
    hasher = hashlib.sha256()
    size = 0
    for chunk in uploaded_file.chunks():
        hasher.update(chunk)
        size += len(chunk)
    file_hash = hasher.hexdigest()
    uploaded_file.seek(0)

    # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å
    try:
        media = MediaFile.objects.get(hash=file_hash)
        media.usage += 1
        media.save(update_fields=['usage'])
        print("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π media", media.usage)
    except MediaFile.DoesNotExist:
        media = MediaFile.objects.create(
            file=uploaded_file,
            size=size,
            hash=file_hash,
            usage=1
        )

    return media

def decrement_or_delete_media(media: MediaFile, user: CustomUser):
    if media.usage > 1:
        media.usage -= 1
        media.save(update_fields=['usage'])
        print("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π media", media.usage)
    else:
        # –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ‚Äî —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏ –ë–î-–∑–∞–ø–∏—Å—å
        size = media.size
        media.file.delete(save=False)
        media.delete()
        print("–£–¥–∞–ª–∏–ª–∏ media")

def get_or_create_media(user: CustomUser, uploaded_file, subdir: str = None):
    # –ø–µ—Ä–µ–¥–∞—ë–º —Ñ–∞–π–ª –≤ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
    media = add_or_increment_media(user, uploaded_file)
    # —Ñ–∞–π–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è "–Ω–æ–≤—ã–º", –µ—Å–ª–∏ –ø–æ—Å–ª–µ add usage == 1
    created = (media.usage == 1)

    print(f"[TEST] SHA256 —Ö—ç—à —Ñ–∞–π–ª–∞: {media.hash}")
    print(f"[TEST] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {media.size} –±–∞–π—Ç")
    print(f"[TEST] usage –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {media.usage}")

    return media, created

def get_unique_filename(original_name: str) -> str:
    ext = os.path.splitext(original_name)[1]
    unique_name = f"{uuid.uuid4().hex}{ext}"
    return unique_name

@ratelimit(key='ip', rate='10/m', block=True)
def upload_image(request):
    if request.method != 'POST' or 'image' not in request.FILES:
        return JsonResponse({'error': '–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, status=400)

    image = request.FILES['image']
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä
    if isinstance(image, str) or image.name.startswith('http://') or image.name.startswith('https://'):
        return JsonResponse({
            'success': True,
            'url': image.name,
        })

    if image.content_type not in ALLOWED_IMAGE_TYPES:
        return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã: JPG, PNG, GIF'}, status=400)
    if image.size > MAX_UPLOAD_SIZE_IMAGES:
        return JsonResponse({'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî 5‚ÄØMB'}, status=400)

    try:
        # –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ get_or_create_media —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
        media, created = get_or_create_media(request.user, image, subdir='images')
    except ValueError as e:
        return JsonResponse({'error': str(e)}, status=400)

    return JsonResponse({
        'success': True,
        'media_id': media.id,
        'url': media.file.url,
        'message': created and '–ù–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω' or '–§–∞–π–ª —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
    })

@ratelimit(key='ip', rate='10/m', block=True)
def upload_audio(request):
    if request.method != 'POST' or 'audio' not in request.FILES:
        return JsonResponse({'error': '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, status=400)

    audio = request.FILES['audio']
    if audio.content_type not in ALLOWED_AUDIO_TYPES:
        return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã: MP3, WAV'}, status=400)
    if audio.size > MAX_UPLOAD_SIZE_AUDIO:
        return JsonResponse({'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî 50‚ÄØMB'}, status=400)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    unique_name = get_unique_filename(audio.name)
    audio_file = ContentFile(audio.read(), name=unique_name)

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–∂–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        media, created = get_or_create_media(request.user, audio_file, subdir='audio')
    except ValueError as e:
        return JsonResponse({'error': str(e)}, status=400)

    return JsonResponse({
        'success': True,
        'media_id': media.id,
        'url': media.file.url,
        'message': created and '–ù–æ–≤–æ–µ –∞—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' or '–ê—É–¥–∏–æ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
    })

@require_POST
@ratelimit(key='ip', rate='10/m', block=True)
def upload_pdf(request):
    if 'pdf' not in request.FILES:
        return JsonResponse({'error': '–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, status=400)

    course_id = request.POST.get('courseId')
    if not course_id:
        return JsonResponse({'error': '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω courseId'}, status=400)

    try:
        course_obj = Course.objects.get(id=course_id, user=request.user)
    except Course.DoesNotExist:
        return JsonResponse({'error': '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤'}, status=404)

    pdf = request.FILES['pdf']
    original_title = request.POST.get('title', pdf.name)

    if isinstance(pdf, str) or pdf.name.startswith(('http://', 'https://')):
        media = MediaFile.objects.create(file=pdf.name)
        course_pdf = CoursePdf.objects.create(
            course=course_obj,
            media=media,
            title=original_title,
            url=pdf.name
        )
        return JsonResponse({
            'success': True,
            'media_id': media.id,
            'course_pdf_id': course_pdf.id,
            'url': pdf.name,
            'message': '–í–Ω–µ—à–Ω–∏–π PDF –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É'
        })

    if pdf.content_type not in ALLOWED_PDF_TYPES:
        return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ PDF'}, status=400)
    if pdf.size > MAX_UPLOAD_SIZE_PDF:
        return JsonResponse({
            'error': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî {MAX_UPLOAD_SIZE_PDF // (1024**2)}‚ÄØMB'
        }, status=400)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    unique_filename = get_unique_filename(pdf.name)
    pdf.name = unique_filename

    try:
        media, created = get_or_create_media(
            request.user,
            pdf,
            subdir='pdfs'
        )
    except ValueError as e:
        return JsonResponse({'error': str(e)}, status=400)

    course_pdf, pdf_created = CoursePdf.objects.get_or_create(
        course=course_obj,
        media=media,
        defaults={
            'title': original_title,
            'url': media.file.url
        }
    )

    return JsonResponse({
        'success': True,
        'media_id': media.id,
        'course_pdf_id': course_pdf.id,
        'url': media.file.url,
        'message': (
            '–ù–æ–≤—ã–π PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É' if created else
            ('PDF —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, –Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É' if pdf_created else
             'PDF —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É')
        )
    })

def delete_course_pdf(request, course_id, pdf_id):
    course_obj = get_object_or_404(Course, id=course_id)

    if course_obj.user != request.user:
        return HttpResponseForbidden("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç PDF.")

    pdf = get_object_or_404(CoursePdf, id=pdf_id)

    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ media –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É
    if course_obj != pdf.course:
        return HttpResponseForbidden("PDF –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∫—É—Ä—Å—É.")

    pdf.delete()
    return redirect('lesson_list', course_id=course_obj.id)
"""

# –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π
def hashMediaFile(b64: str, user) -> dict | None:
    """
    –ò—â–µ—Ç MediaFile –ø–æ SHA-256 —Ö—ç—à—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ base64/data URI.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {'url': ..., 'size': 0, 'media_id': ...}.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫ user –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    {'url': ..., 'size': real_size, 'media_id': ...}.
    –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    if not b64:
        return None

    # –ü–∞—Ä—Å–∏–º data URI (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –ø–æ–ª—É—á–∞–µ–º mime –∏ base64-—á–∞—Å—Ç—å
    m = re.match(r'\s*data:(?P<mime>[-\w.+/]+)?(?:;charset=[^;]+)?;base64,(?P<data>.+)',
                 b64, flags=re.I | re.S)
    if m:
        mime = m.group('mime') or None
        b64_data = m.group('data')
    else:
        mime = None
        b64_data = ''.join(b64.split())  # —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ –ø—Ä–æ–±–µ–ª—ã

    # decode base64 (–º—è–≥–∫–æ, –¥–æ–±–∞–≤–ª—è—è padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try:
        blob = base64.b64decode(b64_data, validate=True)
    except Exception:
        try:
            padding = '=' * (-len(b64_data) % 4)
            blob = base64.b64decode(b64_data + padding)
        except Exception:
            return None

    # –≤—ã—á–∏—Å–ª—è–µ–º sha256
    sha256 = hashlib.sha256(blob).hexdigest()

    # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º hash ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ—ë url –∏ size=0
    try:
        existing = MediaFile.objects.filter(hash=sha256).first()
    except Exception:
        return None

    if existing:
        try:
            url = existing.file.url if existing.file else None
        except Exception:
            url = None
        return {'url': url, 'size': 0, 'media_id': str(existing.id)}

    # –∏–Ω–∞—á–µ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥–æ–Ω–∫–∏)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ mime
    filename = uuid.uuid4().hex
    ext = None
    if mime:
        try:
            ext = mimetypes.guess_extension(mime)
        except Exception:
            ext = None
    filename = filename + (ext or '.bin')

    content = ContentFile(blob, name=filename)
    real_size = len(blob)

    try:
        with transaction.atomic():
            media = MediaFile(
                file=content,
                size=real_size,
                hash=sha256,
            )

            if hasattr(MediaFile, 'user') or 'user' in [f.name for f in MediaFile._meta.get_fields()]:
                setattr(media, 'user', user)

            user.update_used_storage(real_size)
            print("[USER STORAGE UPDATED]: ", real_size // 8 // 1024)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ‚Äî –≤ save() –º–æ–¥–µ–ª–∏ —Ö—ç—à –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω, —Ç.–∫. –º—ã –µ–≥–æ –≤—ã—Å—Ç–∞–≤–∏–ª–∏
            media.save()
    except IntegrityError:
        # –¥—Ä—É–≥–∞—è –≤–æ—Ä–∫–µ—Ä-–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–æ–∑–¥–∞–ª–∞ —Ç–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞—Ä–∞–ª–ª–µ–ª–∏ ‚Äî –¥–æ—Å—Ç–∞—ë–º –µ—ë
        media = MediaFile.objects.filter(hash=sha256).first()
        if not media:
            return None
    except Exception:
        return None

    try:
        url = media.file.url if media.file else None
    except Exception:
        url = None

    return {'url': url, 'size': media.size, 'media_id': str(media.id)}

def removeFile(media_url: str, user) -> dict:
    """
    –£–¥–∞–ª—è–µ—Ç MediaFile –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ CoursePdf, –µ—Å–ª–∏ —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö ‚Äî –Ω–µ —É–¥–∞–ª—è–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    if not media_url or not isinstance(media_url, str):
        return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π media_url'}

    try:
        parsed = urlparse(media_url)
        filename = os.path.basename(parsed.path) or ''
    except Exception:
        filename = ''

    media = None
    try:
        # –ò—â–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        media_qs = MediaFile.objects.filter(user=user)
        media = media_qs.filter(file=media_url).first()

        if not media and filename:
            candidates = media_qs.filter(file__endswith=filename)
            for m in candidates:
                try:
                    if getattr(m.file, 'url', None) == media_url:
                        media = m
                        break
                    if m.file and m.file.name and m.file.name.endswith(filename):
                        media = m
                        break
                except Exception:
                    continue
    except Exception:
        return {'success': False, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ MediaFile'}

    if not media:
        return {'success': False, 'error': 'MediaFile –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ URL —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}

    # --- —Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ BaseTask, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è media ---
    try:
        task_ids = set()

        # a) —á–µ—Ä–µ–∑ M2M BaseTask.media
        m2m_tasks = BaseTask.objects.filter(
            section__lesson__course__user=user,
            media=media
        ).values_list("id", flat=True)
        task_ids.update(m2m_tasks)

        # b) inline usage (Image/Audio/Pdf)
        def inline_task_ids(model_cls, url_field_name):
            ct = ContentType.objects.get_for_model(model_cls)
            q_exact = Q(**{url_field_name: media_url})
            if filename:
                q_name = Q(**{f"{url_field_name}__endswith": filename})
                model_qs = model_cls.objects.filter(q_exact | q_name)
            else:
                model_qs = model_cls.objects.filter(q_exact)

            if not model_qs.exists():
                return []

            ids = list(model_qs.values_list('id', flat=True))
            return BaseTask.objects.filter(
                section__lesson__course__user=user,
                content_type=ct,
                object_id__in=ids
            ).values_list("id", flat=True)

        for model_cls, field in [(Image, "image_url"), (Audio, "audio_url"), (Pdf, "pdf_url")]:
            task_ids.update(inline_task_ids(model_cls, field))

        total_count = len(task_ids)
        print(f"[removeFile] –ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –≤ –∑–∞–¥–∞–Ω–∏—è—Ö: {total_count}")

    except Exception as e:
        return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Ñ–∞–π–ª–∞: {e}'}

    # --- –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ---
    if total_count > 1:
        return {
            'success': True,
            'deleted': False,
            'reason': '–§–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö',
            'occurrences': total_count
        }

    if total_count == 0:
        return {
            'success': True,
            'deleted': False,
            'reason': '–§–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–∏—è—Ö —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'occurrences': 0
        }

    # total_count == 1 ‚Üí —É–¥–∞–ª—è–µ–º
    size = media.size or 0
    media_id = str(media.id)

    # --- —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ CoursePdf ---
    try:
        course_pdfs = CoursePdf.objects.filter(media=media)
        for pdf in course_pdfs:
            print(f"[removeFile] –£–¥–∞–ª—è–µ–º CoursePdf: id={pdf.id}, title={pdf.title}")
            pdf.delete()
    except Exception as e:
        print(f"[removeFile] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ CoursePdf: {e}")

    # --- —É–¥–∞–ª—è–µ–º —Å–∞–º MediaFile ---
    try:
        with transaction.atomic():
            try:
                if media.file:
                    media.file.delete(save=False)
                    print(f"[removeFile] –§–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª—ë–Ω: {media.file.name}")
            except Exception as e:
                print(f"[removeFile] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")

            media.delete()
            print(f"[removeFile] MediaFile —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î: id={media_id}")

            try:
                if size:
                    user.update_used_storage(-size)
                    print(f"[removeFile] –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {size} –±–∞–π—Ç")
            except Exception as e:
                print(f"[removeFile] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ used_storage: {e}")

    except Exception as e:
        return {'success': False, 'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ –ë–î/—Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}'}

    return {'success': True, 'deleted': True, 'media_id': media_id, 'freed': size}







def delete_task_handler(user: CustomUser, task: BaseTask):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ:
      - –¥–ª—è –º–µ–¥–∏–∞-–∑–∞–¥–∞–Ω–∏–π Audio, Pdf, Image –≤—ã–∑—ã–≤–∞–µ—Ç removeFile –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ URL;
      - –≤—ã—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (task.size);
      - —É–¥–∞–ª—è–µ—Ç content_object –∏ BaseTask.
    """
    # 1) –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –≤ –≤–∏–¥–µ URL ‚Äî —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ removeFile
    media_url_fields = {
        'Image': 'image_url',
        'Audio': 'audio_url',
        'Pdf': 'pdf_url',
    }

    task_type = task.content_type.model_class().__name__
    url_field = media_url_fields.get(task_type)
    if url_field:
        try:
            content = task.content_object
            media_url = getattr(content, url_field, None)
            if media_url:
                removeFile(media_url, user)
        except Exception:
            # –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            pass

    # 2) –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∏ M2M —Å MediaFile
    task.media.clear()

    # 3) –í—ã—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user.update_used_storage(-task.size)
        print("Updated used storage by", -task.size)
    except Exception:
        pass

    # 4) –£–¥–∞–ª—è–µ–º —Å–∞–º content_object
    content = task.content_object
    if content:
        content.delete()

    # 5) –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ lesson-–∞
    lesson_context = task.section.lesson.context or {}
    if str(task.id) in lesson_context:
        del lesson_context[str(task.id)]
        task.section.lesson.context = lesson_context
        task.section.lesson.save(update_fields=["context"])

    # 6) –£–¥–∞–ª—è–µ–º BaseTask
    task.delete()


@require_http_methods(["DELETE"])
def delete_task(request, task_id):
    try:
        with transaction.atomic():
            task = get_object_or_404(BaseTask, id=task_id)
            course_obj = task.section.lesson.course

            if request.user != course_obj.user:
                return JsonResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"}, status=403)

            section = task.section
            order_to_remove = task.order

            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä
            delete_task_handler(request.user, task)

            # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞–Ω–∏—è
            remaining = BaseTask.objects.filter(
                section=section,
                order__gt=order_to_remove
            )
            for t in remaining:
                t.order -= 1
                t.save(update_fields=["order"])

            return JsonResponse({"success": True})

    except BaseTask.DoesNotExist:
        print(f"Task {task_id} not found")
        return JsonResponse({"error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)
    except Exception as e:
        print(e)
        return JsonResponse({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."}, status=500)



def handle_request_validation(request):
    """Validate the incoming request method and user role"""
    if request.method != 'POST':
        return JsonResponse({'status': 'error', 'message': 'POST only'}, status=405)

    if request.user.role != 'teacher':
        return JsonResponse(
            {'status': 'error', 'message': 'Only teachers can generate requests'},
            status=403
        )
    return None

def parse_request_data(request):
    """Parse and validate request data"""
    data = json.loads(request.body)

    required_fields = ['lessonId', 'taskType']
    for field in required_fields:
        if field not in data:
            raise ValueError(f"Missing required field: {field}")

    return {
        'lesson_id': data['lessonId'],
        'task_type': data['taskType'],
        'context_flag': data.get('context', False),
        'emoji': data.get('emoji', False),
        'quantity': data.get('quantity', 2),
        'fill_type': data.get('fillType', 'lexical'),
        'match_type': data.get('matchType', ''),
        'test_type': data.get('testType', 'auto'),
        'language': data.get('language', 'en'),
        'sentence_length': data.get('sentenceLength', 6),
        'user_query': data.get('query', ''),
        'image_data': data.get('image', None)
    }

@ratelimit(key='ip', rate='20/m', block=True)
def generate_request(request):
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Celery"""
    validation_error = handle_request_validation(request)
    if validation_error:
        return validation_error

    try:
        if not has_min_tokens(request.user, min_tokens=5):
            raise PermissionError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞")

        try:
            if hasattr(request.user, 'metrics'):
                request.user.metrics.tasks_generated_counter += 1
                request.user.metrics.save(update_fields=["tasks_generated_counter"])
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            import logging
            logger = logging.getLogger(__name__)
            logger.warning(f"Failed to increment tasks_generated_counter for user {request.user.id}: {e}")

        params = parse_request_data(request)
        task = generate_task_celery.delay(request.user.id, params)

        return JsonResponse({'task_id': task.id, 'status': 'pending'}, status=202)

    except PermissionError as e:
        return JsonResponse({"error": str(e)}, status=403)
    except Exception as e:
        print("Unexpected error:", e)
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)

def get_task_status(request, task_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Celery –∑–∞–¥–∞—á–∏"""
    task_result = AsyncResult(task_id)
    response = {
        'task_id': task_id,
        'status': task_result.status,  # PENDING, STARTED, SUCCESS, FAILURE
        'result': task_result.result if task_result.status == 'SUCCESS' else None
    }
    return JsonResponse(response)






def handle_pdf_upload(request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å PDF-—Ñ–∞–π–ª–æ–º (file –∏–ª–∏ base64), query –∏ section_id.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Celery (OCR + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π).
    –ï—Å–ª–∏ is_new_section=true ‚Äî –∫–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –Ω–µ–≥–æ.
    """
    try:

        # –ß—Ç–µ–Ω–∏–µ PDF –¥–∞–Ω–Ω—ã—Ö
        pdf_file = request.FILES.get('file')
        if pdf_file:
            pdf_data = pdf_file.read()
            pdf_base64 = base64.b64encode(pdf_data).decode('utf-8')
        else:
            base64_str = request.POST.get('base64')
            if base64_str:
                pdf_base64 = base64_str
            else:
                print("handle_pdf_upload: –ù–µ—Ç —Ñ–∞–π–ª–∞ –∏ base64 –¥–∞–Ω–Ω—ã—Ö")
                return JsonResponse({'error': 'No file or base64 data provided'}, status=400)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        query = request.POST.get('query', '')
        section_id = request.POST.get('section_id')
        is_new_section = request.POST.get('is_new_section', 'false').lower() == 'true'

        if not section_id:
            return JsonResponse({'error': 'Missing section_id'}, status=400)

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        if is_new_section:
            print("handle_pdf_upload: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
            with transaction.atomic():
                try:
                    original_section = Section.objects.get(id=section_id)
                    print(f"handle_pdf_upload: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞–π–¥–µ–Ω: {original_section}")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
                    if original_section.lesson.course.user != request.user:
                        print("handle_pdf_upload: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
                        return JsonResponse({'error': 'Permission denied'}, status=403)

                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
                    new_section = Section.objects.create(
                        lesson=original_section.lesson,
                        name="New Section",
                        type=original_section.type
                    )
                    print(f"handle_pdf_upload: –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª —Å–æ–∑–¥–∞–Ω —Å id={new_section.id}")

                    section_id = str(new_section.id)

                except Section.DoesNotExist:
                    print("handle_pdf_upload: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return JsonResponse({'error': 'Original section not found'}, status=404)
                except Exception as e:
                    print(f"handle_pdf_upload: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: {e}")
                    return JsonResponse({'error': f'Error creating new section: {str(e)}'}, status=500)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ (–∏–ª–∏ –Ω–æ–≤–æ–≥–æ) —Ä–∞–∑–¥–µ–ª–∞
        print(f"handle_pdf_upload: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å id={section_id}")
        section_obj = get_object_or_404(Section, id=section_id)
        if section_obj.lesson.course.user != request.user:
            print("handle_pdf_upload: –î–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É –∑–∞–ø—Ä–µ—â—ë–Ω")
            return JsonResponse({'error': 'Access denied'}, status=403)

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        print(f"handle_pdf_upload: –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ Celery –¥–ª—è section_id={section_id}")
        task = process_pdf_section_task.delay(section_id, query, pdf_base64, request.user.id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º task_id –¥–ª—è –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
        response_data = {
            "message": "Processing started",
            "task_id": task.id
        }

        response_data["res_section_id"] = section_id

        print(f"handle_pdf_upload: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å task_id={task.id}")
        return JsonResponse(response_data)

    except Exception as e:
        print(f"handle_pdf_upload: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return JsonResponse({'error': f'Internal server error: {str(e)}'}, status=500)

def get_pdf_status_view(request, task_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Celery-–∑–∞–¥–∞—á–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–æ."""
    print(f"get_pdf_status_view: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}")

    task_id_str = str(task_id)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ

    result = AsyncResult(task_id_str)

    response_data = {
        "task_id": task_id_str,
        "status": result.status,  # PENDING, STARTED, RETRY, FAILURE, SUCCESS
        "result": None,
    }

    if result.ready():
        try:
            task_result = result.get()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –æ—à–∏–±–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å error
            if isinstance(task_result, dict) and "error" in task_result:
                response_data["status"] = "error"
                response_data["result"] = {"error": task_result["error"]}
                print(f"get_pdf_status_view: –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–¥–∞—á–∏ {task_id_str}: {task_result['error']}")
            else:
                response_data["result"] = task_result
                print(f"get_pdf_status_view: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏ {task_id_str} –ø–æ–ª—É—á–µ–Ω")
        except Exception as e:
            print(f"get_pdf_status_view: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ {task_id_str}: {e}")
            response_data["status"] = "error"
            response_data["result"] = {"error": str(e)}

    return JsonResponse(response_data)




@require_POST
@login_required
@ratelimit(key='ip', rate='10/m', block=True)
def separate_into_blocks(request):
    """
    POST-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã (JSON):
        - course_id
        - section_id
        - section_type        (one of 'lexical','listening','reading','grammar','speaking','other')
        - create_new_section  (optional, bool)
        - new_section_name    (optional, str) ‚Äî –µ—Å–ª–∏ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
        { "status": "ok", "blocks": [[{task_dict},...], ...], "new_section_id": "<uuid>" }
    """
    try:
        body = json.loads(request.body)
    except Exception:
        return JsonResponse({"error": "invalid json"}, status=400)

    course_id = body.get("course_id")
    section_id = body.get("section_id")
    section_type = body.get("section_type")
    create_new_section = bool(body.get("create_new_section", False))
    new_section_name = body.get("new_section_name")

    if not (course_id and section_id and section_type and request.user.is_authenticated):
        return JsonResponse({"error": "missing parameters"}, status=400)

    if request.user and request.user.is_authenticated:
        try:
            if hasattr(request.user, 'metrics'):
                request.user.metrics.sections_generated_counter += 1
                request.user.metrics.save(update_fields=["sections_generated_counter"])
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            import logging
            logger = logging.getLogger(__name__)
            logger.warning(f"Failed to increment tasks_generated_counter for user {request.user.id}: {e}")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    course_obj = get_object_or_404(Course, id=course_id)
    if course_obj.user != request.user:
        return JsonResponse({"error": "forbidden"}, status=403)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é –∏ —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫—É—Ä—Å—É
    section_obj = get_object_or_404(Section, id=section_id)
    if section_obj.lesson.course.id != course_obj.id:
        return JsonResponse({"error": "section does not belong to course"}, status=400)

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–∫–µ
    new_section_obj = None
    if create_new_section:
        lesson_obj = section_obj.lesson
        name = new_section_name or f"{section_type.capitalize()} (auto)"
        new_section_obj = Section.objects.create(
            lesson=lesson_obj,
            name="New Section üî•",
            type="learning"
        )

    # –ø–æ–ª—É—á–∞–µ–º prefs
    prefs = UserAutogenerationPreferences.objects.filter(course_id=course_id).first()
    if not prefs:
        return JsonResponse({"error": "no prefs for course"}, status=400)

    task_types_map = {
        'lexical': prefs.task_types_lexical,
        'listening': prefs.task_types_listening,
        'reading': prefs.task_types_reading,
        'grammar': prefs.task_types_grammar,
        'speaking': prefs.task_types_speaking,
        'other': prefs.task_types_other,
    }

    selected_task_types = task_types_map.get(section_type, []) or []

    blockers = {"WordList", "Note", "Article", "Audio"}
    blocks = []
    current_block = []

    for tdict in selected_task_types:
        if not isinstance(tdict, dict):
            continue

        task_name = list(tdict.keys())[0]
        current_block.append(tdict)

        if task_name in blockers:
            # –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            blocks.append(current_block)
            current_block = []

    # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–µ
    if current_block:
        blocks.append(current_block)

    # —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    blocks = [b for b in blocks if b]

    response = {
        "status": "ok",
        "blocks": blocks,
        "new_section_id": str(new_section_obj.id) if new_section_obj else None
    }
    return JsonResponse(response, status=200)

@login_required
@ratelimit(key='ip', rate='30/m', block=True)
def start_block_generation(request):
    if request.method != "POST":
        return JsonResponse({"error": "only POST allowed"}, status=405)

    try:
        data = json.loads(request.body.decode("utf-8"))
        section_id = data.get("section_id")
        auto_context = data.get("auto_context", [])
        context_flag = data.get("context_flag", False)
        emoji_flag = data.get("emoji_flag", False)
        block = data.get("block", [])

        if not section_id or not isinstance(block, list):
            return JsonResponse({"error": "invalid input"}, status=400)

        section_obj = get_object_or_404(Section, id=section_id)
        lesson_id = section_obj.lesson.id

        task_ids = []
        for task in block:
            task_type = list(task.keys())[0]
            print(task)
            user_query = task.get(task_type, {}).get('user_query')

            params = {
                "task_type": task_type,
                "context_flag": context_flag,
                "emoji": emoji_flag,
                "auto_context": auto_context,
                "user_query": user_query,
                "lesson_id": lesson_id,  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º lesson_id
            }

            async_res = generate_task_celery.delay(request.user.id, params)
            task_ids.append(str(async_res.id))

        generation = Generation.objects.create(
            user=request.user,
            section_id=section_id,
            created_at=timezone.now(),
            status="pending",
            tasks=task_ids,
        )

        return JsonResponse({"generation_id": str(generation.id)})

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

@login_required
def block_generation_status(request, generation_id):
    try:
        generation = Generation.objects.get(id=generation_id, user=request.user)
    except Generation.DoesNotExist:
        return JsonResponse({"error": "not found"}, status=404)

    task_ids = generation.tasks or []
    if not task_ids:
        return JsonResponse({"error": "no tasks"}, status=400)

    results = []
    in_progress = False

    for tid in task_ids:
        res = AsyncResult(tid)
        if res.successful():
            # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç data
            result_data = res.result
            if isinstance(result_data, dict) and "data" in result_data:
                results.append(result_data["data"])
            else:
                results.append(result_data)
        elif res.failed():
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
            continue
        else:
            in_progress = True

    if in_progress:
        if generation.status != "in_progress":
            generation.status = "in_progress"
            generation.save(update_fields=["status"])
        return JsonResponse({"status": "in_progress"}, status=200)

    if results:
        generation.status = "done"
        generation.save(update_fields=["status"])
        return JsonResponse({
            "status": "done",
            "results": results
        }, status=200)
    else:
        generation.status = "failed"
        generation.save(update_fields=["status"])
        return JsonResponse({"status": "failed"}, status=200)

@require_POST
def create_section(request):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É—Ä–æ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ id
    """
    import json

    try:
        data = json.loads(request.body)
        lesson_id = data.get("lesson_id")
        section_name = data.get("name", "–ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª üî•")
        section_type = data.get("type", "learning")
    except Exception:
        return JsonResponse({"error": "invalid input"}, status=400)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson_obj = get_object_or_404(Lesson, id=lesson_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫—É—Ä—Å–∞ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã
    if request.user != lesson_obj.course.user:
        return JsonResponse({"error": "permission denied"}, status=403)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
    new_section = Section.objects.create(
        lesson=lesson_obj,
        name=section_name,
        type=section_type
    )

    return JsonResponse({"section_id": str(new_section.id)})

@login_required
@require_POST
@ratelimit(key='ip', rate='30/m', block=True)
def form_block(request):
    try:
        body = json.loads(request.body.decode("utf-8"))
        task_type = body.get("task_type")
        section_id = body.get("section_id")
        data_list = body.get("data", [])
        auto_context = body.get("auto_context", "")

        if not task_type or not section_id or not isinstance(data_list, list):
            return JsonResponse({"error": "invalid input"}, status=400)

        section_obj = get_object_or_404(Section, id=section_id)
        created_tasks = []
        updated_auto_context = auto_context

        for item_idx, item_data in enumerate(data_list):
            try:
                # --- –≤—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                try:
                    task_data = call_form_function(task_type, request.user, payload=item_data)
                except Exception as e:
                    logger.exception("call_form_function failed for %s item %s: %s", task_type, item_idx, e)
                    continue

                if not task_data or not isinstance(task_data, dict):
                    logger.warning("call_form_function returned invalid for %s item %s: %r", task_type, item_idx, task_data)
                    continue

                # --- —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ
                try:
                    task_instance = create_task_instance(request.user, task_type, task_data, section_obj)
                except Exception as e:
                    logger.exception("create_task_instance failed for %s item %s: %s", task_type, item_idx, e)
                    continue

                task_id = getattr(task_instance, "id", None)
                if not task_id:
                    logger.warning("create_task_instance returned no id for %s item %s: %r", task_type, item_idx, task_instance)
                    continue

                created_tasks.append({"task_id": task_id, "task_type": task_type})

                # --- –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —Ç–∏–ø —Ç—Ä–µ–±—É–µ—Ç)
                if task_type in {"WordList", "Note", "Article", "Audio"}:
                    try:
                        updated_auto_context = update_auto_context(updated_auto_context, task_type, task_data)
                    except Exception as e:
                        logger.exception("update_auto_context failed for %s item %s: %s", task_type, item_idx, e)
                        # –Ω–µ —Ñ–∞—Ç–∞–ª—å–Ω–æ

            except Exception as outer_e:
                logger.exception("Unexpected error processing item %s for %s: %s", item_idx, task_type, outer_e)
                continue

        return JsonResponse({
            "task_ids": created_tasks,
            "auto_context": updated_auto_context
        }, status=200)

    except Exception as e:
        logger.exception("form_block failed")
        return JsonResponse({"error": str(e)}, status=500)

def standart_pattern(request, course_id):
    course_obj = get_object_or_404(Course, id=course_id)
    if request.user != course_obj.user:
        return JsonResponse({'error': 'You are not a teacher'})

    defaults = {
        "task_types_lexical": [
            {"WordList": {"user_query": "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 15 —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."}},
            {"MatchUpTheWords": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 10 –ø–∞—Ä —Å–ª–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ."}},
            {"Unscramble": {"user_query": "–í—ã–±–µ—Ä–∏—Ç–µ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –¥–∞–π—Ç–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏—Ö —É–≥–∞–¥—ã–≤–∞–Ω–∏—è."}},
            {"MakeASentence": {"user_query": "–ù–∞–ø–∏—à–∏—Ç–µ 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ 5-7 —Å–ª–æ–≤ –∫–∞–∂–¥–æ–µ)."}},
            {"LabelImages": {"user_query": "–ü–æ–¥–±–µ—Ä–∏—Ç–µ 6 —Å–ª–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."}},
            {"FillInTheBlanks": {
                "user_query": "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å 7 –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."}},
        ],
        "task_types_listening": [
            {"Audio": {
                "user_query": "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–æ–Ω–æ–ª–æ–≥-—Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–¥–∫–∞—Å—Ç–∞ (150 —Å–ª–æ–≤) –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"TrueOrFalse": {
                "user_query": "–°–æ–∑–¥–∞–π—Ç–µ 5 —Å–ª–æ–∂–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Ç–∏–ø–∞ '–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ' –¥–ª—è –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è."}},
        ],
        "task_types_reading": [
            {"Article": {"user_query": "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è (200+ —Å–ª–æ–≤) –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"Test": {"user_query": "–°–æ—Å—Ç–∞–≤—å—Ç–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ."}},
        ],
        "task_types_grammar": [
            {"Note": {
                "user_query": "–ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–ª—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏)."}},
            {"TrueOrFalse": {
                "user_query": "–°–æ–∑–¥–∞–π—Ç–µ 4 —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '–≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ' –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞."}},
            {"Test": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 10 —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"FillInTheBlanks": {
                "user_query": "–ù–∞–ø–∏—à–∏—Ç–µ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –æ–¥–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–æ–º –≤ –∫–∞–∂–¥–æ–º; —É–∫–∞–∂–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."}},
        ],
        "task_types_speaking": [
            {"Note": {
                "user_query": "–°–æ–∑–¥–∞–π—Ç–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤-–ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"Note": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 3 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–Ω–æ–ª–æ–≥–∞ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
        ],
        "task_types_other": [
            {"WordList": {"user_query": "–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ –∏–∑ —É—Ä–æ–∫–∞."}},
            {"MatchUpTheWords": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 7 –ø–∞—Ä —Å–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."}},
            {"FillInTheBlanks": {"user_query": "–ù–∞–ø–∏—à–∏—Ç–µ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ª–µ–∫—Å–∏–∫–∏."}},
            {"Note": {"user_query": "–ö—Ä–∞—Ç–∫–æ —Å—É–º–º–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–º—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."}},
            {"Test": {"user_query": "–°–æ–∑–¥–∞–π—Ç–µ 6 —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ —É—Ä–æ–∫–∞."}},
            {"Note": {"user_query": "–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ —É—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏."}},
        ],
    }

    prefs, created = UserAutogenerationPreferences.objects.update_or_create(
        course=course_obj,
        defaults=defaults
    )

    return JsonResponse({'status': 'ok', 'created': created})




def call_form_function(task_type, user, payload):
    form_func_name = f"form{task_type}"
    if form_func_name not in globals():
        return {"status": "error", "error": f"form function for {task_type} not found"}
    form_func = globals()[form_func_name]

    return form_func(user, payload)

def formWordList(user, payload):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è WordList –≤ –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å:
        {"title": str, "words": [{"word": str, "translation": str}, ...]}

    –î–æ–ø—É—Å–∫–∞–µ–º—ã–µ –≤—Ö–æ–¥—ã:
      - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {'status': 'success', 'data': {...}}
      - —É–∂–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π data: {'title': ..., 'words': [...]}

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - dict —Å –ø–æ–ª—è–º–∏ title –∏ words (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      - None –ø—Ä–∏ –æ—à–∏–±–∫–µ / –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    """
    try:
        # –µ—Å–ª–∏ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –æ–±—ë—Ä—Ç–∫—É {'status':..., 'data': {...}}
        if isinstance(payload, dict) and 'data' in payload and not ('title' in payload and 'words' in payload):
            data = payload.get('data')
        else:
            data = payload

        if not isinstance(data, dict):
            print(f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è dict –≤ data, –ø–æ–ª—É—á–µ–Ω–æ {type(data)} -> {data}")
            return None

        title = data.get('title')
        if not isinstance(title, str):
            print(f"–û—à–∏–±–∫–∞: 'title' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞: {title!r}")
            return None
        title = title.strip()

        words = data.get('words')
        if not isinstance(words, list):
            print(f"–û—à–∏–±–∫–∞: 'words' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–ø–∏—Å–æ–∫: {words!r}")
            return None

        cleaned_words = []
        for idx, item in enumerate(words):
            if not isinstance(item, dict):
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç words[{idx}] ‚Äî –Ω–µ dict: {item!r}")
                continue

            # –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏: 'word' –∏ 'translation'
            w = item.get('word')
            t = item.get('translation')

            # –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ / fallback: –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ–ª—è
            if w is None and 'text' in item:
                w = item.get('text')
            if t is None and 'translate' in item:
                t = item.get('translate')

            if isinstance(w, str):
                w = w.strip()
            if isinstance(t, str):
                t = t.strip()

            if isinstance(w, str) and w and isinstance(t, str) and t:
                cleaned_words.append({"word": w, "translation": t})
            else:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–∞—Ä—É –≤ words[{idx}]: word={w!r}, translation={t!r}")

        return {"title": title, "words": cleaned_words}

    except Exception as e:
        # –∑–∞—â–∏—Ç–Ω—ã–π –ø–∞–¥—ë–∂ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"Unexpected error in formWordList: {e}")
        return None

def _extract_data(payload):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –µ—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç 'data' ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º payload['data'],
    –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º payload (–µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å).
    """
    if isinstance(payload, dict) and "data" in payload and not ("title" in payload and "words" in payload):
        return payload.get("data")
    return payload if isinstance(payload, dict) else None

def formMatchUpTheWords(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formMatchUpTheWords: data is not dict:", data)
        return None

    title = data.get("title")
    pairs = data.get("pairs")
    if not isinstance(title, str) or not isinstance(pairs, list):
        print("formMatchUpTheWords: invalid title or pairs")
        return None

    seen_card1 = set()
    seen_card2 = set()
    unique_pairs = []

    for idx, pair in enumerate(pairs):
        if not isinstance(pair, dict):
            print(f"formMatchUpTheWords: pair[{idx}] is not dict: {pair!r}")
            continue
        # Accept if keys include card1 and card2 (may have extras) but require at least these
        if "card1" not in pair or "card2" not in pair:
            print(f"formMatchUpTheWords: pair[{idx}] missing keys: {pair!r}")
            continue

        card1 = pair.get("card1")
        card2 = pair.get("card2")

        if not isinstance(card1, str) or not isinstance(card2, str):
            print(f"formMatchUpTheWords: pair[{idx}] card types invalid: {pair!r}")
            continue

        if card1 in seen_card1 or card2 in seen_card2:
            # skip duplicates
            continue

        seen_card1.add(card1)
        seen_card2.add(card2)
        unique_pairs.append({"card1": card1.strip(), "card2": card2.strip()})

    if not unique_pairs:
        print("formMatchUpTheWords: no valid pairs")
        return None

    return {"title": title.strip(), "pairs": unique_pairs}

def formEssay(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formEssay: data is not dict:", data)
        return None

    title = data.get("title")
    conditions = data.get("conditions")

    if not isinstance(title, str):
        print("formEssay: invalid title")
        return None

    # conditions can be dict or list, accept both
    if conditions is not None and not isinstance(conditions, (dict, list)):
        print("formEssay: invalid conditions type")
        return None

    # normalize
    cleaned = {"title": title.strip()}
    if conditions is not None:
        cleaned["conditions"] = conditions

    return cleaned

def md_to_html(text: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown-—Ç–µ–∫—Å—Ç –≤ HTML-—Ç–µ–≥–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –¥—Ä.
    """
    return markdown.markdown(
        text,
        extensions=[
            "extra",        # —Ç–∞–±–ª–∏—Ü—ã, —Å–Ω–æ—Å–∫–∏ –∏ –¥—Ä.
            "nl2br",        # –ø–µ—Ä–µ–≤–æ–¥ \n –≤ <br>
            "sane_lists"    # –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        ]
    )

def formNote(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formNote: data is not dict:", data)
        return None

    title = data.get("title")
    content = data.get("content")

    if not isinstance(title, str) or not isinstance(content, str):
        print("formNote: title/content must be strings")
        return None

    try:
        cleaned_content = md_to_html(content)
    except Exception as e:
        print("formNote: markdown_to_html failed:", e)
        cleaned_content = content

    return {"title": title.strip(), "content": cleaned_content}

def formArticle(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formArticle: data is not dict:", data)
        return None

    title = data.get("title")
    content = data.get("content")

    if not isinstance(title, str) or not isinstance(content, str):
        print("formArticle: invalid title or content")
        return None

    try:
        cleaned_content = md_to_html(content)
    except Exception as e:
        print("formArticle: markdown_to_html failed:", e)
        cleaned_content = content

    return {"title": title.strip(), "content": cleaned_content}

def formSortIntoColumns(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formSortIntoColumns: data is not dict:", data)
        return None

    title = data.get("title")
    columns = data.get("columns")

    if not isinstance(title, str) or not isinstance(columns, list):
        print("formSortIntoColumns: invalid title or columns")
        return None

    cleaned_columns = []
    for idx, col in enumerate(columns):
        if not isinstance(col, dict):
            print(f"formSortIntoColumns: column[{idx}] not dict: {col!r}")
            return None
        name = col.get("name")
        words = col.get("words")
        if not isinstance(name, str) or not isinstance(words, list):
            print(f"formSortIntoColumns: column[{idx}] invalid structure")
            return None
        # filter words to strings
        filtered_words = [w for w in words if isinstance(w, str)]
        cleaned_columns.append({"name": name.strip(), "words": filtered_words})

    return {"title": title.strip(), "columns": cleaned_columns}

def formFillInTheBlanks(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formFillInTheBlanks: data is not dict:", data)
        return None

    title = data.get("title")
    sentences = data.get("sentences")

    if not isinstance(title, str) or not isinstance(sentences, list):
        print("formFillInTheBlanks: invalid title or sentences")
        return None

    lines = []
    for idx, s in enumerate(sentences):
        if not isinstance(s, dict):
            print(f"formFillInTheBlanks: sentences[{idx}] is not dict: {s!r}")
            continue
        text = s.get("text")
        answer = s.get("answer")
        if not isinstance(text, str) or not isinstance(answer, str):
            print(f"formFillInTheBlanks: sentences[{idx}] invalid fields")
            continue

        # normalize underscores and insert answer in brackets
        safe_text = re.sub(r'_+', '_', text).strip()
        sentence = safe_text.replace("_", f"[{answer.strip()}]")
        try:
            html_line = markdown_to_html(sentence)
        except Exception:
            html_line = sentence
        lines.append(html_line)

    if not lines:
        print("formFillInTheBlanks: no valid sentences")
        return None

    full_text = "\n".join(lines)
    if not re.search(r"\[.+?\]", full_text):
        print("formFillInTheBlanks: no answers embedded")
        return None

    return {"title": title.strip(), "text": full_text}

def formTest(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formTest: data is not dict:", data)
        return None

    title = data.get("title")
    questions = data.get("questions")

    if not isinstance(title, str) or not isinstance(questions, list):
        print("formTest: invalid title or questions")
        return None

    clean_questions = []
    for qidx, q in enumerate(questions):
        if not isinstance(q, dict):
            print(f"formTest: question[{qidx}] not dict: {q!r}")
            continue
        text = q.get("text")
        answers = q.get("answers")
        if not isinstance(text, str) or not isinstance(answers, list):
            print(f"formTest: question[{qidx}] invalid fields")
            continue

        clean_answers = []
        for aidx, a in enumerate(answers):
            if not isinstance(a, dict):
                print(f"formTest: answer[{qidx}][{aidx}] not dict: {a!r}")
                continue
            ans_text = a.get("text")
            is_correct = a.get("is_correct")
            if not isinstance(ans_text, str) or not isinstance(is_correct, bool):
                print(f"formTest: answer[{qidx}][{aidx}] invalid")
                continue
            clean_answers.append({"text": ans_text.strip(), "is_correct": is_correct})

        if not clean_answers:
            print(f"formTest: question[{qidx}] has no valid answers")
            continue

        random.shuffle(clean_answers)
        clean_questions.append({"text": text.strip(), "answers": clean_answers})

    if not clean_questions:
        print("formTest: no valid questions")
        return None

    return {"title": title.strip(), "questions": clean_questions}

def formTrueOrFalse(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formTrueOrFalse: data is not dict:", data)
        return None

    title = data.get("title")
    statements = data.get("statements")

    if not isinstance(title, str) or not isinstance(statements, list):
        print("formTrueOrFalse: invalid title or statements")
        return None

    clean_statements = []
    for sidx, st in enumerate(statements):
        if not isinstance(st, dict):
            print(f"formTrueOrFalse: statements[{sidx}] not dict: {st!r}")
            continue
        text = st.get("text")
        is_true = st.get("is_true")
        if not isinstance(text, str) or not isinstance(is_true, bool):
            print(f"formTrueOrFalse: statements[{sidx}] invalid fields")
            continue
        clean_statements.append({"text": text.strip(), "is_true": is_true})

    if not clean_statements:
        print("formTrueOrFalse: no valid statements")
        return None

    return {"title": title.strip(), "statements": clean_statements}

def formLabelImages(user, payload):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç title –∏ —Å–ø–∏—Å–æ–∫ images: [{'label': str, 'url': optional_str}, ...]
    URL –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ search_images_api
    –õ–æ–≥–∏–∫–∞:
        - –ë–µ—Ä–µ–º –¥–æ 8 –ø–æ–¥–ø–∏—Å–µ–π
        - –î–ª—è –∫–∞–∂–¥–æ–π –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
        - –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è 6 –ø–æ–¥–ø–∏—Å–µ–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
        - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ <2 –∫–∞—Ä—Ç–∏–Ω–æ–∫, –≤–µ—Ä–Ω—É—Ç—å None
    """
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formLabelImages: data is not dict:", data)
        return None

    title = data.get("title")
    labels = data.get("labels")

    if not isinstance(title, str) or not isinstance(labels, list):
        print("formLabelImages: invalid title or labels")
        return None

    cleaned = {"title": title.strip(), "images": []}

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –∏ –±–µ—Ä–µ–º –¥–æ 12 –º–µ—Ç–æ–∫
    label_candidates = [lbl for lbl in labels if isinstance(lbl, str)]
    if not label_candidates:
        print("formLabelImages: no valid labels")
        return None

    if len(label_candidates) > 8:
        label_candidates = random.sample(label_candidates, 8)

    for lbl in label_candidates:
        url = None
        try:
            search_result = search_images_api(normalize(lbl, keep_emojis=False), user=user)
            images_list = search_result.get("images", [])
            if images_list:
                url = random.choice(images_list).get("url")
        except PermissionDenied:
            url = None
        except Exception as e:
            print(f"formLabelImages: error searching image for '{lbl}': {e}")
            url = None

        if url:
            cleaned["images"].append({"label": lbl.strip(), "url": url})

        # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è 6 –º–µ—Ç–æ–∫
        if len(cleaned["images"]) >= 6:
            break

    # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω—å—à–µ 2 –∫–∞—Ä—Ç–∏–Ω–æ–∫ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    if len(cleaned["images"]) < 2:
        return None

    return cleaned

ALLOWED_AUDIO_MIME = {'audio/mpeg'}
ALLOWED_AUDIO_TEXT = 'mp3'
MAX_AUDIO_SIZE = 70 * 1024 * 1024

def formAudio(user, payload):
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formAudio: data is not dict:", data, "payload:", payload)
        return None

    title = data.get("title", "")
    transcript = data.get("transcript", "") or data.get("text", "") or ""

    try:
        transcript = clean_text(transcript) if transcript else ""
    except Exception:
        transcript = transcript or ""

    text = transcript or (title or "")
    if not text:
        print("formAudio: no text or transcript available")
        return None

    return {
        "title": title.strip() if isinstance(title, str) else "",
        "audio_url": "/media/uploads/notification.mp3",
        "transcript": transcript.strip()
    }

def clean_text(text):
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
    text = re.sub(r'[\U00010000-\U0010ffff]', '', text)
    # –ó–∞—Ç–µ–º –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    return text.strip()

def shuffle_word(word):
    if len(word) <= 1:
        return word
    word_letters = list(word)
    while True:
        random.shuffle(word_letters)
        shuffled = ''.join(word_letters)
        if shuffled != word:
            return shuffled

def formUnscramble(user, payload):
    """
    –û–∂–∏–¥–∞–µ—Ç data —Å keys 'title' –∏ 'words' (words ‚Äî list of dicts with 'word' and 'hint').
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {"title": str, "words": [{"word": str, "shuffled_word": str, "hint": str}, ...]}
    """
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formUnscramble: data is not dict:", data)
        return None

    title = data.get("title")
    words = data.get("words")

    if not isinstance(title, str):
        print("formUnscramble: invalid title")
        return None
    if not isinstance(words, list):
        print("formUnscramble: invalid words list")
        return None

    valid_items = [w for w in words if isinstance(w, dict)]
    if not valid_items:
        print("formUnscramble: no valid word items")
        return None

    sample_words = random.sample(valid_items, min(6, len(valid_items)))

    clean_words = []
    for idx, w in enumerate(sample_words):
        word = w.get("word")
        hint = w.get("hint", "") or w.get("translation", "")  # fallback
        if not isinstance(word, str):
            print(f"formUnscramble: sample[{idx}] word invalid: {w!r}")
            continue
        if not isinstance(hint, str):
            hint = ""

        # –û—á–∏—Å—Ç–∫–∞ –∏ —à–∏—Ñ—Ä–æ–≤–∫–∞
        try:
            clean_word = clean_text(word)
        except Exception:
            clean_word = word.strip()

        shuffled_word = shuffle_word(clean_word) if callable(globals().get("shuffle_word")) else "".join(random.sample(clean_word, len(clean_word))) if clean_word else ""
        clean_words.append({
            "word": clean_word,
            "shuffled_word": shuffled_word,
            "hint": hint.strip()
        })

    if not clean_words:
        print("formUnscramble: no clean words produced")
        return None

    return {
        "title": title.strip(),
        "words": clean_words
    }

def shuffle_sentence(sentence: str) -> str:
    words = sentence.strip().split()
    random.shuffle(words)
    shuffled = " ".join(words)
    return shuffled

def formMakeASentence(user, payload):
    """
    –û–∂–∏–¥–∞–µ—Ç data —Å keys 'title' –∏ 'sentences' (list of dicts with 'sentence' key).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {"title": str, "sentences": [{"correct": str, "shuffled": str}, ...]}
    """
    data = _extract_data(payload)
    if not isinstance(data, dict):
        print("formMakeASentence: data is not dict:", data)
        return None

    title = data.get("title")
    sentences = data.get("sentences")

    if not isinstance(title, str):
        print("formMakeASentence: invalid title")
        return None
    if not isinstance(sentences, list):
        print("formMakeASentence: invalid sentences")
        return None

    clean_sentences = []
    for idx, s in enumerate(sentences):
        if not isinstance(s, dict):
            print(f"formMakeASentence: sentences[{idx}] not dict: {s!r}")
            continue
        sentence = s.get("sentence") or s.get("text") or ""
        if not isinstance(sentence, str) or not sentence.strip():
            print(f"formMakeASentence: sentences[{idx}] invalid sentence")
            continue

        try:
            sentence = sentence.replace("\t", " ")
            corrected = clean_text(sentence)
            corrected = re.sub(r"\s+", " ", corrected).strip()
        except Exception:
            corrected = sentence.strip()

        if callable(globals().get("shuffle_sentence")):
            shuffled = shuffle_sentence(corrected)
        else:
            # fallback: simple word shuffle
            parts = re.split(r'(\s+)', corrected)
            words = [p for p in parts if not re.match(r'\s+', p)]
            spaces = re.findall(r'\s+', corrected)
            if not words:
                shuffled = corrected
            else:
                shuffled_words = random.sample(words, len(words))
                # naive reassembly (may lose original spacing but ok as fallback)
                shuffled = " ".join(shuffled_words)

        clean_sentences.append({
            "correct": corrected,
            "shuffled": shuffled
        })

    if not clean_sentences:
        print("formMakeASentence: no valid sentences")
        return None

    return {
        "title": title.strip(),
        "sentences": clean_sentences
    }




def create_task_instance(user, task_type, task_data, section_obj):
    if user is None:
        return None
    """
    –°–æ–∑–¥–∞—ë—Ç BaseTask —Å –ø—Ä–∏–≤—è–∑–∫–æ–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤,
    –∏–∑–≤–ª–µ–∫–∞–µ–º—ã—Ö –ø–æ URL –∏–∑ payloads, –∏ —Å—á–∏—Ç–∞–µ—Ç –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö.
    """
    from django.core.exceptions import ObjectDoesNotExist

    model_map = {
        "WordList": WordList,
        "MatchUpTheWords": MatchUpTheWords,
        "Essay": Essay,
        "Note": Note,
        "SortIntoColumns": SortIntoColumns,
        "MakeASentence": MakeASentence,
        "Unscramble": Unscramble,
        "FillInTheBlanks": FillInTheBlanks,
        "Article": Article,
        "Audio": Audio,
        "Test": Test,
        "TrueOrFalse": TrueOrFalse,
        "LabelImages": LabelImages,
    }

    if task_type not in model_map:
        raise ValueError(f"Unsupported task type: {task_type}")

    model_class = model_map[task_type]

    try:
        # 1. –°–æ–∑–¥–∞—ë–º –ø–æ–¥–º–æ–¥–µ–ª—å
        task_instance = model_class.objects.create(**task_data)
        content_type = ContentType.objects.get_for_model(model_class)

        # 2. –°—á–∏—Ç–∞–µ–º JSON-—á–∞—Å—Ç—å
        json_body = json.dumps(task_data, ensure_ascii=False)
        json_size = len(json_body.encode("utf-8"))

        last_order = BaseTask.objects.filter(section=section_obj).aggregate(
            max_order=Max('order')
        )['max_order'] or 0

        # 3. –°–æ–∑–¥–∞—ë–º BaseTask (size –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ)
        base_task = BaseTask.objects.create(
            section=section_obj,
            order=last_order + 1,
            content_type=content_type,
            object_id=task_instance.id,
            size=1
        )

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        raise

    try:
        # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º media_ids –∏–∑ payloads
        media_ids = extract_media_ids(task_type, task_data)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ media_ids: {e}")
        media_ids = []

    media_size = 0
    for mid in media_ids:
        try:
            media = MediaFile.objects.get(id=mid)
            media.usage += 1
            media.save(update_fields=["usage"])
            base_task.media.add(media)
            media_size += media.size
        except MediaFile.DoesNotExist:
            print(f"[WARNING] MediaFile —Å id={mid} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ media id={mid}: {e}")
            continue

    try:
        # 6. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        total_size = json_size + media_size
        base_task.size = total_size
        base_task.save(update_fields=["size"])

        # 7. –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.update_used_storage(total_size)
        print(f"[DEBUG] Updated user storage by: {total_size} –±–∞–π—Ç")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–≤–æ—Ç—ã: {e}")

    return base_task

def save_autogen_preferences(request, course_id):
    if request.method == "POST":
        data = json.loads(request.body)
        try:
            course_obj = Course.objects.get(id=course_id)
        except Course.DoesNotExist:
            return JsonResponse({"error": "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

        prefs, _ = UserAutogenerationPreferences.objects.get_or_create(course=course_obj)
        prefs.task_types_lexical = data.get('task_types_lexical', {})
        prefs.task_types_listening = data.get('task_types_listening', {})
        prefs.task_types_reading = data.get('task_types_reading', {})
        prefs.task_types_grammar = data.get('task_types_grammar', {})
        prefs.task_types_speaking = data.get('task_types_speaking', {})
        prefs.task_types_other = data.get('task_types_other', {})
        prefs.save()

        return JsonResponse({"status": "ok"})

    return JsonResponse({"error": "Invalid method"}, status=405)

def get_autogen_preferences(request, course_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        course_obj = Course.objects.get(id=course_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        prefs, created = UserAutogenerationPreferences.objects.get_or_create(course=course_obj)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return JsonResponse({
            "task_types_lexical": prefs.task_types_lexical,
            "task_types_listening": prefs.task_types_listening,
            "task_types_reading": prefs.task_types_reading,
            "task_types_grammar": prefs.task_types_grammar,
            "task_types_speaking": prefs.task_types_speaking,
            "task_types_other": prefs.task_types_other,
        })

    except Course.DoesNotExist:
        return JsonResponse({"error": "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)







def normalize(text: str, keep_emojis: bool = False) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç: —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–º–æ–¥–∑–∏),
    —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
    –ó–∞–º–µ–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∫–∞–≤—ã—á–µ–∫, –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ."""

    if not isinstance(text, str):
        return ''

    replacements = {
        # –ê–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø–æ—Ö–æ–∂–∏–µ –∑–Ω–∞–∫–∏
        "‚Äò": "'", "‚Äô": "'", "‚Äõ": "'", " º": "'", "Ôºá": "'", "`": "'",
        # –ö–∞–≤—ã—á–∫–∏
        "‚Äú": '"', "‚Äù": '"', "‚Äû": '"', "‚Äü": '"', "¬´": '"', "¬ª": '"',
        # –ö–∞–≤—ã—á–∫–∏-—ë–ª–æ—á–∫–∏
        "‚Äπ": "'", "‚Ä∫": "'", "‚ùÆ": '"', "‚ùØ": '"',
        # –ó–∞–ø—è—Ç—ã–µ
        "‚Äö": ",", "Ôºå": ",", "ÔΩ§": ",",
        # –¢–æ—á–∫–∏
        "„ÄÇ": ".", "Ôºé": ".", "ÔΩ°": ".",
        # –î–µ—Ñ–∏—Å—ã –∏ —Ç–∏—Ä–µ (–∑–∞–º–µ–Ω–∞ –Ω–∞ –¥–µ—Ñ–∏—Å)
        "‚Äì": "-", "‚Äî": "-", "‚Äï": "-", "‚Äë": "-",  # –≤–∫–ª—é—á–∞—è non-breaking hyphen
        # –ü—Ä–æ–±–µ–ª—ã (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª)
        "\u00A0": " ",  # no-break space
        "\u2000": " ", "\u2001": " ", "\u2002": " ", "\u2003": " ",
        "\u2004": " ", "\u2005": " ", "\u2006": " ", "\u2007": " ",
        "\u2008": " ", "\u2009": " ", "\u200A": " ",
        "\u202F": " ", "\u205F": " ", "\u3000": " ",
        # –ú–Ω–æ–≥–æ—Ç–æ—á–∏—è –Ω–∞ —Ç–æ—á–∫—É
        "‚Ä¶": "...",
        # –°–∏–º–≤–æ–ª—ã –ø—Ä–æ—Ü–µ–Ω—Ç–∞, –∞–º–ø–µ—Ä—Å–∞–Ω—Ç–∞ –∏ —Ç.–ø. –º–æ–∂–Ω–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é —Ä–∞—Å—à–∏—Ä—è—Ç—å
    }

    for orig, repl in replacements.items():
        text = text.replace(orig, repl)

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è "won't" -> "will not"
    text = re.sub(r"\bwon't\b", "will not", text, flags=re.IGNORECASE)

    # –ó–∞–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è n't –Ω–∞ not
    text = re.sub(r"n't\b", " not", text, flags=re.IGNORECASE)

    # I'm -> I am
    text = re.sub(r"\bI'm\b", "I am", text, flags=re.IGNORECASE)

    # you're, we're, they're -> you are, we are, they are
    text = re.sub(r"\b(\w+)'re\b", r"\1 are", text, flags=re.IGNORECASE)

    # he's, she's, it's, what's, who's, where's, how's
    def replace_s(match):
        word = match.group(1).lower()
        if word in ['he', 'she', 'it', 'that', 'what', 'where', 'who', 'how', 'there']:
            return match.group(1) + " is"
        else:
            return match.group(1)

    text = re.sub(r"\b(\w+)'s\b", replace_s, text, flags=re.IGNORECASE)

    # let's -> let us
    text = re.sub(r"\blet's\b", "let us", text, flags=re.IGNORECASE)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    if keep_emojis:
        emoji_pattern = r"[^\w\s" \
                        r"\U0001F600-\U0001F64F" \
                        r"\U0001F300-\U0001F5FF" \
                        r"\U0001F680-\U0001F6FF" \
                        r"\U0001F1E0-\U0001F1FF" \
                        r"\U00002700-\U000027BF" \
                        r"\U0001F900-\U0001F9FF" \
                        r"\U00002600-\U000026FF" \
                        r"\U00002B50" \
                        r"]+"
        text = re.sub(emoji_pattern, "", text)
    else:
        text = re.sub(r"[^\w\s]", "", text)

    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    text = re.sub(r"\s+", " ", text)

    return text.strip().lower()

def handleLabelimagesAnswer(object, answer):
    """
    object.images = [
        {"url": "...", "label": "dance"},
        ...
    ]

    answer = {
        "image_index": 0,
        "label": "dance"
    }
    """
    try:
        image = object.images[answer['image_index']]
        return normalize(image['label'].strip()) == normalize(answer['label'].strip())
    except (IndexError, KeyError, AttributeError):
        return False

def handleMakeasentenceAnswer(object, answer):
    """
    answer = {
        sentenceIndex: 0,      # –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
        word_index: 0,          # –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–º (shuffled)
        gap_index: 2             # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º (correct)
    }
    """
    sentence_index = answer['sentenceIndex']
    word_index = answer['word_index']
    gap_index = answer['gap_index']

    try:
        sentence_obj = object.sentences[sentence_index]
        correct_words = sentence_obj['correct'].split()
        shuffled_words = sentence_obj['shuffled'].split()

        if word_index >= len(shuffled_words) or gap_index >= len(correct_words):
            return False

        word_from_shuffled = shuffled_words[word_index]
        expected_word_in_correct = correct_words[gap_index]

        return normalize(word_from_shuffled, True) == normalize(expected_word_in_correct, True)
    except (IndexError, KeyError):
        return False

def handleUnscrambleAnswer(object, answer):
    """
    answer = {
        wordIndex: 0,      // –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
        letter_index: 0,      // –∏–Ω–¥–µ–∫—Å –±—É–∫–≤—ã –≤ shuffled_word
        gap_index: 2         // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–ª–æ–≤–µ
    }
    """
    word_index = answer['word_index']
    gap_index = answer['gap_index']
    letter_index = answer['letter_index']

    try:
        target_word = object.words[word_index]
        correct_letter = target_word['word'][gap_index]
        provided_letter = target_word['shuffled_word'][letter_index]

        return normalize(correct_letter, True) == normalize(provided_letter, True)
    except (IndexError, KeyError):
        return False

def handleTestAnswer(task_object, answer):
    q_index = answer.get("qIndex")
    a_index = answer.get("aIndex")

    if not isinstance(q_index, int) or not isinstance(a_index, int):
        return False

    try:
        return bool(task_object.questions[q_index]["answers"][a_index]["is_correct"])
    except (IndexError, KeyError, TypeError):
        return False

def handleTrueFalseAnswer(task_object, answer):
    index = answer.get("statement_index")
    selected = answer.get("selected_answer", "").strip().lower()

    if not isinstance(index, int) or selected not in ["true", "false"]:
        return False

    try:
        correct = "true" if task_object["statements"][index]["is_true"] else "false"
        return selected == correct
    except (IndexError, KeyError, TypeError):
        return False

def handleFillintheblanksAnswer(object, answer):
    """
    content ‚Äî HTML-—Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        'The [wolf] is a wild animal...'
    answer ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'index': 0, 'answer': 'wolf'}
    """
    index = answer.get('index')
    user_input = answer.get('answer', '').strip()

    if index is None or not user_input:
        return False

    # –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    clean_text = unescape(re.sub(r'<[^>]+>', '', object.text))

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –≤–∏–¥–µ [word]
    correct_answers = re.findall(r'\[(.+?)\]', clean_text)

    if index >= len(correct_answers):
        return False

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    correct_word = normalize(correct_answers[index])
    user_word = normalize(user_input)

    return user_word == correct_word

def handleMatchupthewordsAnswer(object, answer):
    """
    object ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞ [{'card1': 'read', 'card2': '—á–∏—Ç–∞—Ç—å'}, ...]
    answer ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'card 1': 'read', 'card 2': '—á–∏—Ç–∞—Ç—å'}
    """
    print(answer)
    card1 = answer.get('card 1')
    card2 = answer.get('card 2')

    for pair in object.pairs:
        if normalize(pair.get('card1'), True) == normalize(card1, True) and normalize(pair.get('card2'), True) == normalize(card2, True):
            return True
    return False

def handleSortintocolumnsAnswer(object, answer):
    column_name = answer.get('column_name')
    word = answer.get('word')

    is_correct = False
    for category in object.columns:
        if category['name'] == column_name:
            is_correct = word in category['words']
            break

    return is_correct

def check_answer(task_id, answer):
    task = get_object_or_404(BaseTask, id=task_id)
    task_type = task.content_type.model

    # Essay –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    if task_type == "essay":
        return True

    # –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ content_type (–Ω–∞–ø—Ä–∏–º–µ—Ä, handleFillintheblanksAnswer)
    handler_name = f"handle{task_type.capitalize()}Answer"
    handler_func = globals().get(handler_name)

    if not callable(handler_func):
        return "undefined"

    return handler_func(task.content_object, answer)

def calculate_max_score(task_obj):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
    content = task_obj.content_object
    task_type = task_obj.content_type.model

    if task_type == 'matchupthewords':
        return len(content.pairs)

    elif task_type == 'fillintheblanks':
        clean_text = unescape(re.sub(r'<[^>]+>', '', content.text))
        return len(re.findall(r'\[(.+?)\]', clean_text))

    elif task_type == 'test':
        return sum(1 for question in content.questions if any(ans['is_correct'] for ans in question['answers']))

    elif task_type == 'trueorfalse':
        return len(content.statements)

    elif task_type == 'labelimages':
        return len(content.images)

    elif task_type == 'unscramble':
        words = [word['word'] for word in content.words]
        total_length = sum(len(word) for word in words)  # –û–±—â–∞—è –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö —Å–ª–æ–≤
        print(words, total_length)
        return total_length

    elif task_type == 'makeasentence':
        return sum(len(sentence['correct'].split()) for sentence in content.sentences)

    elif task_type == 'sortintocolumns':
        return sum(len(col['words']) for col in content.columns)

    return 10


def receiveComplexTestCheck(task_id, user_answer, content):
    try:
        print("[ComplexTest] start")

        if not user_answer.answer_data:
            print("[ComplexTest] no answers saved yet")
            return JsonResponse({
                'status': 'error',
                'message': 'No answers saved yet. Send individual answers first or sync state.',
                'expected': list(range(len(content.questions))),
                'received': []
            }, status=400)

        # dedupe ‚Äî –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ values —É–∫–∞–∂—É—Ç –Ω–∞ —Ç–µ –∂–µ dict-—ã, —á—Ç–æ –≤ user_answer.answer_data
        cleaned_raw = deduplicate_by_index(user_answer.answer_data, 'qIndex') or {}
        cleaned = {int(k): v for k, v in cleaned_raw.items()}

        all_q_indexes = set(range(len(content.questions)))
        received_indexes = set(cleaned.keys())
        print(f"[ComplexTest] expected_indexes={sorted(all_q_indexes)}, received_indexes={sorted(received_indexes)}")
        if all_q_indexes != received_indexes:
            return JsonResponse({
                'status': 'error',
                'message': 'Not all questions answered',
                'expected': sorted(list(all_q_indexes)),
                'received': sorted(list(received_indexes))
            }, status=400)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ in-place (–Ω–µ —É–¥–∞–ª—è–µ–º –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫)
        correct_count = 0
        incorrect_count = 0
        results = []

        for idx in sorted(cleaned.keys()):
            entry = cleaned[idx]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ dict –≤–Ω—É—Ç—Ä–∏ user_answer.answer_data
            is_correct = handleTestAnswer(content, entry['answer'])
            entry['is_correct'] = is_correct
            entry['counted'] = True
            results.append(is_correct)
            if is_correct:
                correct_count += 1
            else:
                incorrect_count += 1

            # safety: –µ—Å–ª–∏ dedupe –≤–µ—Ä–Ω—É–ª –∫–æ–ø–∏—é (–∞ –Ω–µ —Å—Å—ã–ª–∫—É), –æ–±–Ω–æ–≤–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º
            if entry not in user_answer.answer_data:
                # –∏—â–µ–º –ø–æ timestamp -> –∑–∞–º–µ–Ω—è–µ–º/–¥–æ–ø–æ–ª–Ω—è–µ–º
                ts = entry.get('timestamp')
                replaced = False
                if ts:
                    for i, orig in enumerate(user_answer.answer_data):
                        if orig.get('timestamp') == ts:
                            user_answer.answer_data[i].update(entry)
                            replaced = True
                            break
                if not replaced:
                    # –Ω–∞ —Ö—É–¥–æ–π –∫–æ–Ω–µ—Ü ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é)
                    user_answer.answer_data.append(entry)

        user_answer.correct_answers = correct_count
        user_answer.incorrect_answers = incorrect_count
        user_answer.save()
        print("[ComplexTest] updated answer_data (kept history):", user_answer.answer_data)

        return JsonResponse({
            'status': 'success',
            'isCorrect': results,
            'task_id': task_id,
            'correct_count': correct_count,
            'incorrect_count': incorrect_count,
            'max_score': user_answer.max_score,
            'answer': [entry['answer'] for entry in user_answer.answer_data]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        })

    except Exception as e:
        import traceback
        print("[ComplexTest] ERROR:", e)
        traceback.print_exc()
        return JsonResponse({'status': 'error', 'message': str(e), 'traceback': traceback.format_exc()}, status=500)


def receiveComplexTrueFalseCheck(task_id, user_answer, content):
    try:
        print("[ComplexTF] start")

        if not user_answer.answer_data:
            print("[ComplexTF] no answers saved yet")
            return JsonResponse({
                'status': 'error',
                'message': 'No answers saved yet. Send individual answers first or sync state.',
                'expected': list(range(len(content.statements))),
                'received': []
            }, status=400)

        cleaned_raw = deduplicate_by_index(user_answer.answer_data, 'index') or {}
        cleaned = {int(k): v for k, v in cleaned_raw.items()}

        all_indexes = set(range(len(content.statements)))
        received_indexes = set(cleaned.keys())
        print(f"[ComplexTF] expected_indexes={sorted(all_indexes)}, received_indexes={sorted(received_indexes)}")
        if all_indexes != received_indexes:
            return JsonResponse({
                'status': 'error',
                'message': 'Not all statements answered',
                'expected': sorted(list(all_indexes)),
                'received': sorted(list(received_indexes))
            }, status=400)

        results = []
        correct_count = 0
        incorrect_count = 0

        for idx in sorted(cleaned.keys()):
            entry = cleaned[idx]  # –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª ‚Äî –º—ã –æ–±–Ω–æ–≤–∏–º –µ–≥–æ in-place
            try:
                val = entry['answer']['value']
            except Exception:
                return JsonResponse({'status': 'error', 'message': f'Invalid answer format for index {idx}'}, status=400)

            correct_value = content.statements[int(idx)]['is_true']
            is_correct = (str(val).lower() == str(correct_value).lower())

            entry['is_correct'] = is_correct
            entry['counted'] = True
            results.append(is_correct)

            if is_correct:
                correct_count += 1
            else:
                incorrect_count += 1

            # safety: –µ—Å–ª–∏ entry –Ω–µ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç, –æ–±–Ω–æ–≤–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ timestamp –∏–ª–∏ –¥–æ–±–∞–≤–∏–º
            if entry not in user_answer.answer_data:
                ts = entry.get('timestamp')
                replaced = False
                if ts:
                    for i, orig in enumerate(user_answer.answer_data):
                        if orig.get('timestamp') == ts:
                            user_answer.answer_data[i].update(entry)
                            replaced = True
                            break
                if not replaced:
                    user_answer.answer_data.append(entry)

        user_answer.correct_answers = correct_count
        user_answer.incorrect_answers = incorrect_count
        user_answer.save()
        print("[ComplexTF] updated answer_data (kept history):", user_answer.answer_data)

        return JsonResponse({
            'status': 'success',
            'isCorrect': results,
            'task_id': task_id,
            'correct_count': correct_count,
            'incorrect_count': incorrect_count,
            'max_score': user_answer.max_score,
            'answer': user_answer.answer_data
        })

    except Exception as e:
        import traceback
        print("[ComplexTF] ERROR:", e)
        traceback.print_exc()
        return JsonResponse({'status': 'error', 'message': str(e), 'traceback': traceback.format_exc()}, status=500)



def deduplicate_by_index(answer_data, key_name='index'):
    result = {}
    for entry in answer_data:
        ans = entry.get('answer', {})
        if isinstance(ans, dict) and key_name in ans:
            try:
                idx = int(ans[key_name])
                result[idx] = entry
            except (ValueError, TypeError):
                continue
    return result

def parse_request_body(request):
    try:
        data = json.loads(request.body)
    except json.JSONDecodeError:
        return None, JsonResponse({'status': 'error', 'message': 'Invalid JSON'}, status=400)

    task_id = data.get('task_id')
    answer = data.get('answer')
    classroom_id = data.get('classroom_id')
    user_id = data.get('user_id')
    answer_type = data.get('type', 'fast')

    if not task_id or answer is None:
        return None, JsonResponse({'status': 'error', 'message': 'Missing task_id or answer'}, status=400)

    return {
        'task_id': task_id,
        'answer': answer,
        'classroom_id': classroom_id,
        'user_id': user_id,
        'type': answer_type
    }, None

def authorize_user(request_user, user_id, classroom_id, task_obj):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç user –∏ classroom
    user = get_object_or_404(User, id=user_id)
    classroom = None
    if classroom_id:
        classroom = get_object_or_404(Classroom, id=classroom_id)
        if request_user != user and request_user not in classroom.teachers.all() and request_user not in classroom.students.all():
            return None, None, JsonResponse({'status': 'error', 'message': 'Not authorized'}, status=403)
    else:
        # –î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –≤–ª–∞–¥–µ–ª—å—Ü—É
        course_owner = task_obj.section.lesson.course.user
        if request_user != course_owner:
            return None, None, JsonResponse({'status': 'error', 'message': 'Unauthorized access'}, status=403)
    return user, classroom, None

from django.db import IntegrityError

def get_user_answer(user, classroom, task_obj):
    try:
        ua, _ = UserAnswer.objects.get_or_create(
            classroom=classroom,
            task=task_obj,
            user=user,
            defaults={
                'answer_data': [],
                'correct_answers': 0,
                'incorrect_answers': 0,
                'max_score': calculate_max_score(task_obj),
            }
        )
    except IntegrityError:
        ua = UserAnswer.objects.get(classroom=classroom, task=task_obj, user=user)
    return ua

def handle_fast_answer(task_id, answer, user_answer):
    timestamp = timezone.now().isoformat()
    is_correct = check_answer(task_id, answer)
    entry = {
        'answer': answer,
        'is_correct': is_correct,
        'timestamp': timestamp,
        'counted': False  # –ø–æ –∑–∞–¥–∞—á–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
    }

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    for i, e in enumerate(user_answer.answer_data):
        if e['answer'] == answer:
            del user_answer.answer_data[i]
            break

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π (–Ω–µ—É—á—Ç—ë–Ω–Ω—ã–π) –æ—Ç–≤–µ—Ç
    user_answer.answer_data.append(entry)
    user_answer.save()
    return entry

def handle_plain_answer(answer, user_answer):
    timestamp = timezone.now().isoformat()
    print(answer)
    entry = {
        'answer': answer,
        'is_correct': 'undefined',
        'timestamp': timestamp,
        'counted': False
    }

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    for i, e in enumerate(user_answer.answer_data):
        if e['answer'] == answer:
            del user_answer.answer_data[i]
            break

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –Ω–µ—É—á—Ç—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    user_answer.answer_data.append(entry)
    user_answer.save()
    return entry

@require_POST
@ratelimit(key='ip', rate='100/m', block=True)
def receiveAnswer(request):
    try:
        print("=== receiveAnswer START ===")
        print("Raw body:", request.body)
        print("Content-Type:", request.content_type)

        # 1) parse
        parsed, error = parse_request_body(request)
        if error:
            print("[STEP 1] Parse error")
            return error

        task_id = parsed['task_id']
        answer = parsed['answer']
        classroom_id = parsed.get('classroom_id')
        user_id = parsed.get('user_id')  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
        answer_type = parsed['type']
        print(f"[STEP 1] Parsed data ‚Üí task_id={task_id}, type={answer_type}, user_id={user_id}, classroom_id={classroom_id}, answer={answer}")

        # 2) get task
        task_obj = get_object_or_404(BaseTask, id=task_id)
        print(f"[STEP 2] Task loaded (id={task_obj.id}, type={task_obj.content_type.model})")

        # 3) handle anonymous users
        user = get_object_or_404(User, id=user_id) if user_id else None
        if task_obj.section.lesson.is_public and not user:
            print("[STEP 3] Anonymous user mode")
            if answer_type == 'fast':
                is_correct = check_answer(task_id, answer)
                return JsonResponse({'status': 'success', 'isCorrect': is_correct, 'task_id': task_id,
                                     'received_answer': answer, 'correct_count': 0, 'incorrect_count': 0, 'max_score': 1})
            elif answer_type == 'plain':
                return JsonResponse({'status': 'success', 'isCorrect': True, 'task_id': task_id,
                                     'received_answer': answer, 'correct_count': 0, 'incorrect_count': 0, 'max_score': 1})
            else:
                print("[STEP 3] Unsupported answer type for anonymous:", answer_type)
                return JsonResponse({'status': 'error', 'message': 'Answer type not supported for anonymous users'}, status=400)

        # 4) authorize classroom
        classroom = None
        if classroom_id:
            try:
                classroom = Classroom.objects.get(id=classroom_id)
                print(f"[STEP 4] Classroom found id={classroom_id}")
            except Classroom.DoesNotExist:
                print(f"[STEP 4] Classroom not found id={classroom_id}")
                return JsonResponse({'status': 'error', 'message': 'Classroom not found'}, status=404)

        # 5) no classroom shortcut
        if not classroom:
            print("[STEP 5] No classroom mode")
            if answer_type in ['complex', 'plain']:
                return JsonResponse({'status': 'success', 'isCorrect': True, 'task_id': task_id,
                                     'received_answer': answer, 'correct_count': 0, 'incorrect_count': 0, 'max_score': 1})
            is_correct = check_answer(task_id, answer)
            return JsonResponse({'status': 'success', 'isCorrect': is_correct, 'task_id': task_id,
                                 'received_answer': answer, 'correct_count': 0, 'incorrect_count': 0, 'max_score': 1})

        # 6) get or create user_answer
        user_answer = get_user_answer(user, classroom, task_obj)
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º answer_data —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        if not user_answer.answer_data:
            user_answer.answer_data = []
        content = task_obj.content_object
        task_type = task_obj.content_type.model
        print(f"[STEP 6] UserAnswer created ‚Üí task_type={task_type}, existing_saved={len(user_answer.answer_data)}")

        # 7) dispatch by type
        if answer_type == 'fast':
            print("[STEP 7] Fast answer")
            entry = handle_fast_answer(task_id, answer, user_answer)
        elif answer_type == 'plain':
            print("[STEP 7] Plain answer")
            entry = handle_plain_answer(answer, user_answer)
        elif answer_type == 'complex':
            print(f"[STEP 7] Complex answer dispatch ‚Üí task_type={task_type}, answer={answer}")

            is_check = isinstance(answer, dict) and answer.get("flag") == "check"
            is_submission = isinstance(answer, dict) and ('index' in answer or 'qIndex' in answer)

            # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–∏–Ω–¥–µ–∫—Å) ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if is_submission:
                ans = answer if isinstance(answer, dict) else {'value': answer}
                entry = {
                    'answer': ans,
                    'timestamp': timezone.now().isoformat(),
                    'counted': False
                }
                if 'index' in ans:
                    entry['index'] = str(ans['index'])
                if 'qIndex' in ans:
                    entry['qIndex'] = str(ans['qIndex'])

                try:
                    # atomic + select_for_update –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
                    if getattr(user_answer, 'id', None):
                        with transaction.atomic():
                            ua = type(user_answer).objects.select_for_update().get(id=user_answer.id)
                            if not ua.answer_data:
                                ua.answer_data = []
                            ua.answer_data.append(entry)
                            ua.save()
                            saved_ua = ua
                    else:
                        # –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–æ–≤—ã–π –±–µ–∑ id ‚Äì –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        user_answer.answer_data.append(entry)
                        user_answer.save()
                        saved_ua = user_answer

                    print(f"[STEP 7] Saved complex answer entry: {entry}")
                except Exception as e:
                    print("[STEP 7] Failed to save answer:", e)
                    traceback.print_exc()
                    return JsonResponse({'status': 'error', 'message': 'Failed to save answer'}, status=500)

                # –µ—Å–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏—à—ë–ª —Ñ–ª–∞–≥ check ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ
                if is_check:
                    # –æ–±–Ω–æ–≤–∏–º user_answer —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                    ua_to_check = saved_ua
                    if task_type == 'test':
                        return receiveComplexTestCheck(task_id, ua_to_check, content)
                    elif task_type == 'trueorfalse':
                        return receiveComplexTrueFalseCheck(task_id, ua_to_check, content)
                    else:
                        print("[STEP 7] Unsupported complex task type:", task_type)
                        return JsonResponse({'status': 'error', 'message': 'Unsupported task type for complex check'}, status=400)

                # –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                return JsonResponse({
                    'status': 'success',
                    'message': 'Answer saved',
                    'saved_entry': entry,
                    'total_saved': len(saved_ua.answer_data)
                })

            # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ check ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if is_check:
                if task_type == 'test':
                    return receiveComplexTestCheck(task_id, user_answer, content)
                elif task_type == 'trueorfalse':
                    return receiveComplexTrueFalseCheck(task_id, user_answer, content)
                else:
                    print("[STEP 7] Unsupported complex task type:", task_type)
                    return JsonResponse({'status': 'error', 'message': 'Unsupported task type for complex check'}, status=400)

            # –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ payload
            print("[STEP 7] Unknown complex payload:", answer)
            return JsonResponse({'status': 'error', 'message': 'Unknown complex payload'}, status=400)
        else:
            print("[STEP 7] Unknown answer type:", answer_type)
            return JsonResponse({'status': 'error', 'message': 'Unknown answer type'}, status=400)

        # 8) –æ–±—â–∞—è –æ—Ç–¥–∞—á–∞
        print("[STEP 8] Returning success response")
        return JsonResponse({
            'status': 'success',
            'isCorrect': entry['is_correct'],
            'task_id': task_id,
            'received_answer': answer,
            'correct_count': user_answer.correct_answers,
            'incorrect_count': user_answer.incorrect_answers,
            'max_score': user_answer.max_score
        })

    except Exception as e:
        print("=== receiveAnswer ERROR ===", str(e))
        traceback.print_exc()
        return JsonResponse({'status': 'error', 'message': str(e), 'traceback': traceback.format_exc()}, status=500)





@login_required
@ratelimit(key='ip', rate='100/m', block=True)
def getAnswers(request):
    try:
        task_id = request.GET.get('task_id')
        classroom_id = request.GET.get('classroom_id')
        user_id = request.GET.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not all([task_id, classroom_id, user_id]):
            return JsonResponse({
                'status': 'error',
                'message': 'Missing required parameters: task_id, classroom_id or user_id'
            }, status=400)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        try:
            user = User.objects.get(id=user_id)
        except User.DoesNotExist:
            return JsonResponse({
                'status': 'error',
                'message': f'User with id {user_id} does not exist'
            }, status=404)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–¥–∞—á–∏ –∏ –∫–ª–∞—Å—Å–∞
        task_obj = get_object_or_404(BaseTask, id=task_id)
        task_type = task_obj.content_type.model
        classroom_obj = get_object_or_404(Classroom, id=classroom_id)

        if request.user != user and request.user not in classroom_obj.teachers.all() and request.user not in classroom_obj.students.all():
            return JsonResponse({
                'status': 'error',
                'message': 'User does not have access to this task'
            }, status=403)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å UserAnswer –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_answer, created = UserAnswer.objects.get_or_create(
            user=user,
            task=task_obj,
            classroom=classroom_obj,
            defaults={
                'answer_data': [],
                'correct_answers': 0,
                'incorrect_answers': 0,
                'max_score': calculate_max_score(task_obj)
            }
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if task_type in ["test", "trueorfalse"]:
            max_score = user_answer.correct_answers + user_answer.incorrect_answers
        else:
            max_score = user_answer.max_score + user_answer.incorrect_answers
        response_data = {
            'status': 'success',
            'user_id': user.id,
            'task_id': task_id,
            'classroom_id': classroom_id,
            'correct_answers': user_answer.correct_answers,
            'incorrect_answers': user_answer.incorrect_answers,
            'max_score': max_score,
            'answers_history': user_answer.answer_data,
            'last_updated': user_answer.updated_at.isoformat(),
            'is_new_record': created
        }

        return JsonResponse(response_data)

    except Exception as e:
        import traceback
        traceback.print_exc()
        return JsonResponse({
            'status': 'error',
            'message': str(e),
            'details': traceback.format_exc()
        }, status=500)

def delete_answers(request):
    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            task_id = data.get('task_id')
            classroom_id = data.get('classroom_id')
            user_id = data.get('user_id')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if not all([task_id, classroom_id, user_id]):
                return JsonResponse({
                    'status': 'error',
                    'message': 'Missing required parameters: task_id or classroom_id'
                }, status=400)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–¥–∞—á–∏ –∏ –∫–ª–∞—Å—Å–∞
            task_obj = get_object_or_404(BaseTask, id=task_id)
            classroom_obj = get_object_or_404(Classroom, id=classroom_id)
            user = User.objects.get(id=user_id)

            if request.user != user and request.user not in classroom_obj.teachers.all() and request.user not in classroom_obj.students.all():
                return JsonResponse({
                    'status': 'error',
                    'message': 'You are not authorized to delete this answer.'
                }, status=403)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ task_id –∏ classroom_id
            answers_query = UserAnswer.objects.filter(
                task=task_obj,
                classroom=classroom_obj,
                user=user
            )

            # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            deleted_count, _ = answers_query.delete()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            return JsonResponse({
                'status': 'success',
                'message': f'Successfully deleted {deleted_count} answer(s)',
                'deleted_count': deleted_count
            })

        except Exception as e:
            import traceback
            traceback.print_exc()
            return JsonResponse({
                'status': 'error',
                'message': str(e),
                'details': traceback.format_exc()
            }, status=500)

    else:
        return JsonResponse({
            'status': 'error',
            'message': 'Invalid request method. Use POST.'
        }, status=405)

def reorder_tasks(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            if not data.get('tasks'):
                return JsonResponse(
                    {"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö"},
                    status=400
                )

            with transaction.atomic():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                task_ids = [item['id'] for item in data['tasks']]
                existing_tasks = BaseTask.objects.filter(id__in=task_ids)
                existing_ids = set(str(task.id) for task in existing_tasks)

                task_to_check = existing_tasks[0]
                if task_to_check.section.lesson.course.user != request.user:
                    return JsonResponse(
                        {"status": "error", "message": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"},
                        status=403
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                for item in data['tasks']:
                    if str(item['id']) not in existing_ids:
                        return JsonResponse(
                            {"status": "error", "message": f"–ó–∞–¥–∞—á–∞ {item['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
                            status=404
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                for item in data['tasks']:
                    BaseTask.objects.filter(id=item['id']).update(order=item['order'])

                return JsonResponse({"status": "success"})

        except Exception as e:
            return JsonResponse(
                {"status": "error", "message": str(e)},
                status=400
            )

@ratelimit(key='ip', rate='30/m', block=True)
def edge_tts_view(request):
    if request.method != 'POST':
        return JsonResponse({'error': 'Only POST allowed'}, status=405)

    try:
        payload = json.loads(request.body)
        text = payload.get('text', '')
        voice = payload.get('voice', 'en-US-JennyNeural')
        rate = payload.get('rate', '+0%')
        pitch = payload.get('pitch', '+0Hz')

        if not text or not (3 <= len(text) <= 5000):
            return JsonResponse({'error': 'Text must be 3‚Äì5000 chars'}, status=400)

        # –°–æ–∑–¥–∞—ë–º celery-–∑–∞–¥–∞—á—É
        task = generate_audio_task.delay(
            user_id=request.user.id,
            text=text,
            voice=voice,
            rate=rate,
            pitch=pitch
        )

        return JsonResponse({'task_id': task.id})

    except Exception as e:
        print("edge_tts_view error:", e)
        return JsonResponse({'error': str(e)}, status=500)

@require_GET
def edge_tts_status_view(request, task_id):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫—É
    task_id_str = str(task_id)
    status = get_audio_task_generation_status(task_id_str)
    return JsonResponse(status)

def get_audio_task_generation_status(task_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∫–ª—é—á–∞–º–∏: state, info (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).
    """
    result = AsyncResult(task_id)
    response = {
        'state': result.state,
    }
    if result.state == states.FAILURE:
        response['error'] = str(result.info) if result.info else 'Unknown error'
    elif result.state == states.SUCCESS:
        response['result'] = result.result
    elif result.state == states.PENDING:
        response['info'] = '–ó–∞–¥–∞—á–∞ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    else:
        response['info'] = result.info or ''
    return response




def check_classroom_access(request, classroom_obj):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Å—É –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—é –∫–ª–∞—Å—Å–∞:
    - –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —É—á–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç Premium/Maximum.
    - –î–ª—è —É—á–∏—Ç–µ–ª–µ–π: –µ—Å–ª–∏ —É —É—á–∏—Ç–µ–ª—è 0 –∏–ª–∏ 1 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å ‚Äî –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–∞–∂–µ –ø—Ä–∏ Free/Basic.
      –ù–æ –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (expired) ‚Äî –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.
      –ï—Å–ª–∏ —É —É—á–∏—Ç–µ–ª—è >1 –∫–ª–∞—Å—Å–æ–≤ –∏ —Ç–∞—Ä–∏—Ñ Free/Basic (–∏–ª–∏ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–∞) ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω, –∏–Ω–∞—á–µ - HttpResponse (render).
    """

    user = request.user

    # -----------------------
    # 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—Ç—É–¥–µ–Ω—Ç –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–µ—Ä–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è
    # -----------------------
    if classroom_obj and user in classroom_obj.students.all() and user not in classroom_obj.teachers.all():
        # –î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ –ø–µ—Ä–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è
        teachers = classroom_obj.teachers.all()
        if teachers:
            first_teacher = teachers[0]
            try:
                teacher_tariff = first_teacher.tariff
                if teacher_tariff and teacher_tariff.is_active() and teacher_tariff.tariff_type not in (TariffType.FREE,
                                                                                                        TariffType.BASIC):
                    return None
                else:
                    return render(request, 'access_error/teacher_tariff_required.html')
            except UserTariff.DoesNotExist:
                return render(request, 'access_error/teacher_tariff_required.html')
        return None

    # -----------------------
    # 2) –î–ª—è —É—á–∏—Ç–µ–ª—è (–∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞) ‚Äî —Å—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —É –Ω–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤
    # -----------------------
    try:
        teacher_class_count = Classroom.objects.filter(teachers=user).count()
    except Exception:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∞
        teacher_class_count = 0

    # -----------------------
    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç–∞—Ä–∏—Ñ–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # -----------------------
    try:
        tariff = user.tariff
    except UserTariff.DoesNotExist:
        # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç:
        #    - –µ—Å–ª–∏ —É —É—á–∏—Ç–µ–ª—è 0 –∏–ª–∏ 1 –∫–ª–∞—Å—Å–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º (–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        #    - –∏–Ω–∞—á–µ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ç–∞—Ä–∏—Ñ–∞–º
        if teacher_class_count <= 1:
            return None
        return render(request, 'access_error/pricing_for_teacher.html')

    # -----------------------
    # 4) –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –µ—Å—Ç—å, –Ω–æ –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω -> –∑–∞–ø—Ä–µ—â–∞–µ–º (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–ª-–≤–∞ –∫–ª–∞—Å—Å–æ–≤)
    # -----------------------
    if not tariff.is_active():
        return render(request, 'access_error/upgrade_subscription.html')

    # -----------------------
    # 5) –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω:
    #    - –µ—Å–ª–∏ —É —É—á–∏—Ç–µ–ª—è 0 –∏–ª–∏ 1 –∫–ª–∞—Å—Å–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º (–¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ Free/Basic)
    #    - –∏–Ω–∞—á–µ (—É >1 –∫–ª–∞—Å—Å–æ–≤): –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ Free/Basic -> —Ç—Ä–µ–±—É–µ–º –æ–ø–ª–∞—Ç—É, –∏–Ω–∞—á–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º
    # -----------------------
    if teacher_class_count <= 1:
        return None

    if tariff.tariff_type in (TariffType.FREE, TariffType.BASIC):
        return render(request, 'access_error/pricing_for_teacher.html')

    # –í—Å—ë –æ–∫
    return None

@login_required
def choose_classroom(request, lesson_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ —Å AJAX‚Äë–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    lesson_instance = get_object_or_404(Lesson, id=lesson_id)

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
    resp = check_classroom_access(request, None)
    if resp:
        return resp
    # --------------------------------------

    if request.method == "POST":
        selected_class_id = request.POST.get("classroom_id")
        if selected_class_id:
            classroom = get_object_or_404(Classroom, id=selected_class_id)
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —É—á–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
            if request.user not in classroom.teachers.all():
                return JsonResponse(
                    {"success": False, "message": "You are not a teacher of this classroom"},
                    status=403
                )
            classroom.lesson = lesson_instance
            classroom.save()
            return redirect("classroom_view", classroom_id=selected_class_id)
        return JsonResponse({"success": False})

    # GET ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞
    classrooms = request.user.classroom_set.all()
    return render(request, 'choose_classroom.html', {
        'lesson': lesson_instance,
        'classrooms': classrooms,
    })


def can_user_create_a_classroom(user):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å.
    """
    try:
        tariff = user.tariff
    except AttributeError:
        # –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ free
        return Classroom.objects.filter(teachers=user).count() == 0

    # –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –±–∞–∑–æ–≤—ã–π (unpaid)
    if not tariff.is_active() or tariff.status == TariffStatus.UNPAID:
        return False

    # —Ç–∞—Ä–∏—Ñ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π -> —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤
    if tariff.tariff_type == TariffType.FREE:
        return Classroom.objects.filter(teachers=user).count() == 0

    # —Ç–∞—Ä–∏—Ñ premium –∏–ª–∏ maximum -> –≤—Å–µ–≥–¥–∞ True
    if tariff.tariff_type in [TariffType.PREMIUM, TariffType.MAXIMUM]:
        return True

    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–∞–µ–º
    return False

# ----------------- —Ñ—É–Ω–∫—Ü–∏—è —Å —É—Ä–æ–∫–æ–º -----------------
@login_required
@ratelimit(key='ip', rate='10/m', block=True)
def create_classroom_with_lesson(request, lesson_id):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —É—Ä–æ–∫–æ–º.
    """
    lesson_obj = get_object_or_404(Lesson, id=lesson_id)

    if not can_user_create_a_classroom(request.user):
        return render(request, 'access_error/pricing_for_teacher.html')

    classroom, errors = _create_classroom(request, lesson_obj=lesson_obj)
    if not classroom:
        # –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
            return JsonResponse({"success": False, "errors": errors}, status=400)
        return render(request, 'classroom/create_classroom.html', {
            'form': ClassroomForm(request.POST or None),
            'lesson': lesson_obj
        })

    # –£—Å–ø–µ—Ö
    redirect_url = reverse("classroom_view", args=[classroom.id])
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({"success": True, "redirect_url": redirect_url})
    return redirect(redirect_url)


# ----------------- —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ —É—Ä–æ–∫–∞ -----------------
@login_required
@ratelimit(key='ip', rate='10/m', block=True)
def create_classroom_without_lesson(request):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –≤–º–µ—Å—Ç–æ —à–∞–±–ª–æ–Ω–∞.
    """
    if request.method != "POST":
        return JsonResponse({"error": "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω"}, status=405)

    if not can_user_create_a_classroom(request.user):
        return JsonResponse({
            "success": False,
            "message": "–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã."
        }, status=403)

    classroom, errors = _create_classroom(request, lesson_obj=None)
    if not classroom:
        return JsonResponse({"success": False, "errors": errors}, status=400)

    return JsonResponse({
        "success": True,
        "message": "–ö–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        "redirect_url": reverse("classroom_view", args=[classroom.id])
    })


# ----------------- –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ -----------------
def _create_classroom(request, lesson_obj=None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Classroom.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (classroom, None) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ (None, form.errors) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    if request.method != 'POST':
        return None, {"method": "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω"}

    form = ClassroomForm(request.POST)
    if not form.is_valid():
        return None, form.errors

    classroom = form.save(commit=False)
    if lesson_obj:
        classroom.lesson = lesson_obj
    classroom.features = {"copying": True}  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    classroom.save()
    classroom.teachers.add(request.user)

    return classroom, None

@login_required
@ratelimit(key='ip', rate='10/m', block=True)
def classroom_view(request, classroom_id):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        classroom_obj = get_object_or_404(Classroom, id=classroom_id)
        lesson_obj = classroom_obj.lesson

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É
        try:
            access_check = check_classroom_access(request, classroom_obj)
            if access_check:
                return access_check
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            students = classroom_obj.students.all()
            teachers = classroom_obj.teachers.all()

            if request.user in teachers:
                user_role = "teacher"
            elif request.user in students:
                user_role = "student"
            else:
                return HttpResponseNotFound("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏: {str(e)}")
            return HttpResponseServerError("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—Ä–æ–∫–∞
        if not lesson_obj:
            if user_role == "teacher":
                course_obj = getattr(classroom_obj, 'course', None)
                return render(
                    request,
                    'builder/updated_templates/select_lesson_placeholder.html',
                    {
                        'course': course_obj,
                        'classroom': classroom_obj
                    }
                )
            else:
                return HttpResponseNotFound("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π –∏ –∑–∞–¥–∞—á
        try:
            sections = get_sorted_sections(lesson_obj)
            section_ids = [section.id for section in sections]

            section_ordering = Case(
                *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
                output_field=IntegerField()
            )

            tasks = (
                BaseTask.objects
                .filter(section__in=section_ids)
                .select_related('content_type')
                .annotate(section_order=section_ordering)
                .order_by('section_order', 'order')
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π/–∑–∞–¥–∞—á: {str(e)}")
            return HttpResponseServerError("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–∫—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
        section_tasks = [
            {
                'id': sec.id,
                'section_title': sec.name,
                'tasks': [t for t in tasks if t.section_id == sec.id]
            }
            for sec in sections
        ]

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π)
        invitation_link = None
        if user_role == "teacher":
            try:
                invitation_link = request.build_absolute_uri(
                    reverse(
                        "accept_invitation",
                        args=[str(classroom_obj.invitation_code)]
                    )
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏: {str(e)}")

        return render(
            request,
            'builder/updated_templates/classroom.html',
            {
                'classroom_id': classroom_obj.id,
                'classroom': classroom_obj,
                'course_id': lesson_obj.course.id if lesson_obj and lesson_obj.course else None,
                'lesson': lesson_obj,
                'section_list': sections,
                'section_tasks': section_tasks,
                'students': students,
                'teachers': teachers,
                'user_role': user_role,
                'tasks': tasks,
                'mode': 'classroom',
                'user_id': request.user.id,
                "invitation_link": invitation_link,
                "user": request.user,
                "is_new": request.user.is_new,
            })
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ classroom_view: {str(e)}")
        return HttpResponseServerError("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@login_required
def select_lesson_for_course(request, course_id):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –∫–æ–≥–¥–∞ –¥–ª—è –∫—É—Ä—Å–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω —É—Ä–æ–∫.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º –∫–ª–∞—Å—Å–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫—É—Ä—Å.
    """
    course_obj = get_object_or_404(Course, id=course_id)
    classroom = getattr(Course, 'classroom', None)

    if not classroom:
        return HttpResponseForbidden("–ö—É—Ä—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∞—Å—Å—É.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —É—á–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
    if request.user not in classroom.teachers.all():
        return HttpResponseForbidden("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –∫–ª–∞—Å—Å–∞.")

    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–∫–æ–≤/—à–∞–±–ª–æ–Ω–æ–≤
    context = {
        'course': course_obj,
        'classroom': classroom,
    }
    return render(request, 'builder/updated_templates/select_lesson_placeholder.html', context)

@require_POST
def delete_classroom(request, classroom_id):
    classroom = get_object_or_404(Classroom, id=classroom_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ
    if request.user not in classroom.teachers.all():
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)

    try:
        with transaction.atomic():
            classroom.delete()
            return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def toggle_copying(request, classroom_id):
    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –ø–æ ID
            classroom = Classroom.objects.get(id=classroom_id)

            if request.user not in classroom.teachers.all():
                return JsonResponse({
                    'success': False,
                    'error': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É.'
                }, status=403)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            allow_copying = data.get('allow_copying')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ allow_copying –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if allow_copying is None:
                return JsonResponse({
                    'success': False,
                    'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä "allow_copying" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
                }, status=400)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä features["copying"]
            classroom.features['copying'] = allow_copying
            classroom.save()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return JsonResponse({
                'success': True,
                'new_state': allow_copying
            })

        except ObjectDoesNotExist:
            return JsonResponse({
                'success': False,
                'error': '–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            }, status=404)

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ POST
    return JsonResponse({
        'success': False,
        'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.'
    }, status=405)

@login_required
@require_POST
@ratelimit(key='ip', rate='10/m', block=True)
def get_jitsi_token(request):
    try:
        data = json.loads(request.body)

        room = data.get('room', '*')
        user_role = data.get('role', 'student')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'teacher' –∏–ª–∏ 'student'

        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è JWT
        payload = {
            "aud": "jitsi",
            "iss": "jitsi-linguaglow",
            "sub": "jitsi-linguaglow.ru",
            "room": room,
            "exp": int(time.time()) + 3600,
            "context": {
                "user": {
                    "name": request.user.username,
                    "email": request.user.email,
                    "moderator": user_role == "teacher"
                }
            }
        }

        token = jwt.encode(payload, settings.JITSI_APP_SECRET, algorithm="HS256")
        return JsonResponse({"token": token})

    except (json.JSONDecodeError, KeyError):
        return HttpResponseBadRequest("Invalid JSON data")

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

def send_homework_page_view(request, classroom_id):
    classroom_obj = get_object_or_404(Classroom, id=classroom_id)
    lesson_obj = classroom_obj.lesson
    course_obj = lesson_obj.course
    if request.user != course_obj.user and not classroom_obj.teachers.filter(id=request.user.id).exists():
        return HttpResponseForbidden("You do not have access to this lesson.")

    sections = get_sorted_sections(lesson_obj)
    section_ids = [section.id for section in sections]

    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    section_ordering = Case(
        *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
        output_field=IntegerField()
    )

    tasks = BaseTask.objects.filter(section__in=section_ids) \
        .select_related('content_type') \
        .annotate(section_order=section_ordering) \
        .order_by('section_order', 'order')

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ —É—Ä–æ–∫–∞
    existing_homeworks = Homework.objects.filter(
        classroom=classroom_obj,
        lesson=lesson_obj,
    ).values_list('tasks__id', flat=True)

    existing_task_ids = set(existing_homeworks)
    existing_task_ids = [str(task_id) for task_id in existing_task_ids if task_id is not None]

    return render(request, 'builder/updated_templates/homework_select.html', {
        'lesson': lesson_obj,
        'tasks': tasks,
        'classroom': classroom_obj,
        'existing_task_ids': existing_task_ids,
    })


@require_POST
@ratelimit(key='ip', rate='10/m', block=True)
def send_homework(request):
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ –∫–ª–∞—Å—Å–µ –∑–∞–ø–∏—Å—å Homework
    —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'sent' –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏.
    –û–∂–∏–¥–∞–µ—Ç JSON { classroom_id: <uuid>, lesson_id: <uuid>, task_ids: [<uuid>, ...] }
    """
    if request.method != "POST":
        return HttpResponseBadRequest("–¢–æ–ª—å–∫–æ POST")

    try:
        data = json.loads(request.body)
        classroom_id = data['classroom_id']
        lesson_id = data.get('lesson_id')
        task_ids = data.get('task_ids', [])
    except (ValueError, KeyError):
        return HttpResponseBadRequest("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    try:
        classroom = Classroom.objects.get(id=classroom_id)
    except Classroom.DoesNotExist:
        return HttpResponseBadRequest("–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = BaseTask.objects.filter(id__in=task_ids)

    students = classroom.students.all()  # –µ—Å–ª–∏ –µ—Å—Ç—å m2m students
    for student in students:
        hw, created_flag = Homework.objects.get_or_create(
            classroom=classroom,
            student=student,
            lesson_id=lesson_id,
            defaults={'status': 'sent', 'assigned_by': request.user}
        )
        hw.tasks.set(tasks)  # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

    return JsonResponse({
        'created_count': len(hw.tasks.all()),
        'created_ids': [str(task.id) for task in hw.tasks.all()],
    })

@login_required
def homework_view(request, classroom_id, lesson_id):
    classroom_obj = get_object_or_404(Classroom, id=classroom_id)
    lesson_obj = get_object_or_404(Lesson, id=lesson_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    access_resp = check_classroom_access(request, classroom_obj)
    if access_resp:
        return access_resp

    # –†–∞–∑—Ä–µ—à–∞–µ–º –∏ —É—á–∏—Ç–µ–ª—é –∏ —É—á–µ–Ω–∏–∫—É
    is_teacher = request.user in classroom_obj.teachers.all()
    is_student = request.user in classroom_obj.students.all()
    if not (is_teacher or is_student):
        return HttpResponseForbidden("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∞—Å—Å—É.")

    # –ü–æ–¥–±–æ—Ä –¥–æ–º–∞—à–∫–∏
    hw = None
    if is_student:
        try:
            hw = Homework.objects.get(
                classroom=classroom_obj,
                lesson=lesson_obj,
                student=request.user,
                status__in=['sent', 'resent', 'completed', 'checked']
            )
        except Homework.DoesNotExist:
            hw = None
    else:
        hw = Homework.objects.filter(
            classroom=classroom_obj,
            lesson=lesson_obj
        ).first()

    hw_tasks = hw.tasks.select_related('section').all() if hw else []
    section_ids = hw_tasks.values_list('section_id', flat=True).distinct()

    section_ordering = Case(
        *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
        output_field=IntegerField()
    )

    hw_tasks_res = BaseTask.objects.filter(section__in=section_ids) \
        .select_related('content_type') \
        .annotate(section_order=section_ordering) \
        .order_by('section_order', 'order')

    sections = [s for s in get_sorted_sections(lesson_obj) if s.id in section_ids]
    section_tasks = [
        {'id': s.id, 'section_title': s.name, 'tasks': [t for t in hw_tasks if t.section_id == s.id]}
        for s in sections
    ]

    return render(request, 'builder/updated_templates/homework.html', {
        'classroom_id': classroom_obj.id,
        'classroom': classroom_obj,
        'course_id': lesson_obj.course.id,
        'lesson': lesson_obj,
        'section_list': sections,
        'section_tasks': section_tasks,
        'tasks': hw_tasks_res,
        'mode': 'homework',
        'role': 'teacher' if is_teacher else 'student',
        'user_id': hw.student.id if hw else None,
        'students': classroom_obj.students.all(),
        'teachers': classroom_obj.teachers.all(),
        'status': hw.status if hw else None,
        'homework_student': hw.student if hw else None,
    })

@require_POST
@ratelimit(key='ip', rate='10/m', block=True)
def submit_homework(request):
    """
    –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å Homework.
    –û–∂–∏–¥–∞–µ—Ç JSON: {
        classroom_id: <uuid>,
        lesson_id: <uuid>,
        status: 'resent' | 'completed' | 'checked'
    }
    –ü—Ä–∞–≤–∏–ª–∞:
      - 'completed' –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫ (request.user == hw.student)
      - 'resent' –∏ 'checked' –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å (request.user –≤ classroom.teachers)
    """
    # 1. –†–∞–∑–±–æ—Ä JSON
    try:
        data = json.loads(request.body)
        classroom_id = data['classroom_id']
        lesson_id = data.get('lesson_id')
        new_status = data['status']
    except (ValueError, KeyError):
        return HttpResponseBadRequest("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = {'resent', 'completed', 'checked'}
    if new_status not in valid_statuses:
        return HttpResponseBadRequest(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")

    # 3. –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏
    hw = Homework.objects.filter(
        classroom_id=classroom_id,
        lesson_id=lesson_id
    ).select_related('classroom', 'student') \
     .first()

    if not hw:
        return HttpResponseBadRequest("–î–æ–º–∞—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    user = request.user

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if new_status in {'resent', 'checked'}:
        # –¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∞
        if not hw.classroom.teachers.filter(id=user.id).exists():
            return HttpResponseForbidden("–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å")
    else:  # new_status == 'completed'
        # –¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —ç—Ç–æ –î–ó
        if hw.student_id != user.id:
            return HttpResponseForbidden("–¢–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫ –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –î–ó –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")

    # 5. –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    hw.status = new_status
    hw.save(update_fields=['status', 'updated_at'])

    return JsonResponse({
        'success': True,
        'new_status': hw.get_status_display()
    })





@login_required
def accept_invitation(request, code):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å –ø–æ –∫–æ–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        classroom = get_object_or_404(Classroom, invitation_code=code)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫?
        if (request.user in classroom.students.all()) or (request.user in classroom.teachers.all()):
            return redirect("classroom_view", classroom_id=classroom.id)

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–µ–Ω–∏–∫–∞
        classroom.students.add(request.user)

        messages.success(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–ª–∞—Å—Å—É!")
        return redirect("classroom_view", classroom_id=classroom.id)

    except Classroom.DoesNotExist:
        messages.error(request, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        return redirect("dashboard")  # –∏–ª–∏ –¥—Ä—É–≥–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    except Exception as e:
        # –û–±—â–∏–π catch –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        print(f"Error in accept_invitation: {e}")
        messages.error(request, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∫–ª–∞—Å—Å—É.")
        return redirect("dashboard")

def invitation_expired(request):
    return render(request, 'invitation_expired.html')

def invitation_not_found(request):
    return render(request, 'invitation_not_found.html')

def public_lesson_view(request, link_name):
    # –∏—â–µ–º LessonPublicData –ø–æ link_name
    public_data = get_object_or_404(LessonPublicData, link_name=link_name, lesson__is_public=True)
    lesson_obj = public_data.lesson
    course_obj = lesson_obj.course

    is_authenticated = request.user.is_authenticated
    sections = get_sorted_sections(lesson_obj)
    section_ids = [section.id for section in sections]

    section_ordering = Case(
        *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
        output_field=IntegerField()
    )

    tasks = BaseTask.objects.filter(section__in=section_ids) \
        .select_related('content_type') \
        .annotate(section_order=section_ordering) \
        .order_by('section_order', 'order')

    classrooms = ""
    if is_authenticated:
        classrooms = Classroom.objects.filter(
            Q(teachers=request.user) | Q(students=request.user)
        ).distinct()

    context = {
        "lesson": lesson_obj,
        "public_data": public_data,
        "section_list": sections,
        "user_id": request.user.id if is_authenticated else "",
        "course_id": course_obj.id,
        "is_authenticated": is_authenticated,
        "tasks": tasks,
        "classrooms": classrooms,
    }
    return render(request, "builder/public/public_resource.html", context)

@require_POST
@ratelimit(key='ip', rate='20/m', block=True)
def get_complex_tasks_answers(request):
    try:
        # 1) –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = json.loads(request.body)
        task_id = body.get("task_id")

        if not task_id:
            return JsonResponse({"error": "Missing task_id in request body."}, status=400)

        # 2) –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task_obj = get_object_or_404(BaseTask, id=task_id)
        content_type = task_obj.content_type
        content_object = task_obj.content_object

        # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
        if not (task_obj.section.lesson.is_public or task_obj.section.lesson.course.user == request.user):
            return JsonResponse({"error": "Lesson is not public."}, status=403)

        # 4) –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        if content_type.model_class() == Test:
            data = {
                "id": task_id,
                "answers": content_object.questions,
                "taskType": "test",
            }
        elif content_type.model_class() == TrueOrFalse:
            data = {
                "id": task_id,
                "answers": content_object.statements,
                "taskType": "trueorfalse",
            }
        else:
            return JsonResponse({"error": "Unsupported task type."}, status=400)

        return JsonResponse(data)

    except Exception as e:
        print("Error:", e)
        return JsonResponse({"error": str(e)}, status=500)



# –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á, —Å–¥–µ–ª–∞–π –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∞–ø–ø–∏–Ω–≥:
from datetime import timedelta, date
from django.utils import timezone

period_map = {
    'month': 'price_month',
    '6mo': 'price_6mo',
    'year': 'price_year',
}

def get_old_tariff(user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ None."""
    try:
        return user.tariff
    except UserTariff.DoesNotExist:
        return None

def calculate_lost_tokens(old, today):
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞."""
    if not old or not old.reset_dates:
        return 0
    old_limit = settings.TARIFFS[old.tariff_type]['token_limit']
    remaining = sum(1 for d_str in old.reset_dates if date.fromisoformat(d_str) > today)
    return remaining * old_limit

def get_period_info(period):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å_–≤_–¥–Ω—è—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ü–∏–∫–ª–æ–≤) –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞."""
    if period == 'month':
        return 30, 1
    elif period == '6mo':
        return 30 * 6, 6
    elif period == 'year':
        return 30 * 12, 12
    return 30, 1

def determine_status(old, new_type, period, total_days, today, price):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–∞—Ä–∏—Ñ–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    (status, payment_description)
    """
    if old and getattr(old, 'tariff_type', None) == new_type:
        # –≤—ã—á–∏—Å–ª—è–µ–º days_left
        days_left = getattr(old, 'days_left', None)
        if days_left is None and getattr(old, 'end_date', None):
            end_dt = old.end_date
            end_date = end_dt.date() if hasattr(end_dt, 'date') else end_dt
            days_left = (end_date - today).days

        if days_left is not None and days_left < 7:
            # renew
            base_date = old.end_date.date() if hasattr(old.end_date, 'date') else old.end_date or today
            new_end = (base_date + timedelta(days=total_days)).isoformat()
            print(f"STATUS: renew ‚Äî —Ç–∞—Ä–∏—Ñ '{new_type}' –Ω–∞ –ø–µ—Ä–∏–æ–¥ '{period}' –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª—ë–Ω –¥–æ {new_end}")
            return 'renew', f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ '{new_type}' –¥–æ {new_end}"
        else:
            # connected
            if getattr(old, 'end_date', None):
                end_dt = old.end_date
                end_date_str = end_dt.date().isoformat() if hasattr(end_dt, 'date') else end_dt.isoformat()
                print(f"STATUS: connected ‚Äî –û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ '{new_type}' —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–æ {end_date_str}")
                return 'connected', f"–¢–∞—Ä–∏—Ñ '{new_type}' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {end_date_str}"
            else:
                print(f"STATUS: connected ‚Äî –û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ '{new_type}' —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞)")
                return 'connected', None
    else:
        # available
        available_end = (today + timedelta(days=total_days)).isoformat()
        price_str = str(price) if price is not None else "N/A"
        print(f"STATUS: available ‚Äî —Ç–∞—Ä–∏—Ñ '{new_type}' –Ω–∞ –ø–µ—Ä–∏–æ–¥ '{period}' –¥–æ—Å—Ç—É–ø–µ–Ω. –¶–µ–Ω–∞: {price_str}. –ë—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {available_end} (–æ—Ç {today.isoformat()})")
        return 'available', f"–ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ '{new_type}' –¥–æ {available_end}"

from yookassa import Configuration, Payment

from users.models import Payment as PaymentRecord, UserTokenBalance

Configuration.account_id = settings.YOOKASSA_SHOP_ID
Configuration.secret_key = settings.YOOKASSA_SECRET_KEY
Configuration.debug = getattr(settings, "YOOKASSA_TEST_MODE", False)

logger = logging.getLogger(__name__)

def compute_tariff_reset_dates(period_start: datetime, period_end: datetime) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å—Ç—Ä–æ–∫–∞–º–∏ "YYYY-MM-DD" ‚Äî –¥–∞—Ç—ã —Å–±—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü,
    –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ period_start (—Ç.–µ. —Å–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ —Å–±—Ä–æ—Å–∞)
    –∏ –¥–æ period_end.date() –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–µ—Ç).
    """
    if not period_start or not period_end:
        return []

    start_date = period_start.date()
    end_date = period_end.date()

    dates = []
    # –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ ‚Äî period_start + 1 –º–µ—Å—è—Ü
    current = start_date + relativedelta(months=1)
    while current <= end_date:
        dates.append(current.strftime("%Y-%m-%d"))
        current += relativedelta(months=1)

    return dates

@ratelimit(key='ip', rate='10/m', block=True)
def connect_tariff(request):
    if not request.user.is_authenticated:
        return HttpResponseForbidden('auth_required')

    if request.method != 'POST':
        return HttpResponseBadRequest('Invalid method')

    try:
        data = json.loads(request.body)
        new_type = data['tariff_type']
        period = data.get('period', 'month')
        _ = settings.TARIFFS[new_type]
    except (KeyError, ValueError, TypeError, json.JSONDecodeError):
        return HttpResponseBadRequest('Invalid data')

    user = request.user
    today = timezone.now().date()

    discounts = get_user_tariff_discounts(user)
    price_key = period_map.get(period)
    price = recount_tariff_prices(user, discounts).get(new_type, {}).get(price_key)
    full_price = recount_tariff_prices(user, discounts, consider_prepaid=False).get(new_type, {}).get(price_key)

    if price is None:
        logger.error("connect_tariff: price not found for %s %s", new_type, period)
        return JsonResponse({'status': 'error', 'message': 'price_not_found'}, status=400)

    old = get_old_tariff(user)
    lost_tokens = calculate_lost_tokens(old, today)
    total_days, cycles = get_period_info(period)
    status, payment_description = determine_status(old, new_type, period, total_days, today, price)

    if payment_description:
        logger.info("Tariff payment description: %s", payment_description)

    with transaction.atomic():
        payment_record = PaymentRecord.objects.create(
            user=user,
            payment_type=PaymentRecord.PaymentType.TARIFF,
            tariff_type=new_type,
            tariff_duration=(PaymentRecord.TariffDuration.MONTH if period == 'month'
                             else PaymentRecord.TariffDuration.SIX_MONTH if period == '6mo'
                             else PaymentRecord.TariffDuration.YEAR if period == 'year'
                             else period),
            amount=Decimal(str(price)),
            full_price=Decimal(str(full_price)),
            currency='RUB',
            status=PaymentRecord.Status.PENDING
        )

        try:
            return_path = '/payments/return/'
            return_url = request.build_absolute_uri(return_path) + f'?local_payment_id={payment_record.pk}'

            price_str = f"{Decimal(price):.2f}"
            payment_body = {
                "amount": {
                    "value": price_str,
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url
                },
                "capture": True,
                "description": payment_description or f"–ü–æ–¥–ø–∏—Å–∫–∞ {new_type} ({period})",
                "metadata": {
                    "local_payment_id": str(payment_record.pk),
                    "user_id": str(user.id),
                    "tariff_type": new_type,
                    "tariff_period": period,
                },
                "receipt": {
                    "customer": {"email": user.email or ""},
                    "items": [
                        {
                            "description": payment_description or f"–ü–æ–¥–ø–∏—Å–∫–∞ {new_type} ({period})",
                            "quantity": "1",
                            "amount": {"value": price_str, "currency": "RUB"},
                            "vat_code": getattr(settings, "YOOKASSA_DEFAULT_VAT_CODE", 1),
                            "payment_subject": "service",
                            "payment_mode": "full_prepayment"
                        }
                    ],
                    "tax_system_code": getattr(settings, "YOOKASSA_TAX_SYSTEM_CODE", 1)
                },
            }

            idempotence_key = str(uuid.uuid4())
            yk_payment = Payment.create(payment_body, idempotence_key)
        except requests.exceptions.RequestException as e:
            resp = getattr(e, 'response', None)
            detail = None
            if resp is not None:
                try:
                    detail = resp.json()
                except Exception:
                    detail = resp.text
            logger.exception("YooKassa network error (connect_tariff): %s", detail or str(e))
            return JsonResponse({'status': 'error', 'message': 'payment_create_failed', 'detail': detail}, status=502)
        except Exception as e:
            detail = None
            try:
                candidate = e.args[0] if e.args else str(e)
                detail = candidate if isinstance(candidate, (dict, list)) else str(candidate)
            except Exception:
                detail = str(e)
            logger.exception("YooKassa create payment error (connect_tariff): %s", detail)
            return JsonResponse({'status': 'error', 'message': 'payment_create_failed', 'detail': detail}, status=500)

        transaction_id = getattr(yk_payment, 'id', None) or (yk_payment.get('id') if isinstance(yk_payment, dict) else None)
        if transaction_id:
            payment_record.transaction_id = transaction_id
            payment_record.save()

        confirmation_url = None
        try:
            conf = getattr(yk_payment, 'confirmation', None) or (yk_payment.get('confirmation') if isinstance(yk_payment, dict) else None)
            if isinstance(conf, dict):
                confirmation_url = conf.get('confirmation_url')
            else:
                confirmation_url = getattr(conf, 'confirmation_url', None)
        except Exception:
            confirmation_url = None

        if not confirmation_url:
            logger.error("connect_tariff: no confirmation_url in YooKassa response: %s", yk_payment)
            return JsonResponse({'status': 'error', 'message': 'no_confirmation_url'}, status=500)

        return JsonResponse({
            'status': 'ok',
            'payment_id': transaction_id,
            'local_payment_id': payment_record.pk,
            'confirmation_url': confirmation_url,
            'payment_description': payment_description,
            'computed_status': status
        })

@ratelimit(key='ip', rate='10/m', block=True)
def connect_tokens(request):
    if not request.user.is_authenticated:
        return JsonResponse({'status': 'unauthenticated', 'message': 'auth_required'}, status=401)

    if request.method != 'POST':
        return HttpResponseBadRequest('Invalid method')

    try:
        data = json.loads(request.body)
        amount = int(data['amount'])
    except (KeyError, ValueError, TypeError, json.JSONDecodeError):
        return HttpResponseBadRequest('Invalid data')

    user = request.user
    available_packs = recount_token_prices(user)
    selected = next((p for p in available_packs if p['amount'] == amount), None)
    if not selected:
        return HttpResponseBadRequest('Pack not found')

    payment_description = f"–ü–æ–∫—É–ø–∫–∞ {selected['amount']} —Ç–æ–∫–µ–Ω–æ–≤"

    with transaction.atomic():
        payment_record = PaymentRecord.objects.create(
            user=user,
            payment_type=PaymentRecord.PaymentType.TOKEN_PACK,
            token_amount=selected['amount'],
            amount=Decimal(str(selected['price'])),
            currency='RUB',
            status=PaymentRecord.Status.PENDING,
            full_price=Decimal(str(selected['price'])),
        )

        try:
            return_path = '/payments/return/'
            return_url = request.build_absolute_uri(return_path) + f'?local_payment_id={payment_record.pk}'

            price_str = f"{Decimal(selected['price']):.2f}"
            payment_body = {
                "amount": {
                    "value": price_str,
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url
                },
                "capture": True,
                "description": payment_description,
                "metadata": {
                    "local_payment_id": str(payment_record.pk),
                    "user_id": str(user.id),
                    "tokens": str(selected['amount'])
                },
                "receipt": {
                    "customer": {"email": user.email or ""},
                    "items": [
                        {
                            "description": payment_description,
                            "quantity": "1",
                            "amount": {"value": price_str, "currency": "RUB"},
                            "vat_code": getattr(settings, "YOOKASSA_DEFAULT_VAT_CODE", 1),
                            "payment_subject": "service",
                            "payment_mode": "full_prepayment"
                        }
                    ],
                    "tax_system_code": getattr(settings, "YOOKASSA_TAX_SYSTEM_CODE", 1)
                }
            }

            idempotence_key = str(uuid.uuid4())
            yk_payment = Payment.create(payment_body, idempotence_key)
        except requests.exceptions.RequestException as e:
            resp = getattr(e, 'response', None)
            detail = None
            if resp is not None:
                try:
                    detail = resp.json()
                except Exception:
                    detail = resp.text
            logger.exception("YooKassa network error: %s", detail or str(e))
            return JsonResponse({'status': 'error', 'message': 'payment_create_failed', 'detail': detail}, status=502)
        except Exception as e:
            detail = None
            try:
                candidate = e.args[0] if e.args else str(e)
                if isinstance(candidate, (dict, list)):
                    detail = candidate
                else:
                    detail = str(candidate)
            except Exception:
                detail = str(e)
            logger.exception("YooKassa create payment error: %s", detail)
            return JsonResponse({'status': 'error', 'message': 'payment_create_failed', 'detail': detail}, status=500)

        transaction_id = getattr(yk_payment, 'id', None) or (yk_payment.get('id') if isinstance(yk_payment, dict) else None)
        if transaction_id:
            payment_record.transaction_id = transaction_id
            payment_record.save()

        confirmation_url = None
        try:
            conf = getattr(yk_payment, 'confirmation', None) or (yk_payment.get('confirmation') if isinstance(yk_payment, dict) else None)
            if isinstance(conf, dict):
                confirmation_url = conf.get('confirmation_url')
            else:
                confirmation_url = getattr(conf, 'confirmation_url', None)
        except Exception:
            confirmation_url = None

        if not confirmation_url:
            logger.error("No confirmation_url in YooKassa response: %s", yk_payment)
            return JsonResponse({'status': 'error', 'message': 'no_confirmation_url'}, status=500)

        return JsonResponse({
            'status': 'ok',
            'payment_id': transaction_id,
            'local_payment_id': payment_record.pk,
            'confirmation_url': confirmation_url,
            'payment_description': payment_description
        })

def _create_local_payment_from_yk(payment_obj):
    metadata = payment_obj.get('metadata') or {}
    user = None
    try:
        user_id = metadata.get('user_id')
        if user_id:
            User = get_user_model()
            user = User.objects.filter(id=int(user_id)).first()
    except Exception:
        user = None

    amount_obj = payment_obj.get('amount') or {}
    amount_value = amount_obj.get('value') or '0.00'
    currency = amount_obj.get('currency') or 'RUB'

    token_amount = None
    try:
        token_amount = int(metadata.get('tokens')) if metadata.get('tokens') else None
    except Exception:
        token_amount = None

    payment_record = PaymentRecord.objects.create(
        user=user,
        payment_type=PaymentRecord.PaymentType.TOKEN_PACK,
        token_amount=token_amount,
        amount=Decimal(str(amount_value)),
        currency=currency,
        status=PaymentRecord.Status.PENDING,
        transaction_id=payment_obj.get('id')
    )
    return payment_record

def check_user_pending_payments(user):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç pending –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
    –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø–ª–∞—á–µ–Ω—ã
    """
    # –ù–∞—Ö–æ–¥–∏–º pending –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    twenty_four_hours_ago = timezone.now() - timedelta(hours=24)

    pending_payments = PaymentRecord.objects.filter(
        user=user,
        status=PaymentRecord.Status.PENDING,
        created_at__gte=twenty_four_hours_ago
    )

    processed_count = 0

    for payment in pending_payments:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ YooKassa
            yk_obj = Payment.find_one(payment.transaction_id)
            yk_status = getattr(yk_obj, 'status', None) or (yk_obj.get('status') if isinstance(yk_obj, dict) else None)

            if yk_status in ('succeeded', 'paid'):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                success = _safe_mark_completed_and_credit(payment)
                if success:
                    processed_count += 1
                    logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω pending –ø–ª–∞—Ç–µ–∂ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                                payment.pk, user.id)

            elif yk_status == 'waiting_for_capture':
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂
                try:
                    idempotence_key = str(uuid.uuid4())
                    capture_body = {
                        "amount": {
                            "value": f"{payment.amount:.2f}",
                            "currency": payment.currency or "RUB"
                        }
                    }
                    capture_response = Payment.capture(payment.transaction_id, capture_body, idempotence_key)
                    captured_status = getattr(capture_response, 'status', None) or (
                        capture_response.get('status') if isinstance(capture_response, dict) else None)

                    if captured_status in ('succeeded', 'paid'):
                        success = _safe_mark_completed_and_credit(payment)
                        if success:
                            processed_count += 1
                            logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω pending –ø–ª–∞—Ç–µ–∂ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                                        payment.pk, user.id)

                except Exception as e:
                    logger.exception("–û—à–∏–±–∫–∞ capture –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ %s: %s", payment.pk, str(e))

            elif yk_status in ('canceled', 'cancelled'):
                # –û—Ç–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                payment.delete()
                logger.info("–û—Ç–º–µ–Ω–µ–Ω pending –ø–ª–∞—Ç–µ–∂ %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                           payment.pk, user.id)

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–∞ %s: %s", payment.pk, str(e))

    return processed_count

def _safe_mark_completed_and_credit(payment_record, provider_transaction_id=None):
    if payment_record.status == PaymentRecord.Status.COMPLETED:
        logger.info("Payment %s already completed ‚Äî skipping", payment_record.pk)
        return True

    try:
        with transaction.atomic():
            payment_record.mark_completed(transaction_id=provider_transaction_id or payment_record.transaction_id)

            if payment_record.payment_type == PaymentRecord.PaymentType.TOKEN_PACK and payment_record.token_amount:
                balance, _ = UserTokenBalance.objects.get_or_create(
                    user=payment_record.user,
                    defaults={'tariff_tokens': 0, 'extra_tokens': 0}
                )
                balance.extra_tokens = (balance.extra_tokens or 0) + (payment_record.token_amount or 0)
                balance.save()
                logger.info("Credited %s tokens to user %s for payment %s",
                            payment_record.token_amount, payment_record.user.id, payment_record.pk)

            elif payment_record.payment_type == PaymentRecord.PaymentType.TARIFF:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
                success = activate_user_tariff(
                    payment_record.user,
                    payment_record.tariff_type,
                    payment_record.tariff_duration,
                    amount_paid=float(payment_record.amount),
                    full_price=float(payment_record.full_price),
                )
                if not success:
                    logger.error("Failed to activate tariff for payment %s", payment_record.pk)
                    return False

        return True

    except Exception as e:
        logger.exception("Error completing payment %s: %s", payment_record.pk, str(e))
        return False

def activate_user_tariff(
    user,
    tariff_type,
    duration,
    amount_paid=0,
    full_price=0,
    period_start: datetime = None,
    period_end: datetime = None
):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç reset_dates (tariff_dates).
    –ï—Å–ª–∏ period_start/period_end –ø–µ—Ä–µ–¥–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Payment), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö ‚Äî –∏–Ω–∞—á–µ
    —Å—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥—è –∏–∑ now –∏ duration.
    """

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∞—Ä–∏—Ñ–∞
    tariff_config = settings.TARIFFS.get(tariff_type, {})
    tariff_tokens = tariff_config.get("token_limit", 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö
    if duration == PaymentRecord.TariffDuration.MONTH:
        months = 1
    elif duration == PaymentRecord.TariffDuration.SIX_MONTH:
        months = 6
    elif duration == PaymentRecord.TariffDuration.YEAR:
        months = 12
    else:
        months = 1  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü

    now = timezone.now()

    # –ï—Å–ª–∏ period_start/period_end –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ now –∏ months
    if period_start is None:
        period_start = now
    if period_end is None:
        period_end = period_start + relativedelta(months=months)

    # –°—á–∏—Ç–∞–µ–º –¥–∞—Ç—ã —Å–±—Ä–æ—Å–∞
    reset_dates = compute_tariff_reset_dates(period_start, period_end)

    try:
        with transaction.atomic():
            user_tariff, created = UserTariff.objects.get_or_create(
                user=user,
                defaults={
                    "tariff_type": tariff_type,
                    "status": TariffStatus.ACTIVE,
                    "start_date": period_start,
                    "end_date": period_end,
                    "price_month": amount_paid / months if amount_paid > 0 else 0,
                    "months_left": months,
                    "reset_dates": reset_dates,
                },
            )

            if not created:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ç–∞—Ä–∏—Ñ
                if user_tariff.tariff_type == tariff_type:
                    # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ —Ç–∞—Ä–∏—Ñ–∞
                    if user_tariff.end_date and user_tariff.end_date > now:
                        # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ
                        new_start_date = user_tariff.end_date
                        new_end_date = user_tariff.end_date + relativedelta(months=months)
                    else:
                        # –ï—Å–ª–∏ —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è
                        new_start_date = now
                        new_end_date = now + relativedelta(months=months)

                    user_tariff.start_date = new_start_date
                    user_tariff.end_date = new_end_date
                    user_tariff.months_left = months
                    user_tariff.status = TariffStatus.ACTIVE

                    # –ø–µ—Ä–µ—Å—á—ë—Ç reset_dates –æ—Ç –¥–∞—Ç—ã –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
                    user_tariff.reset_dates = compute_tariff_reset_dates(new_start_date, new_end_date)

                else:
                    # –°–º–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ ‚Äî –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏ reset_dates
                    user_tariff.tariff_type = tariff_type
                    user_tariff.start_date = period_start
                    user_tariff.end_date = period_end
                    user_tariff.months_left = months - 1
                    user_tariff.status = TariffStatus.ACTIVE
                    user_tariff.price_month = full_price / months if full_price > 0 else 0
                    user_tariff.reset_dates = reset_dates

                user_tariff.save()

            else:
                # –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω defaults —Å reset_dates
                user_tariff.end_date = period_end
                user_tariff.reset_dates = reset_dates
                user_tariff.save()

            # üîπ –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ start_date —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
            if user_tariff.start_date.date() in {now.date(), (now - timedelta(days=1)).date()}:
                balance, _ = UserTokenBalance.objects.get_or_create(
                    user=user,
                    defaults={"tariff_tokens": 0, "extra_tokens": 0},
                )
                balance.tariff_tokens = tariff_tokens
                balance.save()

                logger.info(
                    "–ù–∞—á–∏—Å–ª–µ–Ω–æ %s —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (start_date=%s, —Å–µ–≥–æ–¥–Ω—è=%s)",
                    tariff_tokens,
                    user.username,
                    user_tariff.start_date.date(),
                    now.date(),
                )
            else:
                logger.info(
                    "–¢–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ start_date=%s (—Å–µ–≥–æ–¥–Ω—è=%s)",
                    user.username,
                    user_tariff.start_date.date(),
                    now.date(),
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ tariff_type –≤ CustomUser
            user.tariff_type = tariff_type
            user.save()

            logger.info(
                "–¢–∞—Ä–∏—Ñ %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –¥–æ %s (reset_dates=%s)",
                tariff_type,
                user.username,
                user_tariff.end_date,
                user_tariff.reset_dates,
            )

            return True

    except Exception as e:
        logger.exception(
            "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user.username, str(e)
        )
        return False


@csrf_exempt
def tokens_return(request):
    payment_id = request.GET.get('paymentId') or request.GET.get('payment_id') or request.GET.get('id')
    local_id = request.GET.get('local_payment_id')

    payment_record = None
    yk_obj = None
    yk_status = None

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
    if local_id:
        try:
            payment_record = PaymentRecord.objects.filter(pk=int(local_id)).first()
        except (ValueError, TypeError):
            payment_record = None

    if payment_id and not payment_record:
        payment_record = PaymentRecord.objects.filter(transaction_id=payment_id).first()

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç YooKassa
    if payment_record and payment_record.transaction_id:
        try:
            yk_obj = Payment.find_one(payment_record.transaction_id)
            yk_status = getattr(yk_obj, 'status', None) or (yk_obj.get('status') if isinstance(yk_obj, dict) else None)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
            if yk_status == 'waiting_for_capture':
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂, –æ–∂–∏–¥–∞—é—â–∏–π capture
                try:
                    idempotence_key = str(uuid.uuid4())
                    capture_body = {
                        "amount": {
                            "value": f"{payment_record.amount:.2f}",
                            "currency": payment_record.currency or "RUB"
                        }
                    }
                    capture_response = Payment.capture(payment_record.transaction_id, capture_body, idempotence_key)
                    captured_status = getattr(capture_response, 'status', None) or (
                        capture_response.get('status') if isinstance(capture_response, dict) else None)

                    if captured_status in ('succeeded', 'paid'):
                        yk_status = captured_status
                        with transaction.atomic():
                            _safe_mark_completed_and_credit(payment_record)
                    else:
                        logger.info("Capture returned status %s for payment %s", captured_status, payment_record.pk)

                except Exception as e:
                    logger.exception("Error capturing payment %s: %s", payment_record.pk, str(e))

            elif yk_status in ('succeeded', 'paid'):
                # –ü–ª–∞—Ç–µ–∂ —É–∂–µ —É—Å–ø–µ—à–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                with transaction.atomic():
                    _safe_mark_completed_and_credit(payment_record)

        except requests.exceptions.RequestException as e:
            logger.exception("Network error fetching payment status from YooKassa: %s", str(e))
        except Exception as e:
            logger.exception("Error fetching payment status from YooKassa: %s", str(e))

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø–æ transaction_id, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö YooKassa
    if not payment_record and payment_id:
        try:
            if not yk_obj:
                yk_obj = Payment.find_one(payment_id)

            if yk_obj:
                payment_dict = yk_obj.to_dict() if hasattr(yk_obj, 'to_dict') else (
                    yk_obj if isinstance(yk_obj, dict) else {})
                payment_record = _create_local_payment_from_yk(payment_dict)
                yk_status = payment_dict.get('status')

                if yk_status in ('succeeded', 'paid'):
                    with transaction.atomic():
                        _safe_mark_completed_and_credit(payment_record)

        except Exception as e:
            logger.exception("Can't create local Payment from YooKassa object: %s", str(e))

    if not payment_record:
        logger.error("tokens_return: no local payment record found (payment_id=%s local_id=%s)", payment_id, local_id)
        return HttpResponseBadRequest("Payment not found")

    return render(request, 'payments/return.html', {
        'payment': payment_record,
        'provider_status': yk_status,
    })




def report_site_error(request):
    if request.method != "POST":
        return JsonResponse({'detail': 'Method not allowed'}, status=405)

    try:
        data = json.loads(request.body)

        error_message = data.get('title', '') + "\n" + data.get('content', '')
        contacts = data.get('contacts', '').strip()

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if contacts:
            error_message += f"\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}"

        function_name = data.get('function_name', '')[:255]  # –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
        SiteErrorLog.objects.create(
            error_message=error_message,
            function_name=function_name,
            created_at=timezone.now()
        )

        return JsonResponse({'detail': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}, status=201)

    except json.JSONDecodeError:
        return JsonResponse({'detail': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'detail': str(e)}, status=500)


@login_required
@require_POST
@ratelimit(key='ip', rate='5/m', block=True)
def subscribe_emails(request):
    """
    –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, —Å—Ç–∞–≤–∏—Ç allow_emails = True
    """
    user = request.user

    if user.allow_emails:
        return JsonResponse({'status': 'already_subscribed', 'message': '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.'})

    user.allow_emails = True
    user.save()

    return JsonResponse({'status': 'success', 'message': '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.'})

@login_required
@require_POST
@ratelimit(key='ip', rate='5/m', block=True)
def switch_role(request):
    user = request.user

    if user.role != Role.STUDENT:
        return JsonResponse({"error": "Only students can switch role"}, status=403)

    try:
        data = json.loads(request.body)

        # –ú–µ–Ω—è–µ–º —Ä–æ–ª—å
        user.role = Role.TEACHER
        user.save()

        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã, –∫–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        extra_tokens = 200
        UserTokenBalance.objects.create(user=user, extra_tokens=extra_tokens, tariff_tokens=0)

        return JsonResponse({"success": True, "role": user.role})

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=400)


@require_POST
def select_lesson(request):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞.
    –û–∂–∏–¥–∞–µ—Ç JSON { classroom_id, lesson_id }.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π/–ª–∏—á–Ω—ã–π —É—Ä–æ–∫ –ø–æ –ë–î –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
    """
    try:
        payload = json.loads(request.body.decode('utf-8'))
    except Exception:
        return JsonResponse({"status": "error", "message": "Invalid JSON"}, status=400)

    lesson_id = payload.get('lesson_id')
    classroom_id = payload.get('classroom_id')
    user = request.user

    if not lesson_id or not classroom_id:
        return JsonResponse({"status": "error", "message": "Missing lesson_id or classroom_id"}, status=400)

    # –∏—â–µ–º lesson
    try:
        lesson_obj = Lesson.objects.select_related("course").get(id=lesson_id)
    except Lesson.DoesNotExist:
        raise Http404("Lesson not found")

    # –∏—â–µ–º classroom
    try:
        classroom = Classroom.objects.get(id=classroom_id)
    except Classroom.DoesNotExist:
        raise Http404("Classroom not found")

    # –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    print(lesson_obj.is_public)
    if lesson_obj.is_public:
        result = public_course_selection(request, user, classroom, lesson_obj)
    else:
        result = personal_course_selection(request, user, classroom, lesson_obj)

    return JsonResponse({
        "status": "ok",
        "data": result
    })


def public_course_selection(request, user, classroom, lesson_obj):
    """
    –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–∫–∞:
    1) –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "Transformed Lessons".
       –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω - –≤—ã–∑–≤–∞—Ç—å create_default_autogeneration_prefs(new_course).
    2) –ï—Å–ª–∏ –≤ –∫—É—Ä—Å–µ —É–∂–µ –µ—Å—Ç—å —É—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º - —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.
    3) –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º (is_public=False) –≤ –∫—É—Ä—Å–µ.
    4) –°–æ–∑–¥–∞—Ç—å –≤ –Ω–æ–≤–æ–º —É—Ä–æ–∫–µ —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –≤ –ø—É–±–ª–∏—á–Ω–æ–º —É—Ä–æ–∫–µ,
       –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å clone_section(old_section, new_section, user) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.
    5) –ü—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –∫ classroom.lesson –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ —Å –∫–ª—é—á–æ–º "error".
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—å –∫–ª–∞—Å—Å–∞ –º–æ–∂–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å —É—Ä–æ–∫
    if not classroom.teachers.filter(pk=user.pk).exists():
        return {
            "error": "forbidden",
            "message": "–¢–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è –∫–ª–∞—Å—Å–∞ –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å —É—Ä–æ–∫—ã –¥–ª—è –Ω–µ–≥–æ."
        }

    # –∏–º—è –∫—É—Ä—Å–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    transformed_course_name = "Transformed Lessons"

    # –†–∞–±–æ—Ç–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–¥—ë—Ç, –æ—Ç–∫–∞—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    try:
        with transaction.atomic():
            # –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å
            user_course, created = Course.objects.get_or_create(
                user=user,
                name=transformed_course_name,
                defaults={"description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ —É—Ä–æ–∫–∏."}
            )

            if created:
                logger.info("Created transformed course for user %s: %s", user.pk, user_course.pk)
                if callable(create_default_autogeneration_prefs):
                    try:
                        create_default_autogeneration_prefs(user_course)
                    except Exception as e:
                        logger.exception("create_default_autogeneration_prefs failed for course %s: %s", user_course.pk, e)
                        # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º

            # –ï—Å–ª–∏ –≤ –∫—É—Ä—Å–µ —É–∂–µ –µ—Å—Ç—å —É—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —É–¥–∞–ª—è–µ–º –µ–≥–æ (–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ cascade)
            existing_lessons_qs = user_course.lessons.filter(name=lesson_obj.name)
            if existing_lessons_qs.exists():
                # –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫–∏–µ —É–¥–∞–ª—è—é—Ç—Å—è
                existing_ids = list(existing_lessons_qs.values_list("id", flat=True))
                logger.info("Removing existing lessons %s in course %s for user %s", existing_ids, user_course.pk, user.pk)
                existing_lessons_qs.delete()

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É—Ä–æ–∫ –≤ –∫—É—Ä—Å–µ ‚Äî –¥–µ–ª–∞–µ–º –µ–≥–æ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–º (–∫–æ–ø–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            new_lesson = Lesson.objects.create(
                course=user_course,
                name=lesson_obj.name,
                is_public=False,
                context=lesson_obj.context or {}
            )

            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏
            with transaction.atomic():
                old_sections = list(lesson_obj.sections.all().order_by('id'))

                for old_sec in old_sections:
                    new_sec = Section.objects.create(
                        lesson=new_lesson,
                        name=old_sec.name,
                        type=old_sec.type,
                        order=old_sec.order,
                    )

                    if callable(clone_section):
                        try:
                            clone_section(old_sec, new_sec, user)
                        except Exception as e:
                            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                            logger.exception("–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ %s -> %s: %s",
                                             old_sec.pk, new_sec.pk, e)
                            raise  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    else:
                        logger.warning("–§—É–Ω–∫—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî —Ä–∞–∑–¥–µ–ª %s —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", new_sec.pk)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫ –∫ –∫–ª–∞—Å—Å—É
            classroom.lesson = new_lesson
            classroom.save(update_fields=["lesson"])

            logger.info("Assigned new lesson %s to classroom %s", new_lesson.pk, classroom.pk)

            return {
                "message": f"–ü—É–±–ª–∏—á–Ω—ã–π —É—Ä–æ–∫ '{lesson_obj.name}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω –∫–ª–∞—Å—Å—É.",
                "lesson_id": str(new_lesson.id),
                "classroom_id": str(classroom.id),
                "course_id": str(user_course.id),
                "is_public": False
            }

    except Exception as e:
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: %s", e)
        return {
            "error": "clone_failed",
            "message": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}"
        }

    except Exception as exc:
        logger.exception("Unexpected error in public_course_selection: %s", exc)
        return {
            "error": "internal_error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–∫–∞.",
            "details": str(exc)
        }


def personal_course_selection(request, user, classroom, lesson_obj):
    """
    –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–∫–∞.
    """
    # –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ user –≤–ª–∞–¥–µ–ª–µ—Ü –∫—É—Ä—Å–∞
    if lesson_obj.course.user != user:
        return {"error": "–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞"}

    classroom.lesson = lesson_obj
    classroom.save(update_fields=["lesson"])
    return {
        "message": f"–õ–∏—á–Ω—ã–π —É—Ä–æ–∫ '{lesson_obj.name}' –≤—ã–±—Ä–∞–Ω –¥–ª—è –∫–ª–∞—Å—Å–∞ {classroom.id}",
        "lesson_id": str(lesson_obj.id),
        "classroom_id": str(classroom.id),
        "is_public": False
    }

def str_to_bool(val):
    if isinstance(val, bool):
        return val
    if isinstance(val, str):
        return val.lower() in ("true", "1", "yes", "on")
    return False

@require_POST
def update_lesson(request, lesson_id):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞.
    staff –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≤—Å–µ –ø–æ–ª—è + pdf; –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ –∏–º—è.
    """
    user = request.user
    lesson_obj = get_object_or_404(Lesson, id=lesson_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º payload: –µ—Å–ª–∏ JSON ‚Äî –ø–∞—Ä—Å–∏–º, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º request.POST
    payload = {}
    try:
        if request.content_type and request.content_type.startswith("application/json"):
            payload = json.loads(request.body.decode("utf-8") or "{}")
        else:
            # multipart/form-data –∏–ª–∏ application/x-www-form-urlencoded
            payload = request.POST.dict()
    except Exception:
        payload = request.POST.dict()

    # --- –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Ç–æ–ª—å–∫–æ –∏–º—è ---
    if not user.is_staff:
        new_name = (payload.get("name") or "").strip()
        if not new_name:
            return JsonResponse({"error": "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}, status=400)
        lesson_obj.name = new_name
        lesson_obj.save(update_fields=["name"])
        return JsonResponse({"name": lesson_obj.name})

    # --- staff: –æ–±—â–∏–µ –ø–æ–ª—è ---
    lesson_obj.name = payload.get("name", lesson_obj.name)
    # str_to_bool ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è
    lesson_obj.is_public = str_to_bool(payload.get("is_public", lesson_obj.is_public))
    lesson_obj.save(update_fields=["name", "is_public"])

    # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º LessonPublicData
    public_data, _ = LessonPublicData.objects.get_or_create(lesson=lesson_obj)
    public_data.icon = payload.get("icon", public_data.icon)
    public_data.level = payload.get("level", public_data.level)
    public_data.lexical_topics = payload.get("lexical_topics", public_data.lexical_topics)
    public_data.grammar_topics = payload.get("grammar_topics", public_data.grammar_topics)
    public_data.extra_topics = payload.get("extra_topics", public_data.extra_topics)
    public_data.meta_description = payload.get("meta_description", public_data.meta_description)
    public_data.keywords = payload.get("keywords", public_data.keywords)

    # --- –†–∞–±–æ—Ç–∞ —Å PDF ---
    # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç FormData -> —Ñ–∞–π–ª –æ–∫–∞–∂–µ—Ç—Å—è –≤ request.FILES
    uploaded_pdf = request.FILES.get("pdf_file")
    # —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ '1' –∏–ª–∏ 'true' –∏ —Ç.–¥.
    remove_pdf_flag = str(payload.get("remove_pdf", "")).lower() in ("1", "true", "on", "yes")

    if uploaded_pdf:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–∏–ø –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä–∞–∑–º–µ—Ä
        content_type = getattr(uploaded_pdf, "content_type", "")
        if content_type != "application/pdf":
            return JsonResponse({"error": "–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã"}, status=400)

        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–∏–º–∏—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–∏–º–µ—Ä 10 MB)
        max_bytes = 10 * 1024 * 1024
        if uploaded_pdf.size > max_bytes:
            return JsonResponse({"error": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 10 MB)"}, status=400)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Å–≤–æ–∏–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        if public_data.pdf_file:
            try:
                public_data.pdf_file.delete(save=False)
            except Exception:
                pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        public_data.pdf_file = uploaded_pdf
        # public_data.save() –Ω–∏–∂–µ

    elif remove_pdf_flag:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏ –æ–±–Ω—É–ª–∏–º –ø–æ–ª–µ
        if public_data.pdf_file:
            try:
                public_data.pdf_file.delete(save=False)
            except Exception:
                pass
            public_data.pdf_file = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º public_data
    public_data.save()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫—É –Ω–∞ pdf –µ—Å–ª–∏ –µ—Å—Ç—å)
    pdf_url = None
    try:
        if public_data.pdf_file and hasattr(public_data.pdf_file, "url"):
            pdf_url = public_data.pdf_file.url
    except Exception:
        pdf_url = None

    return JsonResponse({
        "success": True,
        "lesson": {
            "id": str(lesson_obj.id),
            "name": lesson_obj.name,
            "is_public": lesson_obj.is_public,
            "icon": public_data.icon,
            "level": public_data.level,
            "lexical_topics": public_data.lexical_topics,
            "grammar_topics": public_data.grammar_topics,
            "extra_topics": public_data.extra_topics,
            "meta_description": public_data.meta_description,
            "keywords": public_data.keywords,
            "pdf_url": pdf_url,
        }
    })




@login_required
def give_present(request):
    """
    –í—ã–¥–∞—ë—Ç –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
      - –µ—Å–ª–∏ —Ç–∞—Ä–∏—Ñ FREE -> –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ü—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π –∏ —à–ª—ë–º –ø–∏—Å—å–º–æ (present_type="–ü–æ–¥–ø–∏—Å–∫–∞")
      - –∏–Ω–∞—á–µ -> –Ω–∞—á–∏—Å–ª—è–µ–º +500 extra_tokens –∏ —à–ª—ë–º –ø–∏—Å—å–º–æ (present_type="–¢–æ–∫–µ–Ω—ã")

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JsonResponse —Å –∏—Ç–æ–≥–æ–º.
    """
    user = request.user

    try:
        from users.views import send_gift_congrat_email
        with transaction.atomic():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ free ‚Äî –Ω–æ –ª—É—á—à–µ create –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
            try:
                user_tariff = UserTariff.objects.select_for_update().get(user=user)
            except UserTariff.DoesNotExist:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º
                user_tariff = None

            if (user_tariff is None) or (user_tariff.tariff_type == TariffType.FREE):
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ‚Äî –≤—ã–¥–∞—ë–º –ø—Ä–µ–º–∏—É–º –Ω–∞ 7 –¥–Ω–µ–π
                period_start = timezone.now()
                period_end = period_start + timedelta(days=7)

                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞.
                # –ü–µ—Ä–µ–¥–∞—ë–º duration –≤ –¥–Ω—è—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏; —Ç–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ —è–≤–Ω–æ.
                activate_user_tariff(
                    user=user,
                    tariff_type=TariffType.PREMIUM,
                    duration="MONTH",
                    amount_paid=0,
                    full_price=0,
                    period_start=period_start,
                    period_end=period_end,
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ-–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                try:
                    send_gift_congrat_email(user, present_type="–ü–æ–¥–ø–∏—Å–∫–∞")
                except Exception:
                    # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                    pass

                return JsonResponse({
                    "status": "ok",
                    "present": "subscription",
                    "tariff": str(TariffType.PREMIUM),
                    "period_start": period_start.isoformat(),
                    "period_end": period_end.isoformat(),
                })

            else:
                # –ù–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º 500 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                tb, _ = UserTokenBalance.objects.select_for_update().get_or_create(user=user, defaults={
                    "tariff_tokens": 0,
                    "extra_tokens": 0,
                })
                tb.extra_tokens = (tb.extra_tokens or 0) + 500
                tb.save(update_fields=["extra_tokens", "updated_at"])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ-–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
                try:
                    send_gift_congrat_email(user, present_type="–¢–æ–∫–µ–Ω—ã")
                except Exception:
                    pass

                return JsonResponse({
                    "status": "ok",
                    "present": "tokens",
                    "added_extra_tokens": 500,
                    "total_extra_tokens": tb.extra_tokens,
                    "total_tokens": tb.tokens,
                })

    except Exception as e:
        # –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –ª–æ–≥–∏—Ä—É–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ logger.exception
        return JsonResponse({"status": "error", "message": str(e)}, status=500)


@login_required
def onboarding(request):
    try:
        # –°–æ–∑–¥–∞—ë–º/–ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ob, _ = UserOnboarding.objects.get_or_create(user=request.user)

        # üö´ –ï—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –Ω–µ –ø—É—Å–∫–∞–µ–º
        if ob.current_step == "done":
            return redirect("home")  # –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "dashboard"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            user_tariff = request.user.tariff  # OneToOneField -> UserTariff
            is_paid = user_tariff.tariff_type != TariffType.FREE
        except UserTariff.DoesNotExist:
            is_paid = False
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            logger.error(f"Error checking tariff for user {request.user.id}: {str(e)}")
            is_paid = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            token_balance = request.user.token_balance  # OneToOneField -> UserTokenBalance
            low_tokens = token_balance.tokens < 50
        except UserTokenBalance.DoesNotExist:
            low_tokens = True  # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω–æ–≤ –º–∞–ª–æ
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            logger.error(f"Error checking token balance for user {request.user.id}: {str(e)}")
            low_tokens = True

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç
        context = {
            "current_step": ob.current_step,  # str | None
            "generation_id": ob.generation_id,  # str | None
            "lesson_id": ob.lesson_id,  # str | None
            "is_paid": is_paid,
            "low_tokens": low_tokens,  # üöÄ –¥–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞
            # ‚Ä¶–∏ —Å—Ä–∞–∑—É –æ–¥–Ω–∏–º JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ JS:
            "onboarding_json": json.dumps({
                "current_step": ob.current_step,
                "generation_id": ob.generation_id,
                "lesson_id": ob.lesson_id,
                "is_paid": is_paid,
                "low_tokens": low_tokens,
            }, cls=DjangoJSONEncoder),
        }

        return render(request, "home/onboarding.html", context)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        logger.error(
            f"Critical error in onboarding view for user {request.user.id if request.user.is_authenticated else 'anonymous'}: {str(e)}")

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        messages.error(request, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return redirect("home")



@login_required
@require_POST
def start_generate_lesson(request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON { topic: str, considerations?: str, course_id?: str }
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å LessonGenerationStatus –∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { generation_id, task_id } (202 Accepted).
    """
    try:
        payload = json.loads(request.body.decode("utf-8") or "{}")
    except json.JSONDecodeError:
        return HttpResponseBadRequest("Invalid JSON")

    topic = (payload.get("topic") or "").strip()
    considerations = payload.get("considerations")
    course_id = payload.get("course_id")

    if not topic or not request.user.is_authenticated:
        return HttpResponseBadRequest(json.dumps({"error": "topic_required"}), content_type="application/json")

    if request.user and request.user.is_authenticated:
        try:
            if hasattr(request.user, 'metrics'):
                request.user.metrics.lessons_generated_counter += 1
                request.user.metrics.save(update_fields=["lessons_generated_counter"])
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            import logging
            logger = logging.getLogger(__name__)
            logger.warning(f"Failed to increment tasks_generated_counter for user {request.user.id}: {e}")

    generation_id = payload.get("generation_id") or str(uuid.uuid4())

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω course_id ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    if course_id:
        try:
            course_obj = Course.objects.filter(id=course_id, user=request.user).first()
            if not course_obj:
                return HttpResponseForbidden("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É")
        except Exception:
            course_id = None

    # –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
    status_obj, created = LessonGenerationStatus.objects.get_or_create(
        generation_id=generation_id,
        defaults={
            "user": request.user,
            "status": "pending",
            "total_tasks": 0,
            "completed_tasks": 0,
            "percent": 0.0,
        },
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º celery-–∑–∞–¥–∞—á—É
    try:
        task = generate_lesson_task.delay(request.user.id, topic, generation_id=generation_id, course_id=course_id)
    except Exception as e:
        logger.exception("Failed to enqueue generate_lesson_task: %s", e)
        return HttpResponseServerError(json.dumps({"error": "enqueue_failed"}), content_type="application/json")

    return JsonResponse(
        {"generation_id": generation_id, "task_id": getattr(task, "id", None)},
        status=202,
    )


@login_required
def get_generation_status(request, generation_id: str):
    """
    –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ generation_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç json: { generation_id, status, percent, total_tasks, completed_tasks, lesson_id? }
    """
    stat = LessonGenerationStatus.objects.filter(generation_id=generation_id, user=request.user).first()
    if not stat:
        return JsonResponse({"error": "not_found"}, status=404)

    return JsonResponse({
        "generation_id": stat.generation_id,
        "status": stat.status,
        "percent": float(stat.percent),
        "total_tasks": stat.total_tasks,
        "completed_tasks": stat.completed_tasks,
        "lesson_id": str(stat.lesson.id) if stat.lesson else None,
    })


ALLOWED_TASK_TYPES = {
    "WordList",
    "Note",
    "Article",
    "MatchUpTheWords",
    "Test",
    "TrueOrFalse",
    "SortIntoColumns",
    "LabelImages",
    "MakeASentence",
    "Unscramble",
}

def generate_lesson(user, lesson_topic: str, generation_id: Optional[str] = None, course_id: Optional[str] = None) -> float:
    """
    –°–æ–∑–¥–∞—ë—Ç (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π) Course, —Å–æ–∑–¥–∞—ë—Ç Lesson –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏–∏ –∏ –∑–∞–¥–∞–Ω–∏—è.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω course_id ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç user).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (0..100).
    """
    generation_id = generation_id or str(uuid.uuid4())

    status_obj, _ = LessonGenerationStatus.objects.get_or_create(
        generation_id=generation_id,
        defaults={"user": user, "status": "pending", "percent": 0.0},
    )

    status_obj.mark_running()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º course: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω course_id ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º/–±–µ—Ä—ë–º My Course
    with transaction.atomic():
        course_obj = None
        if course_id:
            try:
                course_candidate = Course.objects.filter(id=course_id).first()
                # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if course_candidate and course_candidate.user_id == getattr(user, "id", None):
                    course_obj = course_candidate
                else:
                    # –µ—Å–ª–∏ –∫—É—Ä—Å –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –Ω–∞—à ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á—É–∂–æ–π, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                    course_obj = None
            except Exception:
                course_obj = None

        if not course_obj:
            course_obj, _ = Course.objects.get_or_create(user=user, name="My Course")
            create_default_autogeneration_prefs(course_obj)

        # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–∫ (auto_context = [])
        lesson_obj = Lesson.objects.create(
            course=course_obj,
            name="My Lesson",
            context={},
            is_public=False,
        )

        status_obj.lesson = lesson_obj
        status_obj.save(update_fields=["lesson", "updated_at"])

    # –®–∞–≥ 2: –∑–∞–ø—Ä–æ—Å –∫ –ò–ò –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä–∞–∑–¥–µ–ª–æ–≤
    initial_query = (
        f'–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —É—Ä–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —Ç–µ–º—É \"{lesson_topic}\". '
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π: WordList, Note, Article, MatchUpTheWords, Test, TrueOrFalse, SortIntoColumns, LabelImages, MakeASentence, Unscramble. '
        'JSON [{section_name: str, task_types: [str]}].'
    )

    try:
        sections_data = generate_handler(user=user, query=initial_query, desired_structure="JSON", model_type="premium")
    except Exception as e:
        logger.exception("generate_handler (sections) failed: %s", e)
        status_obj.mark_failed()
        return 0.0

    if not isinstance(sections_data, (list, tuple)):
        try:
            sections_data = json.loads(sections_data)
        except Exception:
            logger.error("Sections data is not JSON/list: %s", sections_data)
            status_obj.mark_failed()
            return 0.0

    total_tasks = 0
    completed_tasks = 0

    for sec in sections_data:
        task_types = sec.get("task_types", []) if isinstance(sec, dict) else []
        for t in task_types:
            if t in ALLOWED_TASK_TYPES:
                total_tasks += 1

    status_obj.total_tasks = total_tasks
    status_obj.save(update_fields=["total_tasks", "updated_at"])

    auto_context = ["–¢–µ–º–∞ —É—Ä–æ–∫–∞: " + lesson_topic]
    auto_context_str = f"–¢–µ–º–∞ —É—Ä–æ–∫–∞: {lesson_topic}"

    # –°–æ–∑–¥–∞—ë–º —Å–µ–∫—Ü–∏–∏ –∏ –∑–∞–¥–∞–Ω–∏—è
    for sec in sections_data:
        if not isinstance(sec, dict):
            continue
        section_name = sec.get("section_name") or "Section"
        task_types = [t for t in sec.get("task_types", []) if t in ALLOWED_TASK_TYPES]

        # —Å–æ–∑–¥–∞—ë–º learning —Å–µ–∫—Ü–∏—é
        sec_obj = Section.objects.create(lesson=lesson_obj, name=section_name, type="learning")

        for task_type in sec.get("task_types", []):
            if task_type not in ALLOWED_TASK_TYPES:
                logger.warning("Skipping unknown task type: %s", task_type)
                continue

            params = {"task_type": task_type, "user_query": auto_context_str}
            try:
                base_query, desired_structure = build_base_query(params)
                enhanced_query = auto_context_str + enhance_query_with_params(base_query, params)

                try:
                    item_data = generate_handler(user=user, query=enhanced_query, desired_structure=desired_structure, model_type="premium")
                except Exception as e:
                    logger.exception("generate_handler for task %s failed: %s", task_type, e)
                    continue

                if isinstance(item_data, str):
                    try:
                        item_data = json.loads(item_data)
                    except Exception:
                        logger.warning("Item data for %s is not JSON, skipping", task_type)
                        continue

                if not isinstance(item_data, dict):
                    logger.warning("Item data for %s is not dict, skipping", task_type)
                    continue

                filtered_item_data = call_form_function(task_type, user, item_data)
                if filtered_item_data is None:
                    logger.info("Filtered data is None for %s, skipping", task_type)
                    continue

                auto_context = update_auto_context(auto_context, task_type, filtered_item_data)
                if auto_context:
                    joined = "\n".join(auto_context)
                    auto_context_str = (
                        "–¢—ã - –º–µ—Ç–æ–¥–∏—Å—Ç —É—Ä–æ–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–∫–∞:\n"
                        f"{joined}\n\n"
                        "–¢—ã –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —É—Ä–æ–∫—É.\n"
                    )
                else:
                    auto_context_str = ""

                try:
                    task_instance = create_task_instance(user, task_type, filtered_item_data, sec_obj)
                except Exception as e:
                    print(e)
                    logger.exception("Failed to create task instance for %s: %s", task_type, e)
                    continue

                completed_tasks += 1
                status_obj.update_progress(completed_tasks, total_tasks)

            except Exception as e:
                print(e)
                logger.exception("Unhandled exception during generation of task %s: %s", task_type, e)
                continue

    status_obj.update_progress(completed_tasks, total_tasks)
    status_obj.mark_finished()

    return float(status_obj.percent)



@login_required
@require_POST
def onboarding_update(request):
    """
    –û–∂–∏–¥–∞–µ—Ç JSON: { "step": "<step_key>", optional: "topic", "role", "generation_id", "lesson_id" }
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å UserOnboarding –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ step == "generation_result", –∏—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å LessonGenerationStatus –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏.
    """
    try:
        payload = json.loads(request.body.decode("utf-8") or "{}")
    except json.JSONDecodeError:
        return JsonResponse({"error": "invalid json"}, status=400)

    step = payload.get("step")
    print(payload)
    if not step or step not in dict(UserOnboarding.STEP_CHOICES):
        return JsonResponse({"error": "invalid or missing step"}, status=400)

    obj, _ = UserOnboarding.objects.get_or_create(user=request.user)

    # üîí –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ "done", –∑–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if obj.current_step == "done":
        return JsonResponse({
            "status": "locked",
            "step": obj.current_step,
            "lesson_id": obj.lesson_id or None,
        }, status=403)

    obj.current_step = step

    if "generation_id" in payload:
        obj.generation_id = payload.get("generation_id") or None
    if "lesson_id" in payload:
        obj.lesson_id = payload.get("lesson_id") or None

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
    if "role" in payload:
        user = request.user
        user.teaching_role = payload["role"]
        user.save()

    obj.save()

    lesson_url = None
    pdf_url = None

    # –µ—Å–ª–∏ —à–∞–≥ generation_result ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫
    if step == "generation_result":
        last_gen = (
            LessonGenerationStatus.objects
            .filter(user=request.user, lesson__isnull=False)
            .order_by("-created_at")
            .first()
        )
        if last_gen and last_gen.lesson:
            obj.lesson_id = last_gen.lesson.id or None
            obj.save(update_fields=["lesson_id"])
            lesson_url = reverse("lesson_page", args=[last_gen.lesson.id])
            pdf_url = reverse("download_pdf", args=[last_gen.lesson.id])

    if step == "done":
        give_present(request)

    return JsonResponse({
        "status": "ok",
        "step": obj.current_step,
        "lesson_id": obj.lesson_id or None,
        "lesson_url": lesson_url,
        "pdf_url": pdf_url,
    })



def public_lessons(request):
    """
    –°–æ–±–∏—Ä–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ —à–∞–±–ª–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ,
    —É–¥–æ–±–Ω–æ–º –¥–ª—è —à–∞–±–ª–æ–Ω–∏–∑–∞—Ü–∏–∏.
    """
    try:
        qs = (
            Lesson.objects.filter(is_public=True)
            .select_related('public_data', 'course')
            .order_by('-created_at')
        )

        LEVEL_DISPLAY_MAP = {
            'A1': 'Beginner',
            'A2': 'Elementary',
            'B1': 'Intermediate',
            'B2': 'Upper-Intermediate',
            'C1': 'Advanced',
        }

        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = request.user.email if request.user.is_authenticated else None
        is_subscribed = False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if user_email:
            try:
                subscription = PublicLessonsEmails.objects.get(email=user_email)
                is_subscribed = subscription.allow_emails
            except ObjectDoesNotExist:
                pass

        lessons = []
        for lesson in qs:
            pd = getattr(lesson, 'public_data', None)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π url —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–∫–∞
            if pd and pd.link_name:
                try:
                    view_url = reverse('public_lesson_preview', kwargs={'lesson_id': lesson.id})
                except Exception:
                    view_url = reverse('public_lesson_preview_by_id', kwargs={'pk': lesson.id})
            else:
                view_url = reverse('public_lesson_preview_by_id', kwargs={'pk': lesson.id})

            # raw icon value (—Å—Ç—Ä–æ–∫–∞ ‚Äî –ª–∏–±–æ –∏–º—è –∫–ª–∞—Å—Å–∞ –∏–∫–æ–Ω–∫–∏, –ª–∏–±–æ url)
            icon_val = (pd.icon if pd else '') or ''

            # —É—Ä–æ–≤–µ–Ω—å –∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            level = (pd.level if pd else 'A1')
            try:
                level_display = pd.get_level_display() if pd else LEVEL_DISPLAY_MAP.get(level, level)
            except Exception:
                level_display = LEVEL_DISPLAY_MAP.get(level, level)

            # meta description –∏ pdf (–µ—Å–ª–∏ –µ—Å—Ç—å)
            meta_description = (pd.meta_description if pd else '') or ''
            pdf_file = pd.pdf_file if (pd and getattr(pd, 'pdf_file', None)) else None

            lessons.append({
                'name': lesson.name,                      # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –æ–±—ã—á–Ω–æ –ø–æ–ª–µ–∑–Ω–æ
                'url': view_url,                          # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–¥–æ–±–Ω–æ
                'icon': icon_val,
                'level': level,
                'get_level_display': level_display,
                'meta_description': meta_description,
                'pdf_file': pdf_file,
                'id': str(lesson.id),
            })

        # SEO
        page_meta_description = (
            "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏ –≥–æ—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤ –∏ —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É "
            "–¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ ‚Äî –ø–æ–¥–±–æ—Ä –ø–æ —Ç–µ–º–µ –∏ —É—Ä–æ–≤–Ω—é."
        )
        page_keywords = (
            "–ø–ª–∞–Ω —É—Ä–æ–∫–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É, —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É, "
            "—É—Ä–æ–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤"
        )

        return render(
            request,
            'builder/public/public_lessons_landing.html',
            {
                'lessons': lessons,
                'page_meta_description': page_meta_description,
                'page_keywords': page_keywords,
                'page_title': 'LinguaGlow ‚Äî —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã –∏ –ø–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É',
                'email': request.user.email if request.user.is_authenticated else "",
                'is_subscribed': is_subscribed,  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–ø–∏—Å–∫–∏
                'is_authenticated': request.user.is_authenticated,
            }
        )

    except Exception as e:
        return render(
            request,
            'builder/public/public_lessons_landing.html',
            {
                'lessons': [],
                'page_meta_description': "",
                'page_keywords': "",
                'page_title': 'LinguaGlow ‚Äî —Ä–∞–±–æ—á–∏–µ –ª–∏—Å—Ç—ã –∏ –ø–ª–∞–Ω—ã —É—Ä–æ–∫–æ–≤ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É'
            }
        )

def public_lesson_preview(request, lesson_id):
    try:
        lesson_obj = (
            Lesson.objects.select_related("course", "public_data")
            .get(id=lesson_id, is_public=True)
        )

        course_obj = lesson_obj.course

        is_authenticated = request.user.is_authenticated

        if is_authenticated:
            classrooms = Classroom.objects.filter(Q(teachers=request.user) | Q(students=request.user)).distinct()
        else:
            classrooms = ""

        sections = get_sorted_sections(lesson_obj)
        section_ids = [section.id for section in sections]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–µ–∫—Ü–∏–π
        section_ordering = Case(
            *[When(section_id=pk, then=pos) for pos, pk in enumerate(section_ids)],
            output_field=IntegerField()
        )

        tasks = (
            BaseTask.objects.filter(section__in=section_ids)
            .select_related("content_type")
            .annotate(section_order=section_ordering)
            .order_by("section_order", "order")
        )

        context = {
            "lesson": lesson_obj,
            'section_list': sections,
            "user_id": request.user.id if is_authenticated else "",
            'course_id': course_obj.id,
            "is_authenticated": is_authenticated,
            "tasks": tasks,
            "classrooms": classrooms
        }
        return render(request, "builder/public/public_preview.html", context)

    except Lesson.DoesNotExist:
        raise Http404("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ public_lesson_preview:", e)
        traceback.print_exc()
        return render(request, "500.html", {"error": str(e)}, status=500)

@ratelimit(key='ip', rate='20/h', block=True)
def download_public_pdf(request, lesson_id):
    try:
        lesson = Lesson.objects.select_related("public_data").get(id=lesson_id, is_public=True)

        if not lesson.public_data or not lesson.public_data.pdf_file:
            raise Http404("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        pdf_path = lesson.public_data.pdf_file.path
        if not os.path.exists(pdf_path):
            raise Http404("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        filename = os.path.basename(pdf_path)
        response = FileResponse(open(pdf_path, "rb"), content_type="application/pdf")
        response["Content-Disposition"] = f'attachment; filename="{filename}"'

        if request.user and request.user.is_authenticated:
            try:
                if hasattr(request.user, 'metrics'):
                    request.user.metrics.pdf_downloaded_counter += 1
                    request.user.metrics.save(update_fields=["pdf_downloaded_counter"])
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                import logging
                logger = logging.getLogger(__name__)
                logger.warning(f"Failed to increment tasks_generated_counter for user {request.user.id}: {e}")

        return response

    except Lesson.DoesNotExist:
        raise Http404("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@require_POST
@login_required
def pdf_downloaded(request):
    try:
        metrics, _ = UserMetrics.objects.get_or_create(user=request.user)
        metrics.update_activity()
        metrics.pdf_downloaded_counter += 1
        metrics.save(update_fields=["pdf_downloaded_counter", "last_activity_at", "first_activity_at"])
        return JsonResponse({"status": "ok", "pdf_downloaded_counter": metrics.pdf_downloaded_counter})
    except Exception as e:
        return JsonResponse({"status": "error", "message": str(e)}, status=500)

@require_POST
@ratelimit(key='ip', rate='2/d', block=True)
def subscribe_email(request):
    try:
        email = request.POST.get('email').strip().lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã

        if not email:
            return JsonResponse({
                'success': False,
                'error': 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'
            }, status=400)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç email
        validate_email(email)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ email –≤ –±–∞–∑–µ
        if PublicLessonsEmails.objects.filter(email__iexact=email).exists():
            return JsonResponse({
                'success': False,
                'error': 'Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ'
            }, status=409)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        subscription = PublicLessonsEmails.objects.create(
            email=email,
            allow_emails=True
        )

        return JsonResponse({
            'success': True,
            'message': 'Email —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
        }, status=201)

    except ValidationError:
        return JsonResponse({
            'success': False,
            'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        }, status=400)

    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        }, status=500)

@login_required
@require_POST
def link_telegram(request):
    # —Å–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    token = TelegramAuthToken.objects.create(
        user=request.user,
        token=uuid.uuid4().hex
    )

    bot_username = "linguaglow_bot"  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    url = f"https://t.me/{bot_username}?start={token.token}"

    return JsonResponse({"url": url})




@login_required
def invitation_guide(request):
    user = request.user

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî teacher
    if getattr(user, "role", None) != "teacher":
        return redirect("landing")

    # –∏—â–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å, –≥–¥–µ user —É—á–∏—Ç–µ–ª—å
    classroom = user.classrooms_as_teacher.first()

    # –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if not classroom:
        classroom = Classroom.objects.create(name="My Class")
        classroom.teachers.add(user)

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    classroom_link = request.build_absolute_uri(
        reverse("accept_invitation", args=[classroom.invitation_code])
    )

    return render(
        request,
        "articles/invitation-guide.html",
        {
            "is_authenticated": True,
            "classroom_link": classroom_link,
        }
    )

def ensure_user_lesson(user):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (course_id, lesson_id) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∏—Ç–µ–ª—è:
    - –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–∫ -> (course.id, lesson.id)
    - –µ—Å–ª–∏ –Ω–µ—Ç —É—Ä–æ–∫–∞, –Ω–æ –µ—Å—Ç—å –∫—É—Ä—Å -> —Å–æ–∑–¥–∞—ë—Ç —É—Ä–æ–∫ -> (course.id, lesson.id)
    - –µ—Å–ª–∏ –Ω–µ—Ç –∫—É—Ä—Å–∞ -> —Å–æ–∑–¥–∞—ë—Ç –∫—É—Ä—Å + —É—Ä–æ–∫ -> (course.id, lesson.id)
    """
    if getattr(user, "role", None) != "teacher":
        return None, None

    try:
        # 1) –µ—Å—Ç—å –ª–∏ —É—Ä–æ–∫?
        lesson = Lesson.objects.filter(course__user=user).first()
        if lesson:
            return lesson.course.id, lesson.id

        # 2) –µ—Å—Ç—å –∫—É—Ä—Å?
        course = Course.objects.filter(user=user).first()
        if course:
            with transaction.atomic():
                lesson = Lesson.objects.create(
                    course=course,
                    name="Lesson 1",
                    is_public=False,
                    context={}
                )

                if user.is_staff:
                    LessonPublicData.objects.create(lesson=lesson)

                Section.objects.create(
                    lesson=lesson,
                    name="Let's begin! üòâ",
                    type="learning"
                )
            return course.id, lesson.id

        # 3) –Ω–µ—Ç –Ω–∏ –∫—É—Ä—Å–∞, –Ω–∏ —É—Ä–æ–∫–∞
        with transaction.atomic():
            new_course = Course.objects.create(
                name="New Course",
                description="",
                student_level="A1",  # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                user=user
            )
            create_default_autogeneration_prefs(new_course)

            lesson = Lesson.objects.create(
                course=new_course,
                name="Lesson 1",
                is_public=False,
                context={}
            )

            Section.objects.create(
                lesson=lesson,
                name="Let's begin! üòâ",
                type="learning"
            )
        return new_course.id, lesson.id

    except Exception:
        logger.exception("ensure_user_lesson failed for user %s", user.pk)
        return None, None

@login_required
def course_guide(request):
    user = request.user

    if getattr(user, "role", None) != "teacher":
        return redirect("landing")

    course_id, lesson_id = ensure_user_lesson(user)

    return render(
        request,
        "articles/course-guide.html",
        {
            "is_authenticated": True,
            "course_id": course_id,
            "lesson_id": lesson_id,
        }
    )

