        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

document.addEventListener('DOMContentLoaded', () => {
    const studentOptions = document.querySelectorAll('.student-option');
    const dropdownButton = document.getElementById('studentDropdown');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    function activateOption(option) {
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å 'active' —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        studentOptions.forEach(opt => opt.classList.remove('active'));

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å 'active' –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        option.classList.add('active');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        dropdownButton.textContent = option.textContent;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    studentOptions.forEach(option => {
        option.addEventListener('click', (event) => {
            event.preventDefault();
            activateOption(option);
            studentId = option.dataset.studentId;
        });
    });

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if (studentOptions.length > 0) {
        activateOption(studentOptions[0]);
    }
});




        // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

function disableCopying() {
    // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    document.addEventListener('selectstart', preventSelection);
    document.addEventListener('contextmenu', preventContextMenu);
    document.addEventListener('copy', preventCopy);
}

function enableCopying() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    document.removeEventListener('selectstart', preventSelection);
    document.removeEventListener('contextmenu', preventContextMenu);
    document.removeEventListener('copy', preventCopy);
}

function preventSelection(event) {
    event.preventDefault();
}

function preventContextMenu(event) {
    event.preventDefault();
}

function preventCopy(event) {
    event.preventDefault();
}

document.addEventListener('DOMContentLoaded', function () {
    const disableCopyingButton = document.getElementById('disableCopyingButton');
    const refreshPageButton = document.getElementById('refreshPageButton');
    const studentDropdown = document.getElementById('studentDropdown');
    const controlPanelDropdown = document.getElementById('controlPanelDropdown');
    const studentOptions = document.querySelectorAll('.student-option');
    const studentDropdownContainer = studentDropdown?.closest('.dropdown');
    const controlPanelContainer = controlPanelDropdown?.closest('.dropdown');
    const bottomPanel = document.querySelector('.position-fixed.bottom-0.start-0');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"
    function showInviteButtonOnly() {
        if (!bottomPanel) return;
        bottomPanel.innerHTML = `
            <button
                class="btn btn-primary d-flex align-items-center rounded shadow"
                id="inviteStudentButton"
                data-bs-toggle="modal"
                data-bs-target="#invitationModal"
            >
                <i class="bi bi-person-plus me-2"></i> –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞
            </button>
        `;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–µ–Ω–∏–∫–æ–≤
    if (!studentOptions.length) {
        showInviteButtonOnly();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    const isCopyingAllowed = mainContainer.dataset.copyingMode; // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (isCopyingAllowed === "false" && userRole !== "teacher") {
        disableCopying();
    }

    if (disableCopyingButton) {
        disableCopyingButton.addEventListener('click', function () {
            const currentAction = disableCopyingButton.querySelector('.text').textContent.trim();
            const isCopyingAllowed = currentAction === '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ';

            fetch(`/classroom/${classroomId}/toggle-copying/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                },
                body: JSON.stringify({ allow_copying: !isCopyingAllowed })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.new_state) {
                        sendMessage("copying-enable", "", "", "all");
                        showNotification("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", "success");

                        disableCopyingButton.querySelector('.text').textContent = '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ';
                        disableCopyingButton.classList.remove('text-success');
                        disableCopyingButton.classList.add('text-danger');

                        const icon = disableCopyingButton.querySelector('i');
                        if (icon) {
                            icon.classList.add('bi-ban');
                            icon.classList.remove('bi-check-circle');
                        }
                    } else {
                        sendMessage("copying-disable", "", "", "all");
                        showNotification("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "success");

                        disableCopyingButton.querySelector('.text').textContent = '–†–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ';
                        disableCopyingButton.classList.remove('text-danger');
                        disableCopyingButton.classList.add('text-success');

                        const icon = disableCopyingButton.querySelector('i');
                        if (icon) {
                            icon.classList.add('bi-check-circle');
                            icon.classList.remove('bi-ban');
                        }
                    }
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
                }
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞:', error));
        });
    }

    if (refreshPageButton) {
        refreshPageButton.addEventListener('click', function () {
            sendMessage("page-reload", "", "", "all");
            showNotification("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–µ–Ω–∏–∫–æ–≤", "success");
            refreshPageButton.disabled = true;
            refreshPageButton.title = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–µ–Ω–∏–∫–æ–≤...';
            setTimeout(() => {
                refreshPageButton.disabled = false;
                refreshPageButton.title = '';
            }, 10000);
        });
    }
});





        //–í–µ–±–°–æ–∫–µ—Ç


    //–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ cookies –∏–ª–∏ localStorage)
const token = localStorage.getItem('auth_token') || document.cookie.replace(/(?:(?:^|.*;\s*)auth_token\s*\=\s*([^;]*).*$)|^.*$/, "$1");

        // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å Websocket

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const MAX_RECONNECT_ATTEMPTS = 10;
const INITIAL_RECONNECT_DELAY = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
const MAX_RECONNECT_DELAY = 30000; // 30 —Å–µ–∫—É–Ω–¥

let reconnectAttempts = 0;
let reconnectDelay = INITIAL_RECONNECT_DELAY;
let reconnectTimeout = null;
let socket = null;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
 * @param {string} classroomId
 * @param {string} token
 * @returns {WebSocket}
 */
function createWebSocket(classroomId, token) {
    const ws = new WebSocket(`wss://${window.location.host}/ws/classroom/${classroomId}/?token=${token}`);

    ws.onopen = () => {
        console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
        showNotification("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", "success");
        reconnectAttempts = 0;
        reconnectDelay = INITIAL_RECONNECT_DELAY;
        socketOpened = true;
    };

    ws.onclose = (event) => {
        socketOpened = false;
        if (!event.wasClean) {
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
            scheduleReconnect(classroomId, token);
        }
    };

    ws.onerror = (err) => {
        console.error("WebSocket –æ—à–∏–±–∫–∞:", err);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª onclose –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (ws.readyState !== WebSocket.CLOSED && ws.readyState !== WebSocket.CLOSING) {
            ws.close();
        }
    };

    return ws;
}

/**
 * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
 * @param {string} classroomId
 * @param {string} token
 */
function scheduleReconnect(classroomId, token) {
    if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
    }

    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
        showNotification("–í—ã –æ—Ñ—Ñ–ª–∞–π–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä ‚Äî –Ø–Ω–¥–µ–∫—Å –∏–ª–∏ Google Chrome.", "danger");
        return;
    }

    reconnectDelay = Math.min(INITIAL_RECONNECT_DELAY * Math.pow(2, reconnectAttempts), MAX_RECONNECT_DELAY);
    reconnectAttempts++;

    console.log(`‚åõ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts} —á–µ—Ä–µ–∑ ${reconnectDelay}–º—Å...`);

    reconnectTimeout = setTimeout(() => {
        socket = createWebSocket(classroomId, token);
    }, reconnectDelay);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * @param {string} classroomId
 * @param {string} token
 */
function startWebSocket(classroomId, token) {
    if (socket) {
        socket.close();
        socket = null;
    }
    reconnectAttempts = 0;
    reconnectDelay = INITIAL_RECONNECT_DELAY;
    socket = createWebSocket(classroomId, token);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    window.addEventListener('online', () => {
        if (!socket || socket.readyState === WebSocket.CLOSED) {
            console.log('üåê –°–µ—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
            reconnectAttempts = 0;
            reconnectDelay = INITIAL_RECONNECT_DELAY;
            if (reconnectTimeout) {
                clearTimeout(reconnectTimeout);
            }
            socket = createWebSocket(classroomId, token);
        }
    });
}

startWebSocket(classroomId, token);

socket.onopen = function () {
    socketOpened = true;

    if (mode === 'classroom') {
        sendMessage("user-enter", "", {"username": document.getElementById('main-container').dataset.username}, "teacher");
    }
};

socket.onmessage = function (event) {
    const { request_type, task_id, data, sender_id } = JSON.parse(event.data);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    if (
        userRole === 'teacher' &&
        request_type === 'task-answer'
    ) {
        const selectedIds = Array.isArray(studentId) ? studentId : [parseInt(studentId)];
        if (!selectedIds.includes(sender_id)) return;
    }

    const handlers = {
        "task-attention": () => moveToPointedTask(task_id),
        "task-answer": () => {
            handleTaskAnswer(task_id, data);
            updateProgressBar(task_id, data.correct_count, data.incorrect_count, data.max_score);
        },
        "test-check": () => {
            checkTestAnswers(task_id);
            updateProgressBar(task_id, data.correct_count, data.incorrect_count, data.max_score);
        },
        "truefalse-check": () => {
            checkTrueFalseAnswers(task_id);
            updateProgressBar(task_id, data.correct_count, data.incorrect_count, data.data.max_score);
        },
        "task-reset": () => {
            const taskContainer = document.getElementById(task_id);
            const taskType = taskContainer.getAttribute('data-task-type');
            const functionName = `clear${taskType.charAt(0).toUpperCase() + taskType.slice(1)}Answer`;
            if (typeof window[functionName] === 'function') {
                window[functionName](task_id);
            }
            updateProgressBar(task_id, 0, 0, 100, false);
        },
        "user-enter": () => {
            showNotification(`${data.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–ª–∞—Å—Å—É.`, "success");
            if (userRole === 'teacher') {
                const studentExists = Array.from(document.querySelectorAll('.student-option')).some(
                    el => el.textContent.trim() === data.username
                );
                if (!studentExists) window.location.reload();
            }
        },
        "user-leave": () => showNotification(`${data.username} –ø–æ–∫–∏–Ω—É–ª –∫–ª–∞—Å—Å.`, "warning"),
        "copying-enable": () => enableCopying(),
        "copying-disable": () => disableCopying(),
        "page-reload": () => location.reload(),
        "pdf-page": () => moveToSelectedPdfPage(task_id, data.page)
    };

    if (handlers[request_type]) handlers[request_type]();
};



// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –Ω–∏ onopen, –Ω–∏ onerror –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –±—ã—Å—Ç—Ä–æ
setTimeout(() => {
    if (socket.readyState !== WebSocket.OPEN && !socketOpened) {
        reconnectWebSocket(classroomId, token);
    }
}, 30000);

function sendMessage(request_type, task_id, data, receivers = 'all') {
    const message_id = "";
    const message = {
        request_type,
        task_id,
        data,
        receivers,
        message_id
    };

    // –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—é
    if (userRole === 'student') {
        message.receivers = 'teacher';
    }

    // –ï—Å–ª–∏ —É—á–∏—Ç–µ–ª—å –∏ receivers == 'student', —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    if (userRole === 'teacher' && receivers === 'student') {
        if (Array.isArray(studentId)) {
            message.receivers = studentId;  // [id1, id2, ...]
        } else if (studentId) {
            message.receivers = [parseInt(studentId)];
        }
    }

    socket.send(JSON.stringify(message));
}





        // –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏


async function fetchUserAnswers(userId, taskId, classroomId) {
    try {
        const params = new URLSearchParams({
            user_id: userId,
            task_id: taskId,
            classroom_id: classroomId
        });

        const response = await fetch(`/api/get_answers/?${params}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken') // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.status === 'error') {
            console.error('Error fetching answers:', data.message);
            return null;
        }

        return data;

    } catch (error) {
        console.error('Error fetching user answers:', error);
        return null;
    }
}








    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

function taskAttention(taskId) {
    sendMessage('task-attention', taskId, {}, 'all');
    moveToPointedTask(taskId, false);
    return;
}

function handleTaskAnswer(taskId, data) {
    const answer = data.answer;
    const isCorrect = data.isCorrect;
    const taskContainer = document.getElementById(taskId);
    if (!taskContainer) {
        return;
    }

    const task_type = taskContainer.dataset.taskType;
    const functionName = `fill${task_type.charAt(0).toUpperCase()}${task_type.slice(1)}Answer`;
    if (typeof window[functionName] === 'function') {
        window[functionName](taskId, answer, isCorrect);
    } else {
        console.warn(`–§—É–Ω–∫—Ü–∏—è ${functionName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
}

async function moveToPointedTask(taskId, scroll = true) {
    const taskContainer = document.getElementById(taskId);
    if (!taskContainer) {
        return;
    }

    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∑–∞–¥–∞–Ω–∏—é
    if (scroll) {
        const sectionId = taskContainer.dataset.sectionId;
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        await loadSection(sectionId);
        taskContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        taskContainer.classList.add('card-glowing');
        // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            taskContainer.classList.remove('card-glowing');
        }, 1000); // –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∞–Ω–∏–º–∞—Ü–∏–∏
    }, 600);
}

async function moveToSelectedPdfPage(taskId, page) {
    await moveToPointedTask(taskId, true);

    const taskEl = document.getElementById(taskId);
    if (!taskEl) return;

    const pageInput = taskEl.querySelector('#page-input');
    const nextBtn = taskEl.querySelector('#next-page');
    const prevBtn = taskEl.querySelector('#prev-page');
    const pageCountEl = taskEl.querySelector('#page-count');

    if (!pageInput || !nextBtn || !prevBtn || !pageCountEl) return;

    const max = parseInt(pageInput.getAttribute('max')) || 1;
    const targetPage = Math.min(Math.max(page, 1), max);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pageInput.value = targetPage;

    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç –Ω–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Ä–µ–Ω–¥–µ—Ä)
    pageInput.dispatchEvent(new Event('change', { bubbles: true }));

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–ª—É—à–∞–µ—Ç change
    if (typeof renderPage === 'function') {
        renderPage(targetPage, taskId);  // –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    }
}

async function deleteAnswers(task_id, classroom_id, user_id) {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
        const response = await fetch('/api/delete_answers/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            },
            body: JSON.stringify({
                task_id: task_id,
                classroom_id: classroomId,
                user_id: user_id
            })
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const data = await response.json();
        const messageDiv = document.getElementById('response-message');
        if (response.ok) {
            const taskContainer = document.getElementById(task_id);
            const taskType = taskContainer.getAttribute('data-task-type');
            const capitalizedTaskType = taskType.charAt(0).toUpperCase() + taskType.slice(1);
            const functionName = `clear${capitalizedTaskType}Answer`;
            if (typeof window[functionName] === 'function') {
                window[functionName](task_id);
            }
            updateProgressBar(task_id, 0, 0, 100, false);
        } else {
            showNotification(data.message, 'danger');
        }
    } catch (error) {
        console.error('Error:', error);
    }
}





