"""
Django settings for linguaglow project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

from django.contrib import messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'WRITE SECRET_KEY'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'users',
    'rest_framework',
    'rest_framework.authtoken',
    'django_crontab',
    'hub',
    'bot',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middleware.ReferralMiddleware',
    'users.middleware.PromoMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'linguaglow.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Указываем папку templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'linguaglow.wsgi.application'

ASGI_APPLICATION = 'linguaglow.asgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'linguaglowdb',
        'USER': 'YOUR NAME HERE',
        'PASSWORD': 'YOUR PASSWORD HERE',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'hub/static',
]

STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.CustomUser'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

X_FRAME_OPTIONS = 'ALLOWALL'

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = False
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = ['https://linguaglow.ru', 'https://www.linguaglow.ru']

RATELIMIT_ENABLE = True

LOGIN_URL = '/users/register/'

DATA_UPLOAD_MAX_MEMORY_SIZE = 85 * 1024 * 1024

TARIFFS = {
    'free': {
        'price_month': 0,
        'virtual_class': True,
        'memory_gb': 0.15,
        'token_limit': 300,
    },
    'basic': {
        'price_month': 99,
        'virtual_class': False,
        'memory_gb': 0.25,
        'token_limit': 500,
    },
    'premium': {
        'price_month': 399,
        'virtual_class': True,
        'memory_gb': 0.5,
        'token_limit': 1000,
    },
    'maximum': {
        'price_month': 599,
        'virtual_class': True,
        'memory_gb': 1,
        'token_limit': 2500,
    },
}

TOKEN_PACKS = [
    {"amount": 2000, "price":  290},
    {"amount": 10000, "price": 950},
    {"amount": 15000, "price": 1390},
]

CRONJOBS = [
    # 1. Ежедневно в 08:00 отправлять напоминания о чек-листе пользователям с незавершённым чек-листом
    ('0 8 * * *', 'django.core.management.call_command', ['checklist_reminder']),

    # 2. Ежедневно в 18:00 повторно отправлять напоминания о чек-листе
    ('0 18 * * *', 'django.core.management.call_command', ['checklist_reminder']),

    # 3. В 09:00 проверять пользователей с премиум-тарифом, зарегистрированных более 72 часов назад
    ('0 9 * * *', 'django.core.management.call_command', ['check_premium_after_72h']),

    # 4. В 11:00 проверять пользователей с тарифами BASIC, PREMIUM, MAXIMUM — истекла ли у них подписка. Если истекла в течение последних суток — отправить напоминание продлить тариф
    ('0 11 * * *', 'django.core.management.call_command', ['check_expired_tariffs']),

    # 5. В 12:00 проверять пользователей с тарифами BASIC, PREMIUM, MAXIMUM — истекла ли у них подписка. Если истекла 48-72 часов назад — направить предложение со скидкой 20% или 10%.
    ('0 12 * * *', 'django.core.management.call_command', ['check_and_offer_discount_after_expiry']),

    # 6. В 13:00 проверять пользователей с тарифами BASIC, PREMIUM, MAXIMUM — истекла ли у них подписка. Если истекла 96-120 часов назад — направить предложение увеличить количество токенов.
    ('0 13 * * *', 'django.core.management.call_command', ['check_and_offer_tokens_after_expiry']),

    # 7. В 13:30 проверять пользователей с тарифами BASIC, PREMIUM, MAXIMUM — истекла ли у них подписка. Если истекла 144-168 часов назад — предложить скидку 30%
    ('30 13 * * *', 'django.core.management.call_command', ['check_and_offer_30_percent_discount']),

    # 8. В 14:00 проверять пользователей с любыми тарифами и ролью TEACHER — не заканчиваются ли у них токены. Если меньше 100 токенов → предложить скидку 40% или 10%
    ('0 14 * * *', 'django.core.management.call_command', ['check_teacher_tokens_and_send_offer']),

    # 9. В 20:00 проверять пользователей с тарифом FREE и ролью teacher. Если прошло 24 часа с регистрации → предложить сменить тариф со скидкой 50%.
    ('0 20 * * *', 'django.core.management.call_command', ['check_and_offer_discount_for_new_free_teachers']),

    # 10. Запускать каждый день в полночь — сбрасывать тарифные токены
    ('0 0 * * *', 'django.core.management.call_command', ['reset_tariff_tokens']),
]


# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_RESULT_EXPIRES = timedelta(minutes=30)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

JITSI_APP_SECRET = "ADD YOUR JITSI_APP_SECRET HERE"

MESSAGE_TAGS = {
    messages.ERROR: 'alert-error',
}

YOOKASSA_SHOP_ID = "YOUR YOOKASSA_SHOP_ID"
YOOKASSA_SECRET_KEY = "YOUR YOOKASSA_SECRET_KEY"
SITE_DOMAIN = "YOUR DOMAIN"
YOOKASSA_DEFAULT_VAT_CODE = 1
YOOKASSA_TAX_SYSTEM_CODE = 2
YOOKASSA_TEST_MODE = False
