# Generated by Django 4.2.23 on 2025-08-30 05:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Email address used for login and account management.', max_length=254, unique=True, verbose_name='email address')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, verbose_name='username')),
                ('role', models.CharField(choices=[('student', 'Ученик'), ('teacher', 'Учитель')], default='student', max_length=20)),
                ('teaching_role', models.CharField(default='undefined', max_length=50)),
                ('allow_emails', models.BooleanField(default=True)),
                ('consent', models.BooleanField(default=False)),
                ('used_storage', models.BigIntegerField(default=0)),
                ('gender', models.CharField(choices=[('female', 'Женский'), ('male', 'Мужской')], default='female', help_text='Пол пользователя', max_length=10)),
                ('present_type', models.CharField(choices=[('SUBSCRIPTION', 'Подписка'), ('TOKENS', 'Токены')], default='SUBSCRIPTION', help_text='Тип подарка для пользователя', max_length=12)),
                ('is_new', models.BooleanField(default=True, help_text='Флаг нового пользователя')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='EmailConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('username', models.CharField(max_length=150)),
                ('password', models.CharField(max_length=128)),
                ('role', models.CharField(max_length=20)),
                ('code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('html_content', models.TextField()),
                ('type', models.CharField(choices=[('discount_20', 'Скидка 20% на продление тарифа'), ('discount_10', 'Скидка 10% на продление тарифа'), ('gift_2000_tokens', '2000 токенов в подарок'), ('gift_1000_tokens', '1000 токенов в подарок'), ('discount_25_month', 'Скидка 25% на месяц'), ('tokens_40_off', 'Токены со скидкой 40%'), ('tokens_10_off', 'Токены со скидкой 10%'), ('upgrade_25_off', 'Переход с бесплатного тарифа со скидкой 25%'), ('welcome', 'Приветственное сообщение'), ('reminder_renew_basic', 'Напоминание о продлении тарифа Базовый'), ('reminder_renew_premium', 'Напоминание о продлении тарифа Премиум'), ('reminder_renew_maximum', 'Напоминание о продлении тарифа Максимум'), ('purchase_basic', 'Покупка тарифа Базовый'), ('purchase_premium', 'Покупка тарифа Премиум'), ('purchase_maximum', 'Покупка тарифа Максимум'), ('renew_basic', 'Продление тарифа Базовый'), ('renew_premium', 'Продление тарифа Премиум'), ('renew_maximum', 'Продление тарифа Максимум'), ('generic', 'Обычное письмо'), ('checklist_reminder', 'Напоминание о чек-листе'), ('premium_reminder', 'Напоминание о наличии премиума')], default='generic', max_length=32)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('link', models.URLField(blank=True, help_text='Ссылка для кнопки «Подробнее» (необязательно)', max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('target_roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('student', 'Ученик'), ('teacher', 'Учитель')], max_length=20), default=list, help_text='Роли пользователей, которым будет показано уведомление', size=None)),
            ],
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserTokenBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff_tokens', models.IntegerField(default=0, verbose_name='Токены тарифа')),
                ('extra_tokens', models.IntegerField(default=0, verbose_name='Докупленные токены')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='token_balance', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tariff_type', models.CharField(choices=[('free', 'Бесплатный'), ('basic', 'Базовый'), ('premium', 'Премиум'), ('maximum', 'Максимум')], default='free', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Активный'), ('unpaid', 'Неоплаченный')], default='active', max_length=20)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('reset_dates', models.JSONField(blank=True, help_text='Список строк дат (дней без времени), когда токены будут обнуляться и начисляться заново', null=True)),
                ('price_month', models.PositiveIntegerField(default=0, help_text='Оплаченная стоимость тарифа за месяц')),
                ('months_left', models.PositiveIntegerField(default=0, help_text='Оставшееся количество месяцев действия тарифа')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tariff', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserOnboarding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generation_id', models.CharField(blank=True, max_length=255, null=True)),
                ('current_step', models.CharField(blank=True, choices=[('hello', 'Hello'), ('segment', 'Segment'), ('generation_waiting', 'Generation waiting'), ('generation_result', 'Generation result'), ('generation_feedback', 'Generation feedback'), ('incorrect', 'Generation incorrect'), ('done', 'Generation done')], default='hello', max_length=32, null=True)),
                ('lesson_id', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offer_type', models.CharField(choices=[('discount_20', 'Скидка 20% на продление тарифа'), ('discount_10', 'Скидка 10% на продление тарифа'), ('gift_2000_tokens', '2000 токенов в подарок'), ('gift_1000_tokens', '1000 токенов в подарок'), ('discount_25_month', 'Скидка 25% на месяц'), ('tokens_40_off', 'Токены со скидкой 40%'), ('tokens_10_off', 'Токены со скидкой 10%'), ('upgrade_25_off', 'Переход с бесплатного тарифа со скидкой 25%'), ('welcome', 'Приветственное сообщение'), ('reminder_renew_basic', 'Напоминание о продлении тарифа Базовый'), ('reminder_renew_premium', 'Напоминание о продлении тарифа Премиум'), ('reminder_renew_maximum', 'Напоминание о продлении тарифа Максимум'), ('purchase_basic', 'Покупка тарифа Базовый'), ('purchase_premium', 'Покупка тарифа Премиум'), ('purchase_maximum', 'Покупка тарифа Максимум'), ('renew_basic', 'Продление тарифа Базовый'), ('renew_premium', 'Продление тарифа Премиум'), ('renew_maximum', 'Продление тарифа Максимум'), ('generic', 'Обычное письмо'), ('checklist_reminder', 'Напоминание о чек-листе'), ('premium_reminder', 'Напоминание о наличии премиума')], max_length=32)),
                ('category', models.CharField(blank=True, choices=[('subscription', 'Подписка'), ('tokens', 'Токены'), ('other', 'Другое')], max_length=16)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Предложение пользователю',
                'verbose_name_plural': 'Предложения пользователям',
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('tariff', 'Тариф'), ('token_pack', 'Пакет токенов')], max_length=20)),
                ('tariff_type', models.CharField(blank=True, choices=[('free', 'Бесплатный'), ('basic', 'Базовый'), ('premium', 'Премиум'), ('maximum', 'Максимум')], help_text='Тип тарифа, если payment_type=tariff', max_length=20, null=True)),
                ('tariff_duration', models.CharField(blank=True, choices=[('month', '1 месяц'), ('6mo', '6 месяцев'), ('year', '12 месяцев')], help_text='Продолжительность тарифа (месяц/6мес/год)', max_length=10, null=True)),
                ('token_amount', models.PositiveIntegerField(blank=True, help_text='Количество токенов в пакете, если payment_type=token_pack', null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('full_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='RUB', max_length=5)),
                ('status', models.CharField(choices=[('pending', 'Ожидает оплаты'), ('completed', 'Оплачено'), ('failed', 'Не удалось')], default='pending', max_length=20)),
                ('transaction_id', models.CharField(blank=True, help_text='ID платежа от платёжного провайдера', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('paid_at', models.DateTimeField(blank=True, help_text='Время подтверждённой оплаты', null=True)),
                ('period_start', models.DateTimeField(blank=True, help_text='Начало периода тарифа', null=True)),
                ('period_end', models.DateTimeField(blank=True, help_text='Окончание периода тарифа', null=True)),
                ('channel', models.ForeignKey(blank=True, help_text='Канал, через который была сделана покупка', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.channel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='ref_source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.channel'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_hidden', models.BooleanField(default=False)),
                ('hidden_at', models.DateTimeField(blank=True, null=True)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.notification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'notification')},
            },
        ),
    ]
